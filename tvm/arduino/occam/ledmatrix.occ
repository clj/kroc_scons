--** Drive an 8x8 LED matrix.

#INCLUDE "wiring.module"

DATA TYPE SIGNAL IS BOOL:
VAL SIGNAL SIGNAL.VALUE IS TRUE:

VAL INT SCROLL.TIME IS 200:

-- PD2-PD7, PB0-PB1; set these high to turn the LEDs on
VAL []INT COL.PINS IS [2, 3, 4, 5, 6, 7, 8, 9]:
VAL INT COLS IS SIZE COL.PINS:
-- PB2-PB5, PC0-PC3; set these low to turn the LEDs on
VAL []INT ROW.PINS IS [10, 11, 12, 13, 14, 15, 16, 17]:
VAL INT ROWS IS SIZE ROW.PINS:

--{{{  PROC data.buffer
PROC data.buffer (CHAN BYTE in?, thru!, out!)
  INITIAL BYTE data IS 0:
  WHILE TRUE
    BYTE new:
    SEQ
      in ? new
      thru ! new
      out ! data
      data := new
:
--}}}

--{{{  PROC column
PROC column (VAL INT col,
              CHAN SIGNAL strobe.in?, strobe.out!,
              CHAN BYTE data.in?)
  BYTE portd.col, portb.col:
  SEQ
    --{{{  work out which bits to turn on for this column
    IF
      col < 6
        portd.col, portb.col := 1 << (col + 2), #00
      TRUE
        portd.col, portb.col := #00, 1 << (col - 6)
    --}}}
    --{{{  send initial strobe
    IF
      col = (COLS - 1)
        strobe.out ! SIGNAL.VALUE
      TRUE
        SKIP
    --}}}
    PLACED [MAX.PORT]BYTE ports 0:
    INITIAL BYTE data IS 0:
    WHILE TRUE
      PRI ALT
        data.in ? data
          -- We need the data inverted, since the lines we're driving are
          -- effectively active low.
          data := ~data

        SIGNAL dummy:
        strobe.in ? dummy
          VAL BYTE portd.val IS portd.col:
          VAL BYTE portb.val IS portb.col \/ ((data /\ #0F) << 2):
          VAL BYTE portc.val IS (data /\ #F0) >> 4:
          SEQ
            ports[PORTD] := portd.val
            ports[PORTB] := portb.val
            ports[PORTC] := portc.val
            strobe.out ! SIGNAL.VALUE
:
--}}}

--{{{  PROC black.hole.byte
PROC black.hole.byte (CHAN BYTE in?)
  WHILE TRUE
    BYTE dummy:
    in ? dummy
:
--}}}

--{{{  PROC feed
PROC feed (CHAN BYTE out!)
  PROC send (VAL BYTE data)
    SEQ
      out ! data
      delay (SCROLL.TIME)
  :
  WHILE TRUE
    SEQ
      SEQ num = 1 FOR 7
        SEQ
          INITIAL BYTE val IS (1 << num) - 1:
          SEQ i = 0 FOR 9 - num
            SEQ
              send (val)
              val := val << 1
          SEQ i = 0 FOR 2
            send (#00)
:
--}}}

PROC main ()
  SEQ
    --{{{  set up pins
    PLACED [MAX.PORT]BYTE ports 0:
    SEQ
      -- All outputs
      ports[DDRD] := #FF
      ports[DDRB] := #FF
      ports[DDRC] := #FF

      -- Turn all the LEDs on
      ports[PORTD] := #FC
      ports[PORTB] := #03
      ports[PORTC] := #00
    --}}}

    [COLS]CHAN SIGNAL strobe:
    [COLS + 1]CHAN BYTE data:
    PAR
      PAR i = 0 FOR COLS
        CHAN BYTE data.thru:
        PAR
          data.buffer (data[i]?, data.thru!, data[i + 1]!)
          column (i,
                  strobe[i]?, strobe[(i + 1) \ COLS]!,
                  data.thru?)
      feed (data[0]!)
      black.hole.byte (data[COLS]?)
:
