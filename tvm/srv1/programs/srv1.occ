#INCLUDE "out.occ"
#INCLUDE "motors.occ"
#INCLUDE "misc.occ"

-- Camera Resolution Constants
VAL [2]INT CAMERA.QQVGA IS [160, 128]:
VAL [2]INT CAMERA.QVGA  IS [320, 256]:
VAL [2]INT CAMERA.VGA   IS [640, 512]:
VAL [2]INT CAMERA.SXVGA IS [1280, 1024]:

PROTOCOL P.MOTOR
  CASE
    speed; INT
    speed.delta; INT
    turn; INT
    back.turn; INT
    stop
:

PROTOCOL P.STATUS
  CASE
    version
:

PROC motors (CHAN P.MOTOR in?, CHAN BOOL ctl?)
  INITIAL INT l.speed IS 0:
  INITIAL INT r.speed IS 0:
  INT n:
  INITIAL BOOL done IS FALSE:
  WHILE NOT done
    SEQ
      ALT
        in ? CASE
          speed; n
            l.speed, r.speed := n, n
          speed.delta; n
            l.speed, r.speed := (l.speed + n), (r.speed + n)
          turn; n
            l.speed, r.speed := (l.speed - n), (r.speed + n)
          back.turn; n
            l.speed, r.speed := -(l.speed - n), -(r.speed + n)
          stop
            l.speed, r.speed := 0, 0
        ctl ? done
          SKIP
      IF
        (NOT done)
          set.pwm((INT16 l.speed), (INT16 r.speed))
        TRUE
          SKIP
:

PROC test.motors (CHAN BYTE uart0.in?, uart0.out!)
  CHAN P.MOTOR m:
  CHAN BOOL ctl:
  PAR
    motors(m?, ctl?)
    INITIAL BOOL ctl.loop IS TRUE:
    WHILE ctl.loop
      SEQ
        delay(10 * SECONDS)
        ctl ! TRUE
        ctl.loop := FALSE
    INITIAL BOOL test.loop IS TRUE:
    WHILE test.loop
      SEQ
        out.string("Forward*n", 0, uart0.out!)
        m ! speed; 50
        delay(2500 * MILLIS)
        out.string("Reverse*n", 0, uart0.out!)
        m ! speed; -50
        delay(2500 * MILLIS)
:
