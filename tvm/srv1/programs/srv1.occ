-- Camera Resolution Constants
VAL [2]INT CAMERA.QQVGA IS [160, 128]:
VAL [2]INT CAMERA.QVGA  IS [320, 256]:
VAL [2]INT CAMERA.VGA   IS [640, 512]:
VAL [2]INT CAMERA.SXVGA IS [1280, 1024]:

PROTOCOL P.MOTOR
  CASE
    speed; INT
    speed.delta; INT
    turn; INT
    back.turn; INT
    stop
:

PROTOCOL P.CAMERA
  CASE
    resolution; [2]INT
    overlay; BOOL
    quality; BYTE
    frame
:

PROTOCOL P.VISION
  CASE
    range
:

PROTOCOL P.STATUS
  CASE
    version
:

PROC delay.ms (VAL INT ms)
  TIMER tim:
  INT t:
  SEQ
    tim ? t
    tim ? AFTER t PLUS ms
:

PROC motors (CHAN P.MOTOR in?)
  INITIAL INT l.speed IS 0:
  INITIAL INT r.speed IS 0:
  INT n:
  WHILE TRUE
    in ? CASE
      speed; n
        l.speed, r.speed := n, n
      speed.delta; n
        l.speed, r.speed := (l.speed + n), (r.speed + n)
      turn; n
        l.speed, r.speed := (l.speed - n), (r.speed + n)
      back.turn; n
        l.speed, r.speed := -(l.speed - n), -(r.speed + n)
      stop
        l.speed, r.speed := 0, 0
:

PROC camera (CHAN P.CAMERA in?, CHAN BYTE out!)
  SKIP
:

PROC srv1.protocol (CHAN BYTE in?, CHAN P.MOTOR motors!, CHAN P.CAMERA camera!)
  BYTE ch: 
  INITIAL [2]BYTE response IS ['#', 0]:
  WHILE TRUE
    SEQ
      in ? ch
      response[1] := ch
      CASE ch
        -- Direct motor control
        'M'
          SKIP
        -- Drift left
        '7'
          motors ! turn; 15
        -- Drive forward
        '8'
          motors ! speed; 50
        -- Drift right
        '9'
          motors ! turn; -15
        -- Drive left
        '4'
          motors ! turn; 30
        -- Stop
        '5'
          motors ! speed; 0
        -- Drive right
        '6'
          motors ! turn; -30
        -- Back left
        '1'
          motors ! back.turn; 30
        -- Reverse
        '2'
          motors ! speed.delta; -1
        -- Back right
        '3'
          motors ! back.turn; -30
        -- Clockwise turn
        '.'
          SEQ
            motors ! turn; 75
            delay.ms(200)
            motors ! stop
        -- Caption overlay
        'o'
          camera ! overlay; TRUE
        'O'
          camera ! overlay; FALSE
        -- Lasers
        'l'
          SKIP -- On
        'L'
          SKIP -- Off
        -- Time in MS since reset.
        't'
          SEQ
            response[1] := '#'
            SKIP 
        -- JPEG Quality
        'q'
          BYTE q: -- Quality 1-8 
          SEQ
            response[1] := '#'
            in ? q
            IF
              (q < 1)
                q := 0
              (q > 8)
                q := 8 
              TRUE
                SKIP
            camera ! quality; q
        -- Find range to object using Lasers
        'R'
          SKIP
        -- IO pins
        'd'
          SEQ
            in ? ch
            CASE ch
              -- Read level
              'r'
                SKIP
              -- Direction/Write level
              'd','w'
                SKIP
        -- Xmodem
        'X'
          SKIP
        -- Flash memory
        'z'
          SEQ
            in ? ch
            CASE ch
              -- Write
              'w'
                SKIP
              -- Read
              'r'
                SKIP
              -- Dump
              'd'
                SKIP
              -- Update boot sector
              'Z'
                SKIP
:
