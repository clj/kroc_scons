#INCLUDE "defBF534.inc"
#INCLUDE "out.occ"

#PRAGMA EXTERNAL "PROC C.tvmspecial.0.run.user (VAL []BYTE bytecode, VAL INT ws, vs, ms, VAL []BYTE tlp, VAL INT argc, CHAN BYTE in?, out!) = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.1.kill.user () = 0"
#PRAGMA EXTERNAL "PROC C.tvmspecial.2.query.user (BOOL running, INT state, []BYTE context) = 0"

VAL INT USER.BYTECODE     IS #0070000:
VAL INT USER.BYTECODE.LEN IS #0010000:

DATA TYPE SRV.HEADER
  PACKED RECORD
    INT tbc.version:
    INT ws.size:
    INT vs.size:
    INT ms.size:
    INT inst.size:
:

DATA TYPE TVM.CONTEXT
  PACKED RECORD
    INT   iptr:
    
    INT   oreg:
    INT   areg:
    INT   breg:
    INT   creg:

    INT   pri:

    INT   wptr:
    INT   fptr:
    INT   bptr:
    INT   tptr:
    INT   tnext:

    INT   saved.creg:

    INT   eflags:
    INT   state:
:

PROC delay.us (VAL INT us)
  TIMER tim:
  INT t:
  SEQ
    tim ? t
    tim ? AFTER (t PLUS us)
:

PROC drain.uart (CHAN BYTE in?, out!)
  INITIAL INT clear IS 0:
  SEQ
    -- Clear out UART
    out.string ("Draining UART...*n", 0, out!)

    WHILE clear < 10
      PRI ALT
        BYTE b:
        in ? b
          SKIP
        TRUE & SKIP
          SEQ
            delay.us (100000)
            clear := clear + 1
:

PROC firmware ()
  PLACED [PORTGIO.LEN]INT16 port.g.io PORTGIO.ADDR:
  #PRAGMA DEFINED port.g.io

  PLACED [USER.BYTECODE.LEN]BYTE bytecode USER.BYTECODE:
  #PRAGMA DEFINED bytecode

  CHAN BYTE uart0:
  PLACE uart0 AT #0:

  SRV.HEADER header:

  CHAN BYTE uart0.in, uart0.out:
  PAR
    WHILE TRUE
      BYTE b:
      SEQ
        uart0.out ? b
        uart0 ! b

    WHILE TRUE
      BYTE b:
      SEQ
        uart0 ? b
        uart0.in ! b

    WHILE TRUE
      INITIAL BOOL killed IS FALSE:
      SEQ
        port.g.io[PORTGIO] := port.g.io[PORTGIO] /\ (~#0300)

        -- Clear out UART
        drain.uart (uart0.in?, uart0.out!)

        -- Download header
        INITIAL BOOL done IS FALSE:
        WHILE NOT done
          SEQ
            out.string ("Waiting for header (", 0, uart0.out!)
            out.int (BYTESIN(SRV.HEADER), 0, uart0.out!)
            out.string (" bytes)*n", 0, uart0.out!)

            []BYTE header RETYPES header:
            SEQ i = 0 FOR SIZE header
              uart0.in ? header[i >< 3] -- byteswap from 32bit big-endian

            IF
              header[tbc.version] = #74766D03 -- TVM\003
                done := TRUE
              TRUE
                SEQ
                  out.string ("Bad TBC Header ID = ", 0, uart0.out!)
                  out.hex (header[tbc.version], 0, uart0.out!)
                  uart0.out ! '*n'
                  drain.uart (uart0.in?, uart0.out!)

        #PRAGMA DEFINED header
        -- Download bytecode
        out.string ("Got header, ws.size = ", 0, uart0.out!)
        out.int (header[ws.size], 0, uart0.out!)
        out.string (", vs.size = ", 0, uart0.out!)
        out.int (header[vs.size], 0, uart0.out!)
        out.string (", ms.size = ", 0, uart0.out!)
        out.int (header[ms.size], 0, uart0.out!)
        out.string (".*n", 0, uart0.out!)

        out.string ("Waiting for bytecode (", 0, uart0.out!)
        out.int (header[inst.size], 0, uart0.out!)
        out.string (" bytes).*n", 0, uart0.out!)

        SEQ i = 0 FOR header[inst.size]
          SEQ
            uart0.in ? bytecode[i]
            uart0.out ! '#'

        uart0.out ! '*n'

        -- Run bytecode
        out.string ("Running bytecode...*n", 0, uart0.out!)

        CHAN BOOL end.in, end.out, end.leds:
        CHAN BYTE data.in, data.out:
        PAR
          SEQ
            VAL INT ws IS header[ws.size]:
            VAL INT vs IS header[vs.size]:
            VAL INT ms IS header[ms.size]:
            VAL INT inst.size IS header[inst.size]:
            C.tvmspecial.0.run.user ([bytecode FOR inst.size], ws, vs, ms, "?!", 2, data.in?, data.out!)
            PAR
              end.in ! TRUE
              end.out ! TRUE
              end.leds ! TRUE

          INITIAL BOOL done IS FALSE:
          WHILE NOT done
            PRI ALT
              end.in ? done
                SKIP
              BYTE b:
              uart0.in ? b
                IF
                  b = '!'
                    BYTE c:
                    SEQ
                      uart0.in ? c
                      IF
                        c = '*n'
                          SEQ
                            killed := TRUE
                            C.tvmspecial.1.kill.user ()
                        TRUE
                          SEQ
                            data.in ! b
                            data.in ! c
                  TRUE
                    data.in ! b

          INITIAL BOOL done IS FALSE:
          WHILE NOT done
            PRI ALT
              end.out ? done
                SKIP
              BYTE b:
              data.out ? b
                IF
                  b = #00
                    SKIP
                  TRUE
                    uart0.out ! b

          TIMER time:
          INT next.flash:
          SEQ
            time ? next.flash
            INITIAL BOOL done IS FALSE:
            WHILE NOT done
              PRI ALT
                end.leds ? done
                  SKIP
                time ? AFTER next.flash
                  SEQ
                    port.g.io[PORTGIO] := port.g.io[PORTGIO] >< #0100
                    next.flash := next.flash PLUS 500000
:

