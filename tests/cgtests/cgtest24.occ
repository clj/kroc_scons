-- version control marker $Id: cgtest24.occ,v 1.5 1995/10/10 12:58:36 djb1 Exp $
-- Function result combinations

PROC cgtest24 (CHAN OF BYTE keyb, scr, err)

  #INCLUDE "cgmain.occ"
  #INCLUDE "cgreal.occ"

  SEQ
    init ("CG test 24", "Function result combinations")
    --{{{  multi result fns
    --{{{  singles (8 functions)
    BOOL  FUNCTION f.BOOL  (VAL INT x) IS x <> 27 :
    BYTE  FUNCTION f.BYTE  (VAL INT x) IS BYTE x :
    INT   FUNCTION f.INT   (VAL INT x) IS INT x :
    INT16 FUNCTION f.INT16 (VAL INT x) IS INT16 x :
    INT32 FUNCTION f.INT32 (VAL INT x) IS INT32 x :
    INT64 FUNCTION f.INT64 (VAL INT x) IS INT64 x :
    REAL32 FUNCTION f.REAL32(VAL INT x) IS REAL32 ROUND x :
    REAL64 FUNCTION f.REAL64(VAL INT x) IS REAL64 ROUND x :
    --}}}
    --{{{  doubles (64 functions)
    BOOL,BOOL   FUNCTION f.BOOL.BOOL   (VAL INT x) IS f.BOOL(x), f.BOOL(x) :
    BOOL,BYTE   FUNCTION f.BOOL.BYTE   (VAL INT x) IS f.BOOL(x), f.BYTE(x) :
    BOOL,INT    FUNCTION f.BOOL.INT    (VAL INT x) IS f.BOOL(x), f.INT (x) :
    BOOL,INT16  FUNCTION f.BOOL.INT16  (VAL INT x) IS f.BOOL(x), f.INT16 (x) :
    BOOL,INT32  FUNCTION f.BOOL.INT32  (VAL INT x) IS f.BOOL(x), f.INT32 (x) :
    BOOL,INT64  FUNCTION f.BOOL.INT64  (VAL INT x) IS f.BOOL(x), f.INT64 (x) :
    BOOL,REAL32 FUNCTION f.BOOL.REAL32 (VAL INT x) IS f.BOOL(x), f.REAL32 (x) :
    BOOL,REAL64 FUNCTION f.BOOL.REAL64 (VAL INT x) IS f.BOOL(x), f.REAL64 (x) :
    BYTE,BOOL   FUNCTION f.BYTE.BOOL   (VAL INT x) IS f.BYTE(x), f.BOOL(x) :
    BYTE,BYTE   FUNCTION f.BYTE.BYTE   (VAL INT x) IS f.BYTE(x), f.BYTE(x) :
    BYTE,INT    FUNCTION f.BYTE.INT    (VAL INT x) IS f.BYTE(x), f.INT (x) :
    BYTE,INT16  FUNCTION f.BYTE.INT16  (VAL INT x) IS f.BYTE(x), f.INT16 (x) :
    BYTE,INT32  FUNCTION f.BYTE.INT32  (VAL INT x) IS f.BYTE(x), f.INT32 (x) :
    BYTE,INT64  FUNCTION f.BYTE.INT64  (VAL INT x) IS f.BYTE(x), f.INT64 (x) :
    BYTE,REAL32 FUNCTION f.BYTE.REAL32 (VAL INT x) IS f.BYTE(x), f.REAL32 (x) :
    BYTE,REAL64 FUNCTION f.BYTE.REAL64 (VAL INT x) IS f.BYTE(x), f.REAL64 (x) :
    INT,BOOL   FUNCTION f.INT.BOOL   (VAL INT x) IS f.INT (x), f.BOOL(x) :
    INT,BYTE   FUNCTION f.INT.BYTE   (VAL INT x) IS f.INT (x), f.BYTE(x) :
    INT,INT    FUNCTION f.INT.INT    (VAL INT x) IS f.INT (x), f.INT (x) :
    INT,INT16  FUNCTION f.INT.INT16  (VAL INT x) IS f.INT (x), f.INT16 (x) :
    INT,INT32  FUNCTION f.INT.INT32  (VAL INT x) IS f.INT (x), f.INT32 (x) :
    INT,INT64  FUNCTION f.INT.INT64  (VAL INT x) IS f.INT (x), f.INT64 (x) :
    INT,REAL32 FUNCTION f.INT.REAL32 (VAL INT x) IS f.INT (x), f.REAL32 (x) :
    INT,REAL64 FUNCTION f.INT.REAL64 (VAL INT x) IS f.INT (x), f.REAL64 (x) :
    --{{{  All INT16
    INT16,BOOL   FUNCTION f.INT16.BOOL   (VAL INT x) IS f.INT16 (x), f.BOOL(x) :
    INT16,BYTE   FUNCTION f.INT16.BYTE   (VAL INT x) IS f.INT16 (x), f.BYTE(x) :
    INT16,INT    FUNCTION f.INT16.INT    (VAL INT x) IS f.INT16 (x), f.INT (x) :
    INT16,INT16  FUNCTION f.INT16.INT16  (VAL INT x) IS f.INT16 (x), f.INT16 (x) :
    INT16,INT32  FUNCTION f.INT16.INT32  (VAL INT x) IS f.INT16 (x), f.INT32 (x) :
    INT16,INT64  FUNCTION f.INT16.INT64  (VAL INT x) IS f.INT16 (x), f.INT64 (x) :
    INT16,REAL32 FUNCTION f.INT16.REAL32 (VAL INT x) IS f.INT16 (x), f.REAL32 (x) :
    INT16,REAL64 FUNCTION f.INT16.REAL64 (VAL INT x) IS f.INT16 (x), f.REAL64 (x) :
    --}}}
    INT32,BOOL   FUNCTION f.INT32.BOOL   (VAL INT x) IS f.INT32 (x), f.BOOL(x) :
    INT32,BYTE   FUNCTION f.INT32.BYTE   (VAL INT x) IS f.INT32 (x), f.BYTE(x) :
    INT32,INT    FUNCTION f.INT32.INT    (VAL INT x) IS f.INT32 (x), f.INT (x) :
    INT32,INT16  FUNCTION f.INT32.INT16  (VAL INT x) IS f.INT32 (x), f.INT16 (x) :
    INT32,INT32  FUNCTION f.INT32.INT32  (VAL INT x) IS f.INT32 (x), f.INT32 (x) :
    INT32,INT64  FUNCTION f.INT32.INT64  (VAL INT x) IS f.INT32 (x), f.INT64 (x) :
    INT32,REAL32 FUNCTION f.INT32.REAL32 (VAL INT x) IS f.INT32 (x), f.REAL32 (x) :
    INT32,REAL64 FUNCTION f.INT32.REAL64 (VAL INT x) IS f.INT32 (x), f.REAL64 (x) :
    INT64,BOOL   FUNCTION f.INT64.BOOL   (VAL INT x) IS f.INT64 (x), f.BOOL(x) :
    INT64,BYTE   FUNCTION f.INT64.BYTE   (VAL INT x) IS f.INT64 (x), f.BYTE(x) :
    INT64,INT    FUNCTION f.INT64.INT    (VAL INT x) IS f.INT64 (x), f.INT (x) :
    INT64,INT16  FUNCTION f.INT64.INT16  (VAL INT x) IS f.INT64 (x), f.INT16 (x) :
    INT64,INT32  FUNCTION f.INT64.INT32  (VAL INT x) IS f.INT64 (x), f.INT32 (x) :
    INT64,INT64  FUNCTION f.INT64.INT64  (VAL INT x) IS f.INT64 (x), f.INT64 (x) :
    INT64,REAL32 FUNCTION f.INT64.REAL32 (VAL INT x) IS f.INT64 (x), f.REAL32 (x) :
    INT64,REAL64 FUNCTION f.INT64.REAL64 (VAL INT x) IS f.INT64 (x), f.REAL64 (x) :
    REAL32,BOOL   FUNCTION f.REAL32.BOOL   (VAL INT x) IS f.REAL32 (x), f.BOOL(x) :
    REAL32,BYTE   FUNCTION f.REAL32.BYTE   (VAL INT x) IS f.REAL32 (x), f.BYTE(x) :
    REAL32,INT    FUNCTION f.REAL32.INT    (VAL INT x) IS f.REAL32 (x), f.INT (x) :
    REAL32,INT16  FUNCTION f.REAL32.INT16  (VAL INT x) IS f.REAL32 (x), f.INT16 (x) :
    REAL32,INT32  FUNCTION f.REAL32.INT32  (VAL INT x) IS f.REAL32 (x), f.INT32 (x) :
    REAL32,INT64  FUNCTION f.REAL32.INT64  (VAL INT x) IS f.REAL32 (x), f.INT64 (x) :
    REAL32,REAL32 FUNCTION f.REAL32.REAL32 (VAL INT x) IS f.REAL32 (x), f.REAL32 (x) :
    REAL32,REAL64 FUNCTION f.REAL32.REAL64 (VAL INT x) IS f.REAL32 (x), f.REAL64 (x) :
    REAL64,BOOL   FUNCTION f.REAL64.BOOL   (VAL INT x) IS f.REAL64 (x), f.BOOL(x) :
    REAL64,BYTE   FUNCTION f.REAL64.BYTE   (VAL INT x) IS f.REAL64 (x), f.BYTE(x) :
    REAL64,INT    FUNCTION f.REAL64.INT    (VAL INT x) IS f.REAL64 (x), f.INT (x) :
    REAL64,INT16  FUNCTION f.REAL64.INT16  (VAL INT x) IS f.REAL64 (x), f.INT16 (x) :
    REAL64,INT32  FUNCTION f.REAL64.INT32  (VAL INT x) IS f.REAL64 (x), f.INT32 (x) :
    REAL64,INT64  FUNCTION f.REAL64.INT64  (VAL INT x) IS f.REAL64 (x), f.INT64 (x) :
    REAL64,REAL32 FUNCTION f.REAL64.REAL32 (VAL INT x) IS f.REAL64 (x), f.REAL32 (x) :
    REAL64,REAL64 FUNCTION f.REAL64.REAL64 (VAL INT x) IS f.REAL64 (x), f.REAL64 (x) :
    --}}}
    --{{{  trebles (27 functions)
    INT, INT, INT    FUNCTION f.INT.INT.INT   (VAL INT x) IS f.INT(x), f.INT(x), f.INT(x) :
    INT, INT, INT64  FUNCTION f.INT.INT.INT64 (VAL INT x) IS f.INT(x), f.INT(x), f.INT64(x) :
    INT, INT, REAL64 FUNCTION f.INT.INT.REAL64(VAL INT x) IS f.INT(x), f.INT(x), f.REAL64(x) :
    INT, INT64, INT    FUNCTION f.INT.INT64.INT   (VAL INT x) IS f.INT(x), f.INT64(x), f.INT(x) :
    INT, INT64, INT64  FUNCTION f.INT.INT64.INT64 (VAL INT x) IS f.INT(x), f.INT64(x), f.INT64(x) :
    INT, INT64, REAL64 FUNCTION f.INT.INT64.REAL64(VAL INT x) IS f.INT(x), f.INT64(x), f.REAL64(x) :
    INT, REAL64, INT    FUNCTION f.INT.REAL64.INT   (VAL INT x) IS f.INT(x), f.REAL64(x), f.INT(x) :
    INT, REAL64, INT64  FUNCTION f.INT.REAL64.INT64 (VAL INT x) IS f.INT(x), f.REAL64(x), f.INT64(x) :
    INT, REAL64, REAL64 FUNCTION f.INT.REAL64.REAL64(VAL INT x) IS f.INT(x), f.REAL64(x), f.REAL64(x) :
    
    INT64, INT, INT    FUNCTION f.INT64.INT.INT   (VAL INT x) IS f.INT64(x), f.INT(x), f.INT(x) :
    INT64, INT, INT64  FUNCTION f.INT64.INT.INT64 (VAL INT x) IS f.INT64(x), f.INT(x), f.INT64(x) :
    INT64, INT, REAL64 FUNCTION f.INT64.INT.REAL64(VAL INT x) IS f.INT64(x), f.INT(x), f.REAL64(x) :
    INT64, INT64, INT    FUNCTION f.INT64.INT64.INT   (VAL INT x) IS f.INT64(x), f.INT64(x), f.INT(x) :
    INT64, INT64, INT64  FUNCTION f.INT64.INT64.INT64 (VAL INT x) IS f.INT64(x), f.INT64(x), f.INT64(x) :
    INT64, INT64, REAL64 FUNCTION f.INT64.INT64.REAL64(VAL INT x) IS f.INT64(x), f.INT64(x), f.REAL64(x) :
    INT64, REAL64, INT    FUNCTION f.INT64.REAL64.INT   (VAL INT x) IS f.INT64(x), f.REAL64(x), f.INT(x) :
    INT64, REAL64, INT64  FUNCTION f.INT64.REAL64.INT64 (VAL INT x) IS f.INT64(x), f.REAL64(x), f.INT64(x) :
    INT64, REAL64, REAL64 FUNCTION f.INT64.REAL64.REAL64(VAL INT x) IS f.INT64(x), f.REAL64(x), f.REAL64(x) :
    
    REAL64, INT, INT    FUNCTION f.REAL64.INT.INT   (VAL INT x) IS f.REAL64(x), f.INT(x), f.INT(x) :
    REAL64, INT, INT64  FUNCTION f.REAL64.INT.INT64 (VAL INT x) IS f.REAL64(x), f.INT(x), f.INT64(x) :
    REAL64, INT, REAL64 FUNCTION f.REAL64.INT.REAL64(VAL INT x) IS f.REAL64(x), f.INT(x), f.REAL64(x) :
    REAL64, INT64, INT    FUNCTION f.REAL64.INT64.INT   (VAL INT x) IS f.REAL64(x), f.INT64(x), f.INT(x) :
    REAL64, INT64, INT64  FUNCTION f.REAL64.INT64.INT64 (VAL INT x) IS f.REAL64(x), f.INT64(x), f.INT64(x) :
    REAL64, INT64, REAL64 FUNCTION f.REAL64.INT64.REAL64(VAL INT x) IS f.REAL64(x), f.INT64(x), f.REAL64(x) :
    REAL64, REAL64, INT    FUNCTION f.REAL64.REAL64.INT   (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT(x) :
    REAL64, REAL64, INT64  FUNCTION f.REAL64.REAL64.INT64 (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT64(x) :
    REAL64, REAL64, REAL64 FUNCTION f.REAL64.REAL64.REAL64(VAL INT x) IS f.REAL64(x), f.REAL64(x), f.REAL64(x) :
    
    --}}}
    --{{{  quads   (16 functions)
    INT, INT, INT, INT    FUNCTION f.INT.INT.INT.INT   (VAL INT x) IS f.INT(x), f.INT(x), f.INT(x), f.INT(x) :
    INT, INT, INT, REAL64 FUNCTION f.INT.INT.INT.REAL64(VAL INT x) IS f.INT(x), f.INT(x), f.INT(x), f.REAL64(x) :
    INT, INT, REAL64, INT    FUNCTION f.INT.INT.REAL64.INT   (VAL INT x) IS f.INT(x), f.INT(x), f.REAL64(x), f.INT(x) :
    INT, INT, REAL64, REAL64 FUNCTION f.INT.INT.REAL64.REAL64(VAL INT x) IS f.INT(x), f.INT(x), f.REAL64(x), f.REAL64(x) :
    
    INT, REAL64, INT, INT    FUNCTION f.INT.REAL64.INT.INT   (VAL INT x) IS f.INT(x), f.REAL64(x), f.INT(x), f.INT(x) :
    INT, REAL64, INT, REAL64 FUNCTION f.INT.REAL64.INT.REAL64(VAL INT x) IS f.INT(x), f.REAL64(x), f.INT(x), f.REAL64(x) :
    INT, REAL64, REAL64, INT    FUNCTION f.INT.REAL64.REAL64.INT   (VAL INT x) IS f.INT(x), f.REAL64(x), f.REAL64(x), f.INT(x) :
    INT, REAL64, REAL64, REAL64 FUNCTION f.INT.REAL64.REAL64.REAL64(VAL INT x) IS f.INT(x), f.REAL64(x), f.REAL64(x), f.REAL64(x) :
    
    REAL64, INT, INT, INT    FUNCTION f.REAL64.INT.INT.INT   (VAL INT x) IS f.REAL64(x), f.INT(x), f.INT(x), f.INT(x) :
    REAL64, INT, INT, REAL64 FUNCTION f.REAL64.INT.INT.REAL64(VAL INT x) IS f.REAL64(x), f.INT(x), f.INT(x), f.REAL64(x) :
    REAL64, INT, REAL64, INT    FUNCTION f.REAL64.INT.REAL64.INT   (VAL INT x) IS f.REAL64(x), f.INT(x), f.REAL64(x), f.INT(x) :
    REAL64, INT, REAL64, REAL64 FUNCTION f.REAL64.INT.REAL64.REAL64(VAL INT x) IS f.REAL64(x), f.INT(x), f.REAL64(x), f.REAL64(x) :
    
    REAL64, REAL64, INT, INT    FUNCTION f.REAL64.REAL64.INT.INT   (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT(x), f.INT(x) :
    REAL64, REAL64, INT, REAL64 FUNCTION f.REAL64.REAL64.INT.REAL64(VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT(x), f.REAL64(x) :
    REAL64, REAL64, REAL64, INT    FUNCTION f.REAL64.REAL64.REAL64.INT   (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.REAL64(x), f.INT(x) :
    REAL64, REAL64, REAL64, REAL64 FUNCTION f.REAL64.REAL64.REAL64.REAL64(VAL INT x) IS f.REAL64(x), f.REAL64(x), f.REAL64(x), f.REAL64(x) :
    
    --}}}
    --{{{  quins   (32 functions)
    INT, INT, INT, INT, INT    FUNCTION f.INT.INT.INT.INT.INT   (VAL INT x) IS f.INT(x), f.INT(x), f.INT(x), f.INT(x), f.INT(x) :
    INT, INT, INT, INT, REAL64 FUNCTION f.INT.INT.INT.INT.REAL64(VAL INT x) IS f.INT(x), f.INT(x), f.INT(x), f.INT(x), f.REAL64(x) :
    INT, INT, INT, REAL64, INT    FUNCTION f.INT.INT.INT.REAL64.INT   (VAL INT x) IS f.INT(x), f.INT(x), f.INT(x), f.REAL64(x), f.INT(x) :
    INT, INT, INT, REAL64, REAL64 FUNCTION f.INT.INT.INT.REAL64.REAL64(VAL INT x) IS f.INT(x), f.INT(x), f.INT(x), f.REAL64(x), f.REAL64(x) :
    
    INT, INT, REAL64, INT, INT    FUNCTION f.INT.INT.REAL64.INT.INT   (VAL INT x) IS f.INT(x), f.INT(x), f.REAL64(x), f.INT(x), f.INT(x) :
    INT, INT, REAL64, INT, REAL64 FUNCTION f.INT.INT.REAL64.INT.REAL64(VAL INT x) IS f.INT(x), f.INT(x), f.REAL64(x), f.INT(x), f.REAL64(x) :
    INT, INT, REAL64, REAL64, INT    FUNCTION f.INT.INT.REAL64.REAL64.INT   (VAL INT x) IS f.INT(x), f.INT(x), f.REAL64(x), f.REAL64(x), f.INT(x) :
    INT, INT, REAL64, REAL64, REAL64 FUNCTION f.INT.INT.REAL64.REAL64.REAL64(VAL INT x) IS f.INT(x), f.INT(x), f.REAL64(x), f.REAL64(x), f.REAL64(x) :
    
    INT, REAL64, INT, INT, INT    FUNCTION f.INT.REAL64.INT.INT.INT   (VAL INT x) IS f.INT(x), f.REAL64(x), f.INT(x), f.INT(x), f.INT(x) :
    INT, REAL64, INT, INT, REAL64 FUNCTION f.INT.REAL64.INT.INT.REAL64(VAL INT x) IS f.INT(x), f.REAL64(x), f.INT(x), f.INT(x), f.REAL64(x) :
    INT, REAL64, INT, REAL64, INT    FUNCTION f.INT.REAL64.INT.REAL64.INT   (VAL INT x) IS f.INT(x), f.REAL64(x), f.INT(x), f.REAL64(x), f.INT(x) :
    INT, REAL64, INT, REAL64, REAL64 FUNCTION f.INT.REAL64.INT.REAL64.REAL64(VAL INT x) IS f.INT(x), f.REAL64(x), f.INT(x), f.REAL64(x), f.REAL64(x) :
    
    INT, REAL64, REAL64, INT, INT    FUNCTION f.INT.REAL64.REAL64.INT.INT   (VAL INT x) IS f.INT(x), f.REAL64(x), f.REAL64(x), f.INT(x), f.INT(x) :
    INT, REAL64, REAL64, INT, REAL64 FUNCTION f.INT.REAL64.REAL64.INT.REAL64(VAL INT x) IS f.INT(x), f.REAL64(x), f.REAL64(x), f.INT(x), f.REAL64(x) :
    INT, REAL64, REAL64, REAL64, INT    FUNCTION f.INT.REAL64.REAL64.REAL64.INT   (VAL INT x) IS f.INT(x), f.REAL64(x), f.REAL64(x), f.REAL64(x), f.INT(x) :
    
    
    INT, REAL64, REAL64, REAL64, REAL64 FUNCTION f.INT.REAL64.REAL64.REAL64.REAL64(VAL INT x) IS f.INT(x), f.REAL64(x), f.REAL64(x), f.REAL64(x), f.REAL64(x) :
    
    REAL64, INT, INT, INT, INT    FUNCTION f.REAL64.INT.INT.INT.INT   (VAL INT x) IS f.REAL64(x), f.INT(x), f.INT(x), f.INT(x), f.INT(x) :
    REAL64, INT, INT, INT, REAL64 FUNCTION f.REAL64.INT.INT.INT.REAL64(VAL INT x) IS f.REAL64(x), f.INT(x), f.INT(x), f.INT(x), f.REAL64(x) :
    REAL64, INT, INT, REAL64, INT    FUNCTION f.REAL64.INT.INT.REAL64.INT   (VAL INT x) IS f.REAL64(x), f.INT(x), f.INT(x), f.REAL64(x), f.INT(x) :
    REAL64, INT, INT, REAL64, REAL64 FUNCTION f.REAL64.INT.INT.REAL64.REAL64(VAL INT x) IS f.REAL64(x), f.INT(x), f.INT(x), f.REAL64(x), f.REAL64(x) :
    
    REAL64, INT, REAL64, INT, INT    FUNCTION f.REAL64.INT.REAL64.INT.INT   (VAL INT x) IS f.REAL64(x), f.INT(x), f.REAL64(x), f.INT(x), f.INT(x) :
    REAL64, INT, REAL64, INT, REAL64 FUNCTION f.REAL64.INT.REAL64.INT.REAL64(VAL INT x) IS f.REAL64(x), f.INT(x), f.REAL64(x), f.INT(x), f.REAL64(x) :
    REAL64, INT, REAL64, REAL64, INT    FUNCTION f.REAL64.INT.REAL64.REAL64.INT   (VAL INT x) IS f.REAL64(x), f.INT(x), f.REAL64(x), f.REAL64(x), f.INT(x) :
    
    
    REAL64, INT, REAL64, REAL64, REAL64 FUNCTION f.REAL64.INT.REAL64.REAL64.REAL64(VAL INT x) IS f.REAL64(x), f.INT(x), f.REAL64(x), f.REAL64(x), f.REAL64(x) :
    
    REAL64, REAL64, INT, INT, INT    FUNCTION f.REAL64.REAL64.INT.INT.INT   (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT(x), f.INT(x), f.INT(x) :
    REAL64, REAL64, INT, INT, REAL64 FUNCTION f.REAL64.REAL64.INT.INT.REAL64(VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT(x), f.INT(x), f.REAL64(x) :
    REAL64, REAL64, INT, REAL64, INT    FUNCTION f.REAL64.REAL64.INT.REAL64.INT   (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT(x), f.REAL64(x), f.INT(x) :
    
    
    REAL64, REAL64, INT, REAL64, REAL64 FUNCTION f.REAL64.REAL64.INT.REAL64.REAL64(VAL INT x) IS f.REAL64(x), f.REAL64(x), f.INT(x), f.REAL64(x), f.REAL64(x) :
    
    REAL64, REAL64, REAL64, INT, INT    FUNCTION f.REAL64.REAL64.REAL64.INT.INT   (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.REAL64(x), f.INT(x), f.INT(x) :
    
    
    REAL64, REAL64, REAL64, INT, REAL64 FUNCTION f.REAL64.REAL64.REAL64.INT.REAL64(VAL INT x) IS f.REAL64(x), f.REAL64(x), f.REAL64(x), f.INT(x), f.REAL64(x) :
    REAL64, REAL64, REAL64, REAL64, INT    FUNCTION f.REAL64.REAL64.REAL64.REAL64.INT   (VAL INT x) IS f.REAL64(x), f.REAL64(x), f.REAL64(x), f.REAL64(x), f.INT(x) :
    REAL64, REAL64, REAL64, REAL64, REAL64 FUNCTION f.REAL64.REAL64.REAL64.REAL64.REAL64(VAL INT x) IS f.REAL64(x), f.REAL64(x), f.REAL64(x), f.REAL64(x), f.REAL64(x) :
    --}}}
    --{{{  PROC multi.result.fns.0()
    PROC multi.result.fns.0()
      --{{{  variables
      BYTE BYTE.var, BYTE.var.2 :
      BOOL BOOL.var, BOOL.var.2 :
      INT INT.var, INT.var.2, INT.var.3, INT.var.4, INT.var.5 :
      INT16 INT16.var, INT16.var.2 :
      INT32 INT32.var, INT32.var.2 :
      INT64 INT64.var, INT64.var.2, INT64.var.3 :
      REAL32 REAL32.var, REAL32.var.2 :
      REAL64 REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4, REAL64.var.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      PROC local.check.BOOL(VAL BOOL x)
        check.BOOL(x, FALSE, "TWO-fn")
      :
      PROC local.check.REAL32(VAL REAL32 x)
        local.check(INT ROUND x)
      :
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          BYTE.var, BYTE.var.2 := BYTE 99, BYTE 99
          BOOL.var, BOOL.var.2 := TRUE, TRUE
          INT.var, INT.var.2, INT.var.3, INT.var.4 := 99, 99, 99, 99
          INT16.var, INT16.var.2 := 99(INT16), 99(INT16)
          INT32.var, INT32.var.2 := 99(INT32), 99(INT32)
          INT64.var, INT64.var.2, INT64.var.3 := 99(INT64), 99(INT64), 99(INT64)
          REAL32.var, REAL32.var.2 := 99.0(REAL32), 99.0(REAL32)
          REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
          INT.var.5, REAL64.var.5 := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()

        --{{{  doubles, variables as actual results
        BOOL.var,BOOL.var.2   := f.BOOL.BOOL   (x)
        local.check.BOOL(BOOL.var)
        local.check.BOOL(BOOL.var.2)
        clobber.vars()
        BOOL.var,BYTE.var   := f.BOOL.BYTE   (x)
        local.check.BOOL(BOOL.var)
        local.check(INT BYTE.var)
        clobber.vars()
        BOOL.var,INT.var    := f.BOOL.INT    (x)
        local.check.BOOL(BOOL.var)
        local.check(INT INT.var)
        clobber.vars()
        BOOL.var,INT16.var  := f.BOOL.INT16  (x)
        local.check.BOOL(BOOL.var)
        local.check(INT INT16.var)
        clobber.vars()
        BOOL.var,INT32.var  := f.BOOL.INT32  (x)
        local.check.BOOL(BOOL.var)
        local.check(INT INT32.var)
        clobber.vars()
        BOOL.var,INT64.var  := f.BOOL.INT64  (x)
        local.check.BOOL(BOOL.var)
        local.check(INT INT64.var)
        clobber.vars()
        BOOL.var,REAL32.var := f.BOOL.REAL32 (x)
        local.check.BOOL(BOOL.var)
        local.check.REAL32(REAL32.var)
        clobber.vars()
        BOOL.var,REAL64.var := f.BOOL.REAL64 (x)
        local.check.BOOL(BOOL.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        BYTE.var,BOOL.var   := f.BYTE.BOOL   (x)
        local.check(INT BYTE.var)
        local.check.BOOL(BOOL.var)
        clobber.vars()
        BYTE.var,BYTE.var.2   := f.BYTE.BYTE   (x)
        local.check(INT BYTE.var)
        local.check(INT BYTE.var.2)
        clobber.vars()
        BYTE.var,INT.var    := f.BYTE.INT    (x)
        local.check(INT BYTE.var)
        local.check(INT INT.var)
        clobber.vars()
        BYTE.var,INT16.var  := f.BYTE.INT16  (x)
        local.check(INT BYTE.var)
        local.check(INT INT16.var)
        clobber.vars()
        BYTE.var,INT32.var  := f.BYTE.INT32  (x)
        local.check(INT BYTE.var)
        local.check(INT INT32.var)
        clobber.vars()
        BYTE.var,INT64.var  := f.BYTE.INT64  (x)
        local.check(INT BYTE.var)
        local.check(INT INT64.var)
        clobber.vars()
        BYTE.var,REAL32.var := f.BYTE.REAL32 (x)
        local.check(INT BYTE.var)
        local.check.REAL32(REAL32.var)
        clobber.vars()
        BYTE.var,REAL64.var := f.BYTE.REAL64 (x)
        local.check(INT BYTE.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT.var,BOOL.var   := f.INT.BOOL   (x)
        local.check(INT INT.var)
        local.check.BOOL(BOOL.var)
        clobber.vars()
        INT.var,BYTE.var   := f.INT.BYTE   (x)
        local.check(INT INT.var)
        local.check(INT BYTE.var)
        clobber.vars()
        INT.var,INT.var.2    := f.INT.INT    (x)
        local.check(INT INT.var)
        local.check(INT INT.var.2)
        clobber.vars()
        INT.var,INT16.var  := f.INT.INT16  (x)
        local.check(INT INT.var)
        local.check(INT INT16.var)
        clobber.vars()
        INT.var,INT32.var  := f.INT.INT32  (x)
        local.check(INT INT.var)
        local.check(INT INT32.var)
        clobber.vars()
        INT.var,INT64.var  := f.INT.INT64  (x)
        local.check(INT INT.var)
        local.check(INT INT64.var)
        clobber.vars()
        INT.var,REAL32.var := f.INT.REAL32 (x)
        local.check(INT INT.var)
        local.check.REAL32(REAL32.var)
        clobber.vars()
        INT.var,REAL64.var := f.INT.REAL64 (x)
        local.check(INT INT.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT16.var,BOOL.var   := f.INT16.BOOL   (x)
        local.check(INT INT16.var)
        local.check.BOOL(BOOL.var)
        clobber.vars()
        INT16.var,BYTE.var   := f.INT16.BYTE   (x)
        local.check(INT INT16.var)
        local.check(INT BYTE.var)
        clobber.vars()
        INT16.var,INT.var    := f.INT16.INT    (x)
        local.check(INT INT16.var)
        local.check(INT INT.var)
        clobber.vars()
        INT16.var,INT16.var.2  := f.INT16.INT16  (x)
        local.check(INT INT16.var)
        local.check(INT INT16.var.2)
        clobber.vars()
        INT16.var,INT32.var  := f.INT16.INT32  (x)
        local.check(INT INT16.var)
        local.check(INT INT32.var)
        clobber.vars()
        INT16.var,INT64.var  := f.INT16.INT64  (x)
        local.check(INT INT16.var)
        local.check(INT INT64.var)
        clobber.vars()
        INT16.var,REAL32.var := f.INT16.REAL32 (x)
        local.check(INT INT16.var)
        local.check.REAL32(REAL32.var)
        clobber.vars()
        INT16.var,REAL64.var := f.INT16.REAL64 (x)
        local.check(INT INT16.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT32.var,BOOL.var   := f.INT32.BOOL   (x)
        local.check(INT INT32.var)
        local.check.BOOL(BOOL.var)
        clobber.vars()
        INT32.var,BYTE.var   := f.INT32.BYTE   (x)
        local.check(INT INT32.var)
        local.check(INT BYTE.var)
        clobber.vars()
        INT32.var,INT.var    := f.INT32.INT    (x)
        local.check(INT INT32.var)
        local.check(INT INT.var)
        clobber.vars()
        INT32.var,INT16.var  := f.INT32.INT16  (x)
        local.check(INT INT32.var)
        local.check(INT INT16.var)
        clobber.vars()
        INT32.var,INT32.var.2  := f.INT32.INT32  (x)
        local.check(INT INT32.var)
        local.check(INT INT32.var.2)
        clobber.vars()
        INT32.var,INT64.var  := f.INT32.INT64  (x)
        local.check(INT INT32.var)
        local.check(INT INT64.var)
        clobber.vars()
        INT32.var,REAL32.var := f.INT32.REAL32 (x)
        local.check(INT INT32.var)
        local.check.REAL32(REAL32.var)
        clobber.vars()
        INT32.var,REAL64.var := f.INT32.REAL64 (x)
        local.check(INT INT32.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT64.var,BOOL.var   := f.INT64.BOOL   (x)
        local.check(INT INT64.var)
        local.check.BOOL(BOOL.var)
        clobber.vars()
        INT64.var,BYTE.var   := f.INT64.BYTE   (x)
        local.check(INT INT64.var)
        local.check(INT BYTE.var)
        clobber.vars()
        INT64.var,INT.var    := f.INT64.INT    (x)
        local.check(INT INT64.var)
        local.check(INT INT.var)
        clobber.vars()
        INT64.var,INT16.var  := f.INT64.INT16  (x)
        local.check(INT INT64.var)
        local.check(INT INT16.var)
        clobber.vars()
        INT64.var,INT32.var  := f.INT64.INT32  (x)
        local.check(INT INT64.var)
        local.check(INT INT32.var)
        clobber.vars()
        INT64.var,INT64.var.2  := f.INT64.INT64  (x)
        local.check(INT INT64.var)
        local.check(INT INT64.var.2)
        clobber.vars()
        INT64.var,REAL32.var := f.INT64.REAL32 (x)
        local.check(INT INT64.var)
        local.check.REAL32(REAL32.var)
        clobber.vars()
        INT64.var,REAL64.var := f.INT64.REAL64 (x)
        local.check(INT INT64.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        REAL32.var,BOOL.var   := f.REAL32.BOOL   (x)
        local.check.REAL32(REAL32.var)
        local.check.BOOL(BOOL.var)
        clobber.vars()
        REAL32.var,BYTE.var   := f.REAL32.BYTE   (x)
        local.check.REAL32(REAL32.var)
        local.check(INT BYTE.var)
        clobber.vars()
        REAL32.var,INT.var    := f.REAL32.INT    (x)
        local.check.REAL32(REAL32.var)
        local.check(INT INT.var)
        clobber.vars()
        REAL32.var,INT16.var  := f.REAL32.INT16  (x)
        local.check.REAL32(REAL32.var)
        local.check(INT INT16.var)
        clobber.vars()
        REAL32.var,INT32.var  := f.REAL32.INT32  (x)
        local.check.REAL32(REAL32.var)
        local.check(INT INT32.var)
        clobber.vars()
        REAL32.var,INT64.var  := f.REAL32.INT64  (x)
        local.check.REAL32(REAL32.var)
        local.check(INT INT64.var)
        clobber.vars()
        REAL32.var,REAL32.var.2 := f.REAL32.REAL32 (x)
        local.check.REAL32(REAL32.var)
        local.check.REAL32(REAL32.var.2)
        clobber.vars()
        REAL32.var,REAL64.var := f.REAL32.REAL64 (x)
        local.check.REAL32(REAL32.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        REAL64.var,BOOL.var   := f.REAL64.BOOL   (x)
        local.check.REAL64(REAL64.var)
        local.check.BOOL(BOOL.var)
        clobber.vars()
        REAL64.var,BYTE.var   := f.REAL64.BYTE   (x)
        local.check.REAL64(REAL64.var)
        local.check(INT BYTE.var)
        clobber.vars()
        REAL64.var,INT.var    := f.REAL64.INT    (x)
        local.check.REAL64(REAL64.var)
        local.check(INT INT.var)
        clobber.vars()
        REAL64.var,INT16.var  := f.REAL64.INT16  (x)
        local.check.REAL64(REAL64.var)
        local.check(INT INT16.var)
        clobber.vars()
        REAL64.var,INT32.var  := f.REAL64.INT32  (x)
        local.check.REAL64(REAL64.var)
        local.check(INT INT32.var)
        clobber.vars()
        REAL64.var,INT64.var  := f.REAL64.INT64  (x)
        local.check.REAL64(REAL64.var)
        local.check(INT INT64.var)
        clobber.vars()
        REAL64.var,REAL32.var := f.REAL64.REAL32 (x)
        local.check.REAL64(REAL64.var)
        local.check.REAL32(REAL32.var)
        clobber.vars()
        REAL64.var,REAL64.var.2 := f.REAL64.REAL64 (x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        clobber.vars()

        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.1()
    PROC multi.result.fns.1()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      PROC local.check.BOOL(VAL BOOL x)
        check.BOOL(x, FALSE, "TWO-fn")
      :
      PROC local.check.REAL32(VAL REAL32 x)
        local.check(INT ROUND x)
      :
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  doubles, subscripted arrays as actual results
        clobber.vars()
        BOOL.arr[i],BOOL.arr.2[i2]   := f.BOOL.BOOL   (x)
        local.check.BOOL(BOOL.arr[j])
        local.check.BOOL(BOOL.arr.2[j])
        clobber.vars()
        BOOL.arr[i],BYTE.arr[i]   := f.BOOL.BYTE   (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        BOOL.arr[i],INT.arr[i]    := f.BOOL.INT    (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        BOOL.arr[i],INT16.arr[i]  := f.BOOL.INT16  (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        BOOL.arr[i],INT32.arr[i]  := f.BOOL.INT32  (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        BOOL.arr[i],INT64.arr[i]  := f.BOOL.INT64  (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        BOOL.arr[i],REAL32.arr[i] := f.BOOL.REAL32 (x)
        local.check.BOOL(BOOL.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        BOOL.arr[i],REAL64.arr[i] := f.BOOL.REAL64 (x)
        local.check.BOOL(BOOL.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        BYTE.arr[i],BOOL.arr[i]   := f.BYTE.BOOL   (x)
        local.check(INT BYTE.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        BYTE.arr[i],BYTE.arr.2[i2]   := f.BYTE.BYTE   (x)
        local.check(INT BYTE.arr[j])
        local.check(INT BYTE.arr.2[j])
        clobber.vars()
        BYTE.arr[i],INT.arr[i]    := f.BYTE.INT    (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        BYTE.arr[i],INT16.arr[i]  := f.BYTE.INT16  (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        BYTE.arr[i],INT32.arr[i]  := f.BYTE.INT32  (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        BYTE.arr[i],INT64.arr[i]  := f.BYTE.INT64  (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        BYTE.arr[i],REAL32.arr[i] := f.BYTE.REAL32 (x)
        local.check(INT BYTE.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        BYTE.arr[i],REAL64.arr[i] := f.BYTE.REAL64 (x)
        local.check(INT BYTE.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[i],BOOL.arr[i]   := f.INT.BOOL   (x)
        local.check(INT INT.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT.arr[i],BYTE.arr[i]   := f.INT.BYTE   (x)
        local.check(INT INT.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT.arr[i],INT.arr.2[i2]    := f.INT.INT    (x)
        local.check(INT INT.arr[j])
        local.check(INT INT.arr.2[j])
        clobber.vars()
        INT.arr[i],INT16.arr[i]  := f.INT.INT16  (x)
        local.check(INT INT.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        INT.arr[i],INT32.arr[i]  := f.INT.INT32  (x)
        local.check(INT INT.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        INT.arr[i],INT64.arr[i]  := f.INT.INT64  (x)
        local.check(INT INT.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT.arr[i],REAL32.arr[i] := f.INT.REAL32 (x)
        local.check(INT INT.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT.arr[i],REAL64.arr[i] := f.INT.REAL64 (x)
        local.check(INT INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT16.arr[i],BOOL.arr[i]   := f.INT16.BOOL   (x)
        local.check(INT INT16.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT16.arr[i],BYTE.arr[i]   := f.INT16.BYTE   (x)
        local.check(INT INT16.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT16.arr[i],INT.arr[i]    := f.INT16.INT    (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        INT16.arr[i],INT16.arr.2[i2]  := f.INT16.INT16  (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT16.arr.2[j])
        clobber.vars()
        INT16.arr[i],INT32.arr[i]  := f.INT16.INT32  (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        INT16.arr[i],INT64.arr[i]  := f.INT16.INT64  (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT16.arr[i],REAL32.arr[i] := f.INT16.REAL32 (x)
        local.check(INT INT16.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT16.arr[i],REAL64.arr[i] := f.INT16.REAL64 (x)
        local.check(INT INT16.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT32.arr[i],BOOL.arr[i]   := f.INT32.BOOL   (x)
        local.check(INT INT32.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT32.arr[i],BYTE.arr[i]   := f.INT32.BYTE   (x)
        local.check(INT INT32.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT32.arr[i],INT.arr[i]    := f.INT32.INT    (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        INT32.arr[i],INT16.arr[i]  := f.INT32.INT16  (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        INT32.arr[i],INT32.arr.2[i2]  := f.INT32.INT32  (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT32.arr.2[j])
        clobber.vars()
        INT32.arr[i],INT64.arr[i]  := f.INT32.INT64  (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT32.arr[i],REAL32.arr[i] := f.INT32.REAL32 (x)
        local.check(INT INT32.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT32.arr[i],REAL64.arr[i] := f.INT32.REAL64 (x)
        local.check(INT INT32.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT64.arr[i],BOOL.arr[i]   := f.INT64.BOOL   (x)
        local.check(INT INT64.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT64.arr[i],BYTE.arr[i]   := f.INT64.BYTE   (x)
        local.check(INT INT64.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT64.arr[i],INT.arr[i]    := f.INT64.INT    (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        INT64.arr[i],INT16.arr[i]  := f.INT64.INT16  (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        INT64.arr[i],INT32.arr[i]  := f.INT64.INT32  (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        INT64.arr[i],INT64.arr.2[i2]  := f.INT64.INT64  (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        clobber.vars()
        INT64.arr[i],REAL32.arr[i] := f.INT64.REAL32 (x)
        local.check(INT INT64.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT64.arr[i],REAL64.arr[i] := f.INT64.REAL64 (x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        REAL32.arr[i],BOOL.arr[i]   := f.REAL32.BOOL   (x)
        local.check.REAL32(REAL32.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        REAL32.arr[i],BYTE.arr[i]   := f.REAL32.BYTE   (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        REAL32.arr[i],INT.arr[i]    := f.REAL32.INT    (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        REAL32.arr[i],INT16.arr[i]  := f.REAL32.INT16  (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        REAL32.arr[i],INT32.arr[i]  := f.REAL32.INT32  (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        REAL32.arr[i],INT64.arr[i]  := f.REAL32.INT64  (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL32.arr[i],REAL32.arr.2[i2] := f.REAL32.REAL32 (x)
        local.check.REAL32(REAL32.arr[j])
        local.check.REAL32(REAL32.arr.2[j])
        clobber.vars()
        REAL32.arr[i],REAL64.arr[i] := f.REAL32.REAL64 (x)
        local.check.REAL32(REAL32.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        REAL64.arr[i],BOOL.arr[i]   := f.REAL64.BOOL   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        REAL64.arr[i],BYTE.arr[i]   := f.REAL64.BYTE   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        REAL64.arr[i],INT.arr[i]    := f.REAL64.INT    (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        REAL64.arr[i],INT16.arr[i]  := f.REAL64.INT16  (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        REAL64.arr[i],INT32.arr[i]  := f.REAL64.INT32  (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        REAL64.arr[i],INT64.arr[i]  := f.REAL64.INT64  (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL64.arr[i],REAL32.arr[i] := f.REAL64.REAL32 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        REAL64.arr[i],REAL64.arr.2[i2] := f.REAL64.REAL64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.2()
    PROC multi.result.fns.2()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      PROC local.check.BOOL(VAL BOOL x)
        check.BOOL(x, FALSE, "TWO-fn")
      :
      PROC local.check.REAL32(VAL REAL32 x)
        local.check(INT ROUND x)
      :
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  doubles, subscripted arrays with fn calls
        BOOL.arr[id(i)],BOOL.arr.2[id(i2)]   := f.BOOL.BOOL   (x)
        local.check.BOOL(BOOL.arr[j])
        local.check.BOOL(BOOL.arr.2[j])
        clobber.vars()
        BOOL.arr[id(i)],BYTE.arr[id(i)]   := f.BOOL.BYTE   (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        BOOL.arr[id(i)],INT.arr[id(i)]    := f.BOOL.INT    (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        BOOL.arr[id(i)],INT16.arr[id(i)]  := f.BOOL.INT16  (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        BOOL.arr[id(i)],INT32.arr[id(i)]  := f.BOOL.INT32  (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        BOOL.arr[id(i)],INT64.arr[id(i)]  := f.BOOL.INT64  (x)
        local.check.BOOL(BOOL.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        BOOL.arr[id(i)],REAL32.arr[id(i)] := f.BOOL.REAL32 (x)
        local.check.BOOL(BOOL.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        BOOL.arr[id(i)],REAL64.arr[id(i)] := f.BOOL.REAL64 (x)
        local.check.BOOL(BOOL.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        BYTE.arr[id(i)],BOOL.arr[id(i)]   := f.BYTE.BOOL   (x)
        local.check(INT BYTE.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        BYTE.arr[id(i)],BYTE.arr.2[id(i2)]   := f.BYTE.BYTE   (x)
        local.check(INT BYTE.arr[j])
        local.check(INT BYTE.arr.2[j])
        clobber.vars()
        BYTE.arr[id(i)],INT.arr[id(i)]    := f.BYTE.INT    (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        BYTE.arr[id(i)],INT16.arr[id(i)]  := f.BYTE.INT16  (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        BYTE.arr[id(i)],INT32.arr[id(i)]  := f.BYTE.INT32  (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        BYTE.arr[id(i)],INT64.arr[id(i)]  := f.BYTE.INT64  (x)
        local.check(INT BYTE.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        BYTE.arr[id(i)],REAL32.arr[id(i)] := f.BYTE.REAL32 (x)
        local.check(INT BYTE.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        BYTE.arr[id(i)],REAL64.arr[id(i)] := f.BYTE.REAL64 (x)
        local.check(INT BYTE.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[id(i)],BOOL.arr[id(i)]   := f.INT.BOOL   (x)
        local.check(INT INT.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT.arr[id(i)],BYTE.arr[id(i)]   := f.INT.BYTE   (x)
        local.check(INT INT.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT.arr[id(i)],INT.arr.2[id(i2)]    := f.INT.INT    (x)
        local.check(INT INT.arr[j])
        local.check(INT INT.arr.2[j])
        clobber.vars()
        INT.arr[id(i)],INT16.arr[id(i)]  := f.INT.INT16  (x)
        local.check(INT INT.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        INT.arr[id(i)],INT32.arr[id(i)]  := f.INT.INT32  (x)
        local.check(INT INT.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        INT.arr[id(i)],INT64.arr[id(i)]  := f.INT.INT64  (x)
        local.check(INT INT.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT.arr[id(i)],REAL32.arr[id(i)] := f.INT.REAL32 (x)
        local.check(INT INT.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT.arr[id(i)],REAL64.arr[id(i)] := f.INT.REAL64 (x)
        local.check(INT INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT16.arr[id(i)],BOOL.arr[id(i)]   := f.INT16.BOOL   (x)
        local.check(INT INT16.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT16.arr[id(i)],BYTE.arr[id(i)]   := f.INT16.BYTE   (x)
        local.check(INT INT16.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT16.arr[id(i)],INT.arr[id(i)]    := f.INT16.INT    (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        INT16.arr[id(i)],INT16.arr.2[id(i2)]  := f.INT16.INT16  (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT16.arr.2[j])
        clobber.vars()
        INT16.arr[id(i)],INT32.arr[id(i)]  := f.INT16.INT32  (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        INT16.arr[id(i)],INT64.arr[id(i)]  := f.INT16.INT64  (x)
        local.check(INT INT16.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT16.arr[id(i)],REAL32.arr[id(i)] := f.INT16.REAL32 (x)
        local.check(INT INT16.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT16.arr[id(i)],REAL64.arr[id(i)] := f.INT16.REAL64 (x)
        local.check(INT INT16.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT32.arr[id(i)],BOOL.arr[id(i)]   := f.INT32.BOOL   (x)
        local.check(INT INT32.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT32.arr[id(i)],BYTE.arr[id(i)]   := f.INT32.BYTE   (x)
        local.check(INT INT32.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT32.arr[id(i)],INT.arr[id(i)]    := f.INT32.INT    (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        INT32.arr[id(i)],INT16.arr[id(i)]  := f.INT32.INT16  (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        INT32.arr[id(i)],INT32.arr.2[id(i2)]  := f.INT32.INT32  (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT32.arr.2[j])
        clobber.vars()
        INT32.arr[id(i)],INT64.arr[id(i)]  := f.INT32.INT64  (x)
        local.check(INT INT32.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT32.arr[id(i)],REAL32.arr[id(i)] := f.INT32.REAL32 (x)
        local.check(INT INT32.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT32.arr[id(i)],REAL64.arr[id(i)] := f.INT32.REAL64 (x)
        local.check(INT INT32.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT64.arr[id(i)],BOOL.arr[id(i)]   := f.INT64.BOOL   (x)
        local.check(INT INT64.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        INT64.arr[id(i)],BYTE.arr[id(i)]   := f.INT64.BYTE   (x)
        local.check(INT INT64.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        INT64.arr[id(i)],INT.arr[id(i)]    := f.INT64.INT    (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        INT64.arr[id(i)],INT16.arr[id(i)]  := f.INT64.INT16  (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        INT64.arr[id(i)],INT32.arr[id(i)]  := f.INT64.INT32  (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        INT64.arr[id(i)],INT64.arr.2[id(i2)]  := f.INT64.INT64  (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        clobber.vars()
        INT64.arr[id(i)],REAL32.arr[id(i)] := f.INT64.REAL32 (x)
        local.check(INT INT64.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        INT64.arr[id(i)],REAL64.arr[id(i)] := f.INT64.REAL64 (x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        REAL32.arr[id(i)],BOOL.arr[id(i)]   := f.REAL32.BOOL   (x)
        local.check.REAL32(REAL32.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        REAL32.arr[id(i)],BYTE.arr[id(i)]   := f.REAL32.BYTE   (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        REAL32.arr[id(i)],INT.arr[id(i)]    := f.REAL32.INT    (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        REAL32.arr[id(i)],INT16.arr[id(i)]  := f.REAL32.INT16  (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        REAL32.arr[id(i)],INT32.arr[id(i)]  := f.REAL32.INT32  (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        REAL32.arr[id(i)],INT64.arr[id(i)]  := f.REAL32.INT64  (x)
        local.check.REAL32(REAL32.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL32.arr[id(i)],REAL32.arr.2[id(i2)] := f.REAL32.REAL32 (x)
        local.check.REAL32(REAL32.arr[j])
        local.check.REAL32(REAL32.arr.2[j])
        clobber.vars()
        REAL32.arr[id(i)],REAL64.arr[id(i)] := f.REAL32.REAL64 (x)
        local.check.REAL32(REAL32.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],BOOL.arr[id(i)]   := f.REAL64.BOOL   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.BOOL(BOOL.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],BYTE.arr[id(i)]   := f.REAL64.BYTE   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT BYTE.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],INT.arr[id(i)]    := f.REAL64.INT    (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],INT16.arr[id(i)]  := f.REAL64.INT16  (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT16.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],INT32.arr[id(i)]  := f.REAL64.INT32  (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT32.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],INT64.arr[id(i)]  := f.REAL64.INT64  (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],REAL32.arr[id(i)] := f.REAL64.REAL32 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL32(REAL32.arr[j])
        clobber.vars()
        REAL64.arr[id(i)],REAL64.arr.2[id(i2)] := f.REAL64.REAL64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.3()
    PROC multi.result.fns.3()
      --{{{  variables
      BYTE BYTE.var, BYTE.var.2 :
      BOOL BOOL.var, BOOL.var.2 :
      INT INT.var, INT.var.2, INT.var.3, INT.var.4, INT.var.5 :
      INT16 INT16.var, INT16.var.2 :
      INT32 INT32.var, INT32.var.2 :
      INT64 INT64.var, INT64.var.2, INT64.var.3 :
      REAL32 REAL32.var, REAL32.var.2 :
      REAL64 REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4, REAL64.var.5 :
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      --PROC local.check.REAL64(VAL REAL64 x)
      --  local.check(INT ROUND x)
      --:
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          BYTE.var, BYTE.var.2 := BYTE 99, BYTE 99
          BOOL.var, BOOL.var.2 := TRUE, TRUE
          INT.var, INT.var.2, INT.var.3, INT.var.4 := 99, 99, 99, 99
          INT16.var, INT16.var.2 := 99(INT16), 99(INT16)
          INT32.var, INT32.var.2 := 99(INT32), 99(INT32)
          INT64.var, INT64.var.2, INT64.var.3 := 99(INT64), 99(INT64), 99(INT64)
          REAL32.var, REAL32.var.2 := 99.0(REAL32), 99.0(REAL32)
          REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
          INT.var.5, REAL64.var.5 := 99, 99.0(REAL64)
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  doubles, combinations of two INT results
        INT.var, INT.var.2 := f.INT.INT(x)
        local.check(INT.var)
        local.check(INT.var.2)
        clobber.vars()
        INT.var, INT.arr[i] := f.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        clobber.vars()
        INT.var, INT.arr[id(i)] := f.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        clobber.vars()
        
        INT.arr[i], INT.var := f.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        clobber.vars()
        INT.arr[i], INT.arr.2[i2] := f.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[id(i2)] := f.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        clobber.vars()
        
        INT.arr[id(i)], INT.var := f.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[i2] := f.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)] := f.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.4()
    PROC multi.result.fns.4()
      --{{{  variables
      BYTE BYTE.var, BYTE.var.2 :
      BOOL BOOL.var, BOOL.var.2 :
      INT INT.var, INT.var.2, INT.var.3, INT.var.4, INT.var.5 :
      INT16 INT16.var, INT16.var.2 :
      INT32 INT32.var, INT32.var.2 :
      INT64 INT64.var, INT64.var.2, INT64.var.3 :
      REAL32 REAL32.var, REAL32.var.2 :
      REAL64 REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4, REAL64.var.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          BYTE.var, BYTE.var.2 := BYTE 99, BYTE 99
          BOOL.var, BOOL.var.2 := TRUE, TRUE
          INT.var, INT.var.2, INT.var.3, INT.var.4 := 99, 99, 99, 99
          INT16.var, INT16.var.2 := 99(INT16), 99(INT16)
          INT32.var, INT32.var.2 := 99(INT32), 99(INT32)
          INT64.var, INT64.var.2, INT64.var.3 := 99(INT64), 99(INT64), 99(INT64)
          REAL32.var, REAL32.var.2 := 99.0(REAL32), 99.0(REAL32)
          REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
          INT.var.5, REAL64.var.5 := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  trebles, variables as actual results
        clobber.vars()
        INT.var, INT.var.2, INT.var.3    := f.INT.INT.INT   (x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        clobber.vars()
        INT.var, INT.var.2, INT64.var  := f.INT.INT.INT64 (x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT INT64.var)
        clobber.vars()
        INT.var, INT.var.2, REAL64.var := f.INT.INT.REAL64(x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT.var, INT64.var, INT.var.3    := f.INT.INT64.INT   (x)
        local.check(INT.var)
        local.check(INT INT64.var)
        local.check(INT.var.3)
        clobber.vars()
        INT.var, INT64.var, INT64.var.3  := f.INT.INT64.INT64 (x)
        local.check(INT.var)
        local.check(INT INT64.var)
        local.check(INT INT64.var.3)
        clobber.vars()
        INT.var, INT64.var, REAL64.var := f.INT.INT64.REAL64(x)
        local.check(INT.var)
        local.check(INT INT64.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT.var, REAL64.var, INT.var.3    := f.INT.REAL64.INT   (x)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.3)
        clobber.vars()
        INT.var, REAL64.var, INT64.var  := f.INT.REAL64.INT64 (x)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT INT64.var)
        clobber.vars()
        INT.var, REAL64.var, REAL64.var.3 := f.INT.REAL64.REAL64(x)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        clobber.vars()
        
        INT64.var, INT.var, INT.var.3    := f.INT64.INT.INT   (x)
        local.check(INT INT64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        clobber.vars()
        INT64.var, INT.var, INT64.var.3  := f.INT64.INT.INT64 (x)
        local.check(INT INT64.var)
        local.check(INT.var)
        local.check(INT INT64.var.3)
        clobber.vars()
        INT64.var, INT.var, REAL64.var := f.INT64.INT.REAL64(x)
        local.check(INT INT64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT64.var, INT64.var.2, INT.var    := f.INT64.INT64.INT   (x)
        local.check(INT INT64.var)
        local.check(INT INT64.var.2)
        local.check(INT.var)
        clobber.vars()
        INT64.var, INT64.var.2, INT64.var.3  := f.INT64.INT64.INT64 (x)
        local.check(INT INT64.var)
        local.check(INT INT64.var.2)
        local.check(INT INT64.var.3)
        clobber.vars()
        INT64.var, INT64.var.2, REAL64.var := f.INT64.INT64.REAL64(x)
        local.check(INT INT64.var)
        local.check(INT INT64.var.2)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT64.var, REAL64.var, INT.var    := f.INT64.REAL64.INT   (x)
        local.check(INT INT64.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        clobber.vars()
        INT64.var, REAL64.var, INT64.var.3  := f.INT64.REAL64.INT64 (x)
        local.check(INT INT64.var)
        local.check.REAL64(REAL64.var)
        local.check(INT INT64.var.3)
        clobber.vars()
        INT64.var, REAL64.var, REAL64.var.3 := f.INT64.REAL64.REAL64(x)
        local.check(INT INT64.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        clobber.vars()
        
        REAL64.var, INT.var, INT.var.3    := f.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        clobber.vars()
        REAL64.var, INT.var, INT64.var  := f.REAL64.INT.INT64 (x)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT INT64.var)
        clobber.vars()
        REAL64.var, INT.var, REAL64.var.3 := f.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.3)
        clobber.vars()
        REAL64.var, INT64.var, INT.var    := f.REAL64.INT64.INT   (x)
        local.check.REAL64(REAL64.var)
        local.check(INT INT64.var)
        local.check(INT.var)
        clobber.vars()
        REAL64.var, INT64.var, INT64.var.3  := f.REAL64.INT64.INT64 (x)
        local.check.REAL64(REAL64.var)
        local.check(INT INT64.var)
        local.check(INT INT64.var.3)
        clobber.vars()
        REAL64.var, INT64.var, REAL64.var.3 := f.REAL64.INT64.REAL64(x)
        local.check.REAL64(REAL64.var)
        local.check(INT INT64.var)
        local.check.REAL64(REAL64.var.3)
        clobber.vars()
        REAL64.var, REAL64.var.2, INT.var    := f.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT.var)
        clobber.vars()
        REAL64.var, REAL64.var.2, INT64.var  := f.REAL64.REAL64.INT64 (x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT INT64.var)
        clobber.vars()
        REAL64.var, REAL64.var.2, REAL64.var.3 := f.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check.REAL64(REAL64.var.3)
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.5()
    PROC multi.result.fns.5()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  trebles, subscripted arrays as actual results
        INT.arr[i], INT.arr.2[i2], INT.arr.3[i3]    := f.INT.INT.INT   (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], INT64.arr[i]  := f.INT.INT.INT64 (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], REAL64.arr[i] := f.INT.INT.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[i], INT64.arr[i], INT.arr.3[i3]    := f.INT.INT64.INT   (x)
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[i], INT64.arr[i], INT64.arr.3[i3]  := f.INT.INT64.INT64 (x)
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT.arr[i], INT64.arr[i], REAL64.arr[i] := f.INT.INT64.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[i], REAL64.arr[i], INT.arr.3[i3]    := f.INT.REAL64.INT   (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[i], REAL64.arr[i], INT64.arr[i]  := f.INT.REAL64.INT64 (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT.arr[i], REAL64.arr[i], REAL64.arr.3[i3] := f.INT.REAL64.REAL64(x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        
        INT64.arr[i], INT.arr[i], INT.arr.3[i3]    := f.INT64.INT.INT   (x)
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT64.arr[i], INT.arr[i], INT64.arr.3[i3]  := f.INT64.INT.INT64 (x)
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT64.arr[i], INT.arr[i], REAL64.arr[i] := f.INT64.INT.REAL64(x)
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT64.arr[i], INT64.arr.2[i2], INT.arr[i]    := f.INT64.INT64.INT   (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        local.check(INT.arr[j])
        clobber.vars()
        INT64.arr[i], INT64.arr.2[i2], INT64.arr.3[i3]  := f.INT64.INT64.INT64 (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT64.arr[i], INT64.arr.2[i2], REAL64.arr[i] := f.INT64.INT64.REAL64(x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT64.arr[i], REAL64.arr[i], INT.arr[i]    := f.INT64.REAL64.INT   (x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        clobber.vars()
        INT64.arr[i], REAL64.arr[i], INT64.arr.3[i3]  := f.INT64.REAL64.INT64 (x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT64.arr[i], REAL64.arr[i], REAL64.arr.3[i3] := f.INT64.REAL64.REAL64(x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        
        REAL64.arr[i], INT.arr[i], INT.arr.3[i3]    := f.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        REAL64.arr[i], INT.arr[i], INT64.arr[i]  := f.REAL64.INT.INT64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL64.arr[i], INT.arr[i], REAL64.arr.3[i3] := f.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        REAL64.arr[i], INT64.arr[i], INT.arr[i]    := f.REAL64.INT64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr[i], INT64.arr[i], INT64.arr.3[i3]  := f.REAL64.INT64.INT64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        REAL64.arr[i], INT64.arr[i], REAL64.arr.3[i3] := f.REAL64.INT64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        REAL64.arr[i], REAL64.arr.2[i2], INT.arr[i]    := f.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr[i], REAL64.arr.2[i2], INT64.arr[i]  := f.REAL64.REAL64.INT64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL64.arr[i], REAL64.arr.2[i2], REAL64.arr.3[i3] := f.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.6()
    PROC multi.result.fns.6()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  trebles, subscripted arrays with fn calls
        INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)]    := f.INT.INT.INT   (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], INT64.arr[id(i)]  := f.INT.INT.INT64 (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], REAL64.arr[id(i)] := f.INT.INT.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[id(i)], INT64.arr[id(i)], INT.arr.3[id(i3)]    := f.INT.INT64.INT   (x)
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], INT64.arr[id(i)], INT64.arr.3[id(i3)]  := f.INT.INT64.INT64 (x)
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], INT64.arr[id(i)], REAL64.arr[id(i)] := f.INT.INT64.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[id(i)], REAL64.arr[id(i)], INT.arr.3[id(i3)]    := f.INT.REAL64.INT   (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], REAL64.arr[id(i)], INT64.arr[id(i)]  := f.INT.REAL64.INT64 (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        INT.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)] := f.INT.REAL64.REAL64(x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        
        INT64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)]    := f.INT64.INT.INT   (x)
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT64.arr[id(i)], INT.arr[id(i)], INT64.arr.3[id(i3)]  := f.INT64.INT.INT64 (x)
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT64.arr[id(i)], INT.arr[id(i)], REAL64.arr[id(i)] := f.INT64.INT.REAL64(x)
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT64.arr[id(i)], INT64.arr.2[id(i2)], INT.arr[id(i)]    := f.INT64.INT64.INT   (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        local.check(INT.arr[j])
        clobber.vars()
        INT64.arr[id(i)], INT64.arr.2[id(i2)], INT64.arr.3[id(i3)]  := f.INT64.INT64.INT64 (x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT64.arr[id(i)], INT64.arr.2[id(i2)], REAL64.arr[id(i)] := f.INT64.INT64.REAL64(x)
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT64.arr[id(i)], REAL64.arr[id(i)], INT.arr[id(i)]    := f.INT64.REAL64.INT   (x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        clobber.vars()
        INT64.arr[id(i)], REAL64.arr[id(i)], INT64.arr.3[id(i3)]  := f.INT64.REAL64.INT64 (x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        INT64.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)] := f.INT64.REAL64.REAL64(x)
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        
        REAL64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)]    := f.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        REAL64.arr[id(i)], INT.arr[id(i)], INT64.arr[id(i)]  := f.REAL64.INT.INT64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL64.arr[id(i)], INT.arr[id(i)], REAL64.arr.3[id(i3)] := f.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        REAL64.arr[id(i)], INT64.arr[id(i)], INT.arr[id(i)]    := f.REAL64.INT64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr[id(i)], INT64.arr[id(i)], INT64.arr.3[id(i3)]  := f.REAL64.INT64.INT64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        local.check(INT INT64.arr.3[j])
        clobber.vars()
        REAL64.arr[id(i)], INT64.arr[id(i)], REAL64.arr.3[id(i3)] := f.REAL64.INT64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT INT64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT.arr[id(i)]    := f.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT64.arr[id(i)]  := f.REAL64.REAL64.INT64 (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT INT64.arr[j])
        clobber.vars()
        REAL64.arr[id(i)], REAL64.arr.2[id(i2)], REAL64.arr.3[id(i3)] := f.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.7()
    PROC multi.result.fns.7()
      --{{{  variables
      BYTE BYTE.var, BYTE.var.2 :
      BOOL BOOL.var, BOOL.var.2 :
      INT INT.var, INT.var.2, INT.var.3, INT.var.4, INT.var.5 :
      INT16 INT16.var, INT16.var.2 :
      INT32 INT32.var, INT32.var.2 :
      INT64 INT64.var, INT64.var.2, INT64.var.3 :
      REAL32 REAL32.var, REAL32.var.2 :
      REAL64 REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4, REAL64.var.5 :
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      --PROC local.check.REAL64(VAL REAL64 x)
      --  local.check(INT ROUND x)
      --:
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          BYTE.var, BYTE.var.2 := BYTE 99, BYTE 99
          BOOL.var, BOOL.var.2 := TRUE, TRUE
          INT.var, INT.var.2, INT.var.3, INT.var.4 := 99, 99, 99, 99
          INT16.var, INT16.var.2 := 99(INT16), 99(INT16)
          INT32.var, INT32.var.2 := 99(INT32), 99(INT32)
          INT64.var, INT64.var.2, INT64.var.3 := 99(INT64), 99(INT64), 99(INT64)
          REAL32.var, REAL32.var.2 := 99.0(REAL32), 99.0(REAL32)
          REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
          INT.var.5, REAL64.var.5 := 99, 99.0(REAL64)
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  trebles, combinations of three INT results
        INT.var, INT.var.2, INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        clobber.vars()
        INT.var, INT.arr[i], INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        local.check(INT.var.3)
        clobber.vars()
        INT.var, INT.arr[id(i)], INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        local.check(INT.var.3)
        clobber.vars()
        
        INT.arr[i], INT.var, INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        local.check(INT.var.3)
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.var.3)
        clobber.vars()
        INT.arr[i], INT.arr.2[id(i2)], INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.var.3)
        clobber.vars()
        
        INT.arr[id(i)], INT.var, INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        local.check(INT.var.3)
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[i2], INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.var.3)
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], INT.var.3 := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.var.3)
        clobber.vars()
        
        INT.var, INT.var.2, INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.var, INT.arr[i], INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.var, INT.arr[id(i)], INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        
        INT.arr[i], INT.var, INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[id(i2)], INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        
        INT.arr[id(i)], INT.var, INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[i2], INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[i3] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        
        INT.var, INT.var.2, INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.var, INT.arr[i], INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.var, INT.arr[id(i)], INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.var)
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        
        INT.arr[i], INT.var, INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[id(i2)], INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        
        INT.arr[id(i)], INT.var, INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.arr[i])
        local.check(INT.var)
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[i2], INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)] := f.INT.INT.INT(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.8()
    PROC multi.result.fns.8()
      --{{{  variables
      BYTE BYTE.var, BYTE.var.2 :
      BOOL BOOL.var, BOOL.var.2 :
      INT INT.var, INT.var.2, INT.var.3, INT.var.4, INT.var.5 :
      INT16 INT16.var, INT16.var.2 :
      INT32 INT32.var, INT32.var.2 :
      INT64 INT64.var, INT64.var.2, INT64.var.3 :
      REAL32 REAL32.var, REAL32.var.2 :
      REAL64 REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4, REAL64.var.5 :
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          BYTE.var, BYTE.var.2 := BYTE 99, BYTE 99
          BOOL.var, BOOL.var.2 := TRUE, TRUE
          INT.var, INT.var.2, INT.var.3, INT.var.4 := 99, 99, 99, 99
          INT16.var, INT16.var.2 := 99(INT16), 99(INT16)
          INT32.var, INT32.var.2 := 99(INT32), 99(INT32)
          INT64.var, INT64.var.2, INT64.var.3 := 99(INT64), 99(INT64), 99(INT64)
          REAL32.var, REAL32.var.2 := 99.0(REAL32), 99.0(REAL32)
          REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
          INT.var.5, REAL64.var.5 := 99, 99.0(REAL64)
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  quads,   variables as actual results
        INT.var, INT.var.2, INT.var.3, INT.var.4    := f.INT.INT.INT.INT   (x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var, INT.var.2, INT.var.3, REAL64.var := f.INT.INT.INT.REAL64(x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT.var, INT.var.2, REAL64.var, INT.var.4    := f.INT.INT.REAL64.INT   (x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.4)
        clobber.vars()
        INT.var, INT.var.2, REAL64.var, REAL64.var.4 := f.INT.INT.REAL64.REAL64(x)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        INT.var, REAL64.var, INT.var.3, INT.var.4    := f.INT.REAL64.INT.INT   (x)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var, REAL64.var, INT.var.3, REAL64.var.4 := f.INT.REAL64.INT.REAL64(x)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        INT.var, REAL64.var, REAL64.var.3, INT.var.4    := f.INT.REAL64.REAL64.INT   (x)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var, REAL64.var, REAL64.var.3, REAL64.var.4 := f.INT.REAL64.REAL64.REAL64(x)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        REAL64.var, INT.var, INT.var.3, INT.var.4    := f.REAL64.INT.INT.INT   (x)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var, INT.var, INT.var.3, REAL64.var.4 := f.REAL64.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        REAL64.var, INT.var, REAL64.var.3, INT.var.4    := f.REAL64.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var, INT.var, REAL64.var.3, REAL64.var.4 := f.REAL64.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        REAL64.var, REAL64.var.2, INT.var, INT.var.4    := f.REAL64.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT.var)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var, REAL64.var.2, INT.var, REAL64.var.4 := f.REAL64.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        REAL64.var, REAL64.var.2, REAL64.var.3, INT.var    := f.REAL64.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var)
        clobber.vars()
        REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := f.REAL64.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.9()
    PROC multi.result.fns.9()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  quads,   subscripted arrays as actual results
        INT.arr[i], INT.arr.2[i2], INT.arr.3[i3], INT.arr.4[i4]    := f.INT.INT.INT.INT   (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], INT.arr.3[i3], REAL64.arr[i] := f.INT.INT.INT.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], REAL64.arr[i], INT.arr.4[i4]    := f.INT.INT.REAL64.INT   (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[i], INT.arr.2[i2], REAL64.arr[i], REAL64.arr.4[i4] := f.INT.INT.REAL64.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr[i], REAL64.arr[i], INT.arr.3[i3], INT.arr.4[i4]    := f.INT.REAL64.INT.INT   (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[i], REAL64.arr[i], INT.arr.3[i3], REAL64.arr.4[i4] := f.INT.REAL64.INT.REAL64(x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr[i], REAL64.arr[i], REAL64.arr.3[i3], INT.arr.4[i4]    := f.INT.REAL64.REAL64.INT   (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[i], REAL64.arr[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.INT.REAL64.REAL64.REAL64(x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr[i], INT.arr[i], INT.arr.3[i3], INT.arr.4[i4]    := f.REAL64.INT.INT.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr[i], INT.arr[i], INT.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr[i], INT.arr[i], REAL64.arr.3[i3], INT.arr.4[i4]    := f.REAL64.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr[i], INT.arr[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr[i], REAL64.arr.2[i2], INT.arr[i], INT.arr.4[i4]    := f.REAL64.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr[i], REAL64.arr.2[i2], INT.arr[i], REAL64.arr.4[i4] := f.REAL64.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr[i], REAL64.arr.2[i2], REAL64.arr.3[i3], INT.arr[i]    := f.REAL64.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr[i], REAL64.arr.2[i2], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.10()
    PROC multi.result.fns.10()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  quads,   subscripted arrays with fn calls
        INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.INT.INT.INT   (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)], REAL64.arr[id(i)] := f.INT.INT.INT.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], REAL64.arr[id(i)], INT.arr.4[id(i4)]    := f.INT.INT.REAL64.INT   (x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[id(i)], INT.arr.2[id(i2)], REAL64.arr[id(i)], REAL64.arr.4[id(i4)] := f.INT.INT.REAL64.REAL64(x)
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr[id(i)], REAL64.arr[id(i)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.REAL64.INT.INT   (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[id(i)], REAL64.arr[id(i)], INT.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.INT.REAL64.INT.REAL64(x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.REAL64.REAL64.INT   (x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.INT.REAL64.REAL64.REAL64(x)
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.REAL64.INT.INT.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr[id(i)], INT.arr[id(i)], REAL64.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.REAL64.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr[id(i)], INT.arr[id(i)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT.arr[id(i)], INT.arr.4[id(i4)]    := f.REAL64.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT.arr[id(i)], REAL64.arr.4[id(i4)] := f.REAL64.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr[id(i)], REAL64.arr.2[id(i2)], REAL64.arr.3[id(i3)], INT.arr[id(i)]    := f.REAL64.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr[id(i)], REAL64.arr.2[id(i2)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.11()
    PROC multi.result.fns.11()
      --{{{  variables
      BYTE BYTE.var, BYTE.var.2 :
      BOOL BOOL.var, BOOL.var.2 :
      INT INT.var, INT.var.2, INT.var.3, INT.var.4, INT.var.5 :
      INT16 INT16.var, INT16.var.2 :
      INT32 INT32.var, INT32.var.2 :
      INT64 INT64.var, INT64.var.2, INT64.var.3 :
      REAL32 REAL32.var, REAL32.var.2 :
      REAL64 REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4, REAL64.var.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          BYTE.var, BYTE.var.2 := BYTE 99, BYTE 99
          BOOL.var, BOOL.var.2 := TRUE, TRUE
          INT.var, INT.var.2, INT.var.3, INT.var.4 := 99, 99, 99, 99
          INT16.var, INT16.var.2 := 99(INT16), 99(INT16)
          INT32.var, INT32.var.2 := 99(INT32), 99(INT32)
          INT64.var, INT64.var.2, INT64.var.3 := 99(INT64), 99(INT64), 99(INT64)
          REAL32.var, REAL32.var.2 := 99.0(REAL32), 99.0(REAL32)
          REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
          INT.var.5, REAL64.var.5 := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  quins,   variables as actual results
        INT.var.5, INT.var, INT.var.2, INT.var.3, INT.var.4    := f.INT.INT.INT.INT.INT   (x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var.5, INT.var, INT.var.2, INT.var.3, REAL64.var := f.INT.INT.INT.INT.REAL64(x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        INT.var.5, INT.var, INT.var.2, REAL64.var, INT.var.4    := f.INT.INT.INT.REAL64.INT   (x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.4)
        clobber.vars()
        INT.var.5, INT.var, INT.var.2, REAL64.var, REAL64.var.4 := f.INT.INT.INT.REAL64.REAL64(x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        INT.var.5, INT.var, REAL64.var, INT.var.3, INT.var.4    := f.INT.INT.REAL64.INT.INT   (x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var.5, INT.var, REAL64.var, INT.var.3, REAL64.var.4 := f.INT.INT.REAL64.INT.REAL64(x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        INT.var.5, INT.var, REAL64.var, REAL64.var.3, INT.var.4    := f.INT.INT.REAL64.REAL64.INT   (x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var.5, INT.var, REAL64.var, REAL64.var.3, REAL64.var.4 := f.INT.INT.REAL64.REAL64.REAL64(x)
        local.check(INT.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        INT.var.5, REAL64.var, INT.var, INT.var.3, INT.var.4    := f.INT.REAL64.INT.INT.INT   (x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var.5, REAL64.var, INT.var, INT.var.3, REAL64.var.4 := f.INT.REAL64.INT.INT.REAL64(x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        INT.var.5, REAL64.var, INT.var, REAL64.var.3, INT.var.4    := f.INT.REAL64.INT.REAL64.INT   (x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var.4)
        clobber.vars()
        INT.var.5, REAL64.var, INT.var, REAL64.var.3, REAL64.var.4 := f.INT.REAL64.INT.REAL64.REAL64(x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        INT.var.5, REAL64.var, REAL64.var.2, INT.var, INT.var.4    := f.INT.REAL64.REAL64.INT.INT   (x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT.var)
        local.check(INT.var.4)
        clobber.vars()
        INT.var.5, REAL64.var, REAL64.var.2, INT.var, REAL64.var.4 := f.INT.REAL64.REAL64.INT.REAL64(x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        INT.var.5, REAL64.var, REAL64.var.2, REAL64.var.3, INT.var    := f.INT.REAL64.REAL64.REAL64.INT   (x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var)
        clobber.vars()
        INT.var.5, REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := f.INT.REAL64.REAL64.REAL64.REAL64(x)
        local.check(INT.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        REAL64.var.5, INT.var, INT.var.2, INT.var.3, INT.var.4    := f.REAL64.INT.INT.INT.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var.5, INT.var, INT.var.2, INT.var.3, REAL64.var := f.REAL64.INT.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var)
        clobber.vars()
        REAL64.var.5, INT.var, INT.var.2, REAL64.var, INT.var.4    := f.REAL64.INT.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var.5, INT.var, INT.var.2, REAL64.var, REAL64.var.4 := f.REAL64.INT.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check(INT.var.2)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        REAL64.var.5, INT.var, REAL64.var, INT.var.3, INT.var.4    := f.REAL64.INT.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var.5, INT.var, REAL64.var, INT.var.3, REAL64.var.4 := f.REAL64.INT.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        REAL64.var.5, INT.var, REAL64.var, REAL64.var.3, INT.var.4    := f.REAL64.INT.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var.5, INT.var, REAL64.var, REAL64.var.3, REAL64.var.4 := f.REAL64.INT.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check(INT.var)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        REAL64.var.5, REAL64.var, INT.var, INT.var.3, INT.var.4    := f.REAL64.REAL64.INT.INT.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var.5, REAL64.var, INT.var, INT.var.3, REAL64.var.4 := f.REAL64.REAL64.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check(INT.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        REAL64.var.5, REAL64.var, INT.var, REAL64.var.3, INT.var.4    := f.REAL64.REAL64.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var.5, REAL64.var, INT.var, REAL64.var.3, REAL64.var.4 := f.REAL64.REAL64.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        REAL64.var.5, REAL64.var, REAL64.var.2, INT.var, INT.var.4    := f.REAL64.REAL64.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT.var)
        local.check(INT.var.4)
        clobber.vars()
        REAL64.var.5, REAL64.var, REAL64.var.2, INT.var, REAL64.var.4 := f.REAL64.REAL64.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check(INT.var)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        REAL64.var.5, REAL64.var, REAL64.var.2, REAL64.var.3, INT.var    := f.REAL64.REAL64.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check.REAL64(REAL64.var.3)
        local.check(INT.var)
        clobber.vars()
        REAL64.var.5, REAL64.var, REAL64.var.2, REAL64.var.3, REAL64.var.4 := f.REAL64.REAL64.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.var.5)
        local.check.REAL64(REAL64.var)
        local.check.REAL64(REAL64.var.2)
        local.check.REAL64(REAL64.var.3)
        local.check.REAL64(REAL64.var.4)
        clobber.vars()
        
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.12()
    PROC multi.result.fns.12()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  quins,   subscripted arrays as actual results
        INT.arr.5[i5], INT.arr[i], INT.arr.2[i2], INT.arr.3[i3], INT.arr.4[i4]    := f.INT.INT.INT.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], INT.arr[i], INT.arr.2[i2], INT.arr.3[i3], REAL64.arr[i] := f.INT.INT.INT.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr.5[i5], INT.arr[i], INT.arr.2[i2], REAL64.arr[i], INT.arr.4[i4]    := f.INT.INT.INT.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], INT.arr[i], INT.arr.2[i2], REAL64.arr[i], REAL64.arr.4[i4] := f.INT.INT.INT.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr.5[i5], INT.arr[i], REAL64.arr[i], INT.arr.3[i3], INT.arr.4[i4]    := f.INT.INT.REAL64.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], INT.arr[i], REAL64.arr[i], INT.arr.3[i3], REAL64.arr.4[i4] := f.INT.INT.REAL64.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], INT.arr[i], REAL64.arr[i], REAL64.arr.3[i3], INT.arr.4[i4]    := f.INT.INT.REAL64.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], INT.arr[i], REAL64.arr[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.INT.INT.REAL64.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr.5[i5], REAL64.arr[i], INT.arr[i], INT.arr.3[i3], INT.arr.4[i4]    := f.INT.REAL64.INT.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], REAL64.arr[i], INT.arr[i], INT.arr.3[i3], REAL64.arr.4[i4] := f.INT.REAL64.INT.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], REAL64.arr[i], INT.arr[i], REAL64.arr.3[i3], INT.arr.4[i4]    := f.INT.REAL64.INT.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], REAL64.arr[i], INT.arr[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.INT.REAL64.INT.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], INT.arr[i], INT.arr.4[i4]    := f.INT.REAL64.REAL64.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], INT.arr[i], REAL64.arr.4[i4] := f.INT.REAL64.REAL64.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], REAL64.arr.3[i3], INT.arr[i]    := f.INT.REAL64.REAL64.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr[j])
        clobber.vars()
        INT.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.INT.REAL64.REAL64.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[i5], INT.arr[i], INT.arr.2[i2], INT.arr.3[i3], INT.arr.4[i4]    := f.REAL64.INT.INT.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], INT.arr[i], INT.arr.2[i2], INT.arr.3[i3], REAL64.arr[i] := f.REAL64.INT.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        REAL64.arr.5[i5], INT.arr[i], INT.arr.2[i2], REAL64.arr[i], INT.arr.4[i4]    := f.REAL64.INT.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], INT.arr[i], INT.arr.2[i2], REAL64.arr[i], REAL64.arr.4[i4] := f.REAL64.INT.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[i5], INT.arr[i], REAL64.arr[i], INT.arr.3[i3], INT.arr.4[i4]    := f.REAL64.INT.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], INT.arr[i], REAL64.arr[i], INT.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.INT.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], INT.arr[i], REAL64.arr[i], REAL64.arr.3[i3], INT.arr.4[i4]    := f.REAL64.INT.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], INT.arr[i], REAL64.arr[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.INT.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[i5], REAL64.arr[i], INT.arr[i], INT.arr.3[i3], INT.arr.4[i4]    := f.REAL64.REAL64.INT.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], REAL64.arr[i], INT.arr[i], INT.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.REAL64.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], REAL64.arr[i], INT.arr[i], REAL64.arr.3[i3], INT.arr.4[i4]    := f.REAL64.REAL64.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], REAL64.arr[i], INT.arr[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.REAL64.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], INT.arr[i], INT.arr.4[i4]    := f.REAL64.REAL64.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], INT.arr[i], REAL64.arr.4[i4] := f.REAL64.REAL64.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], REAL64.arr.3[i3], INT.arr[i]    := f.REAL64.REAL64.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr.5[i5], REAL64.arr[i], REAL64.arr.2[i2], REAL64.arr.3[i3], REAL64.arr.4[i4] := f.REAL64.REAL64.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        
        --}}}
    :
    --}}}
    --{{{  PROC multi.result.fns.13()
    PROC multi.result.fns.13()
      --{{{  variables
      [2]BYTE BYTE.arr, BYTE.arr.2 :
      [2]BOOL BOOL.arr, BOOL.arr.2 :
      [2]INT INT.arr, INT.arr.2, INT.arr.3, INT.arr.4, INT.arr.5 :
      [2]INT16 INT16.arr, INT16.arr.2 :
      [2]INT32 INT32.arr, INT32.arr.2 :
      [2]INT64 INT64.arr, INT64.arr.2, INT64.arr.3 :
      [2]REAL32 REAL32.arr, REAL32.arr.2 :
      [2]REAL64 REAL64.arr, REAL64.arr.2, REAL64.arr.3, REAL64.arr.4, REAL64.arr.5 :
      
      INT x :
      INT i, j :
      INT i2, i3, i4, i5 :
      --}}}
      --{{{  local.check routines
      PROC local.check(VAL INT x)
        check(x, 27, "MULTIfn")
      :
      --PROC local.check.BOOL(VAL BOOL x)
      --  check.BOOL(x, FALSE, "TWO-fn")
      --:
      --PROC local.check.REAL32(VAL REAL32 x)
      --  local.check(INT ROUND x)
      --:
      PROC local.check.REAL64(VAL REAL64 x)
        local.check(INT ROUND x)
      :
      
      --}}}
      --{{{  PROC clobber.vars
      PROC clobber.vars()
        SEQ
          x := id(27)
          i := id(1)
          j := id(i)
          i2 := id(i)
          i3 := id(i2)
          i4 := id(i3)
          i5 := id(i4)
      
          SEQ i = 0 FOR 2
            SEQ
              BYTE.arr[i], BYTE.arr.2[i] := BYTE 99, BYTE 99
              BOOL.arr[i], BOOL.arr.2[i] := TRUE, TRUE
              INT.arr[i], INT.arr.2[i], INT.arr.3[i3], INT.arr.4[i4] := 99, 99, 99, 99
              INT16.arr[i], INT16.arr.2[i] := 99(INT16), 99(INT16)
              INT32.arr[i], INT32.arr.2[i] := 99(INT32), 99(INT32)
              INT64.arr[i], INT64.arr.2[i], INT64.arr.3[i3] := 99(INT64), 99(INT64), 99(INT64)
              REAL32.arr[i], REAL32.arr.2[i] := 99.0(REAL32), 99.0(REAL32)
              REAL64.arr[i], REAL64.arr.2[i], REAL64.arr.3[i3], REAL64.arr.4[i4] := 99.0(REAL64), 99.0(REAL64), 99.0(REAL64), 99.0(REAL64)
              INT.arr.5[i5], REAL64.arr.5[i5] := 99, 99.0(REAL64)
      :
      --}}}
      SEQ
        clobber.vars()
    
        --{{{  quins,   subscripted arrays with fn calls
        INT.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.INT.INT.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)], REAL64.arr[id(i)] := f.INT.INT.INT.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        INT.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], REAL64.arr[id(i)], INT.arr.4[id(i4)]    := f.INT.INT.INT.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], REAL64.arr[id(i)], REAL64.arr.4[id(i4)] := f.INT.INT.INT.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.INT.REAL64.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], INT.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.INT.INT.REAL64.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.INT.REAL64.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.INT.INT.REAL64.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.REAL64.INT.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.INT.REAL64.INT.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], REAL64.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.INT.REAL64.INT.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.INT.REAL64.INT.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        INT.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT.arr[id(i)], INT.arr.4[id(i4)]    := f.INT.REAL64.REAL64.INT.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT.arr[id(i)], REAL64.arr.4[id(i4)] := f.INT.REAL64.REAL64.INT.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        INT.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], REAL64.arr.3[id(i3)], INT.arr[id(i)]    := f.INT.REAL64.REAL64.REAL64.INT   (x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr[j])
        clobber.vars()
        INT.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.INT.REAL64.REAL64.REAL64.REAL64(x)
        local.check(INT.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.REAL64.INT.INT.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], INT.arr.3[id(i3)], REAL64.arr[id(i)] := f.REAL64.INT.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], REAL64.arr[id(i)], INT.arr.4[id(i4)]    := f.REAL64.INT.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], INT.arr[id(i)], INT.arr.2[id(i2)], REAL64.arr[id(i)], REAL64.arr.4[id(i4)] := f.REAL64.INT.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check(INT.arr.2[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.REAL64.INT.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], INT.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.INT.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.REAL64.INT.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], INT.arr[id(i)], REAL64.arr[id(i)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.INT.REAL64.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.REAL64.REAL64.INT.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], INT.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.REAL64.INT.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check(INT.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], REAL64.arr.3[id(i3)], INT.arr.4[id(i4)]    := f.REAL64.REAL64.INT.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], INT.arr[id(i)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.REAL64.INT.REAL64.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT.arr[id(i)], INT.arr.4[id(i4)]    := f.REAL64.REAL64.REAL64.INT.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check(INT.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], INT.arr[id(i)], REAL64.arr.4[id(i4)] := f.REAL64.REAL64.REAL64.INT.REAL64(x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check(INT.arr[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], REAL64.arr.3[id(i3)], INT.arr[id(i)]    := f.REAL64.REAL64.REAL64.REAL64.INT   (x)
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check(INT.arr[j])
        clobber.vars()
        REAL64.arr.5[id(i5)], REAL64.arr[id(i)], REAL64.arr.2[id(i2)], REAL64.arr.3[id(i3)], REAL64.arr.4[id(i4)] := f.REAL64.REAL64.REAL64.REAL64.REAL64(x)
        
        
        local.check.REAL64(REAL64.arr.5[j])
        local.check.REAL64(REAL64.arr[j])
        local.check.REAL64(REAL64.arr.2[j])
        local.check.REAL64(REAL64.arr.3[j])
        local.check.REAL64(REAL64.arr.4[j])
        clobber.vars()
        
        
        --}}}
    :
    --}}}

    --{{{  PROC multi.result.fns()
    PROC multi.result.fns()
      SEQ
        title("Multi result fns")
        multi.result.fns.0()
        multi.result.fns.1()
        multi.result.fns.2()
        multi.result.fns.3()
        multi.result.fns.4()
        multi.result.fns.5()
        multi.result.fns.6()
        multi.result.fns.7()
        multi.result.fns.8()
        multi.result.fns.9()
        multi.result.fns.10()
        multi.result.fns.11()
        multi.result.fns.12()
        multi.result.fns.13()
    :
    --}}}
    multi.result.fns()
    --}}}
    finish ()
:
