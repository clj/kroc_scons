Import('env')
local = env.Clone()

conf = local.Configure(config_h = 'config.h', help=False)
headers = Split('''
      string.h malloc.h stdarg.h stdlib.h 
      string.h strings.h unistd.h
      ''')
for header in headers: conf.CheckCHeader(header)


conf.Define('MP_ENABLE', 
    1, 'define to enable multi-processor code-generation support')
conf.Define('PROCESS_PRIORITY',
    1, 'define to enable process priority')
# AC_DEFINE([MP_ENABLE],1,[define to enable multi-processor code-generation support])
# AC_DEFINE([PROCESS_PRIORITY],1,[define to enable process priority])
conf.Define('CAN_DO_DOTLABELS', 
    1, 'define if the assembler supports .Lnnn style  local-labels')
conf.Define('OLD_ASSEMBLER', 
    1, 'define if ia32 assembler does not understand fucom, fildl or fildd')
# AC_DEFINE([OLD_ASSEMBLER],1,[define if ia32 assembler does not understand fucom, fildl or fildd])
# AC_DEFINE([CAN_DO_DOTLABELS],1,[define if the assembler supports .Lnnn style local-labels])
conf.Define('HOST_CPU_IS_I386', 1, 'define for 386 CPUs')
#conf.Define('HOST_CPU_IS_I486', 1, 'define for 486/586/686 and compatible CPUs')
#conf.Define('HOST_OS_IS_LINUX', 1 ,'define for Linux')
# AC_DEFINE([HOST_CPU_IS_I486],1,[define for 486/586/686 and compatible CPUs])
# AC_DEFINE([HOST_CPU_IS_I386],1,[define for 386 CPUs])
# AC_DEFINE([HOST_CPU_IS_MIPS],1,[define for MIPS CPUs])
# AC_DEFINE([HOST_CPU_IS_SPARC],1,[define for Sparc CPUs])
# AC_DEFINE([HOST_CPU_IS_PPC64],1,[define for PowerPC-64 CPUs])
# AC_DEFINE([HOST_OS_IS_SOLARIS],1,[define for Sun Solaris])
# AC_DEFINE([HOST_OS_IS_LINUX],1,[define for Linux])
# AC_DEFINE([HOST_OS_IS_CYGWIN],1,[define for cygwin])
# AC_DEFINE([HOST_OS_IS_IRIX],1,[define for SGI IRIX])
local = conf.Finish()
local.Append(CPPDEFINES='HAVE_CONFIG_H')

tranx86_srcs    = Split('''
    main.c tceread.c netcread.c 
    support.c 
    etcdump.c etcrtl.c 
    tstack.c rtldump.c
    rtlops.c regcolour.c asm386.c optimise.c
    elf.c cpuid.c tstate.c 
    etcops.c stubtable.c 
    arch386.c archmips.c asmmips.c 
    tcedump.c archsparc.c 
    asmsparc.c archppc.c 
    asmppc.c kif.c
    ''')

tranx86 = local.Program(
        'tranx86', 
        tranx86_srcs,
        CPPPATH=local.Dir('../../runtime/ccsp/include'))

local.Depends(tranx86, '../../runtime/ccsp/include/ccsp_config.h')

env['TRANX86']         = tranx86
env['ENV']['TRANX86']  = tranx86
env['ENV']['OCTRAN']   = tranx86

