#! /bin/sh

if [ "$BASH_VERSION" = "" ]; then
	BASH=
	# search for "bash" in the PATH environment
	for dir in `printf '%s' "$PATH" | tr ':' '\n'`; do
		if [ -f $dir/bash ] && [ -x $dir/bash ]; then
			BASH=$dir/bash
			break
		fi
	done

	if [ "$BASH" = "" ]; then
		printf 'could not find bash!\n'
		exit 1
	fi

	exec $BASH "$0" "$@"
fi

# should be in bash when we get here

#
#	occam for all (ofa) project KRoC (Kent Retargetable occam Compiler)
#	KRoC driver script
#	Copyright (C) 1997  D.J. Beckett
#	Modifications copyright (C) 2000-2004  Fred Barnes <frmb@kent.ac.uk>
#
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

# If this file has the name "kroc.in" then it is a template for the kroc
# driver program; to generate the actual kroc script, run
# "./configure --prefix=<KRoC-path>" in the src/kroc-* directory
#
# Note: you shouldn't really do this yourself -- the build script will
# handle it.

# Only ever calls echo and sed UNIX programs (via `s)
SED=@SED@

progname=$(printf '%s' "$0" | $SED 's/^.*\///')

KROC=@KROC@
CC=@CC@

# Only the 'kroc' program need be in the users path
PATH=$KROC/bin:$PATH

package_version=@VERSION@
dversion='1.5'
host_canonical=@KROC_CANONICAL_TARGET@
host_os=@KROC_HOST_OS@
host_cpu=@KROC_HOST_CPU@
# -kf : use fast CCSP interface
octranopts="-kf @TSCHEDSTRUCT@ @TRANEXTRAOPTS@"
ccopts=""
ocllibs=""
ocrtslibs="-lm @DLOPTLIB@ @DEXTLIB@"
extcflags="@DSYSOPTS@ @EXTCCEXTRAOPTS@"

case "$host_os" in
	cygwin )
		octranopts="$octranopts --cnpfx _"
		extcflags="$extcflags -DHOSTOS_CYGWIN"
		;;
	solaris* )
		# solaris stock assembler doesn't eat from stdin (go via tempfile)
		octranopts="$octranopts -es"
		;;
esac

fatal=
defaultlibraries=1


# Options to occ21

# Warnings:
# -nwca : No warnings for CHAN OF ANY
# -nwgy : No warnings on GUY construct
# -nwu  : No Unused Name Warnings
# -nwp  : No Unused Parameter Warnings
occ_no_warn_opts="-nwca -nwgy -nwp -nwu"
# -walign : Warn on alignment checks
# -wall   : Enable all warnings
# -wd     : Provide descoped name warnings
# -wo     : Provide overlap check warnings
occ_warn_opts="-walign -wall -wd -wo -wqual"

# Processor class:  -tX argument to occ21 and .kXX temporary file suffix
proc_class='t8'
tsuffix='tce'

#
# -w    : Full Code Insertion
# -y    : Disable Library I/O
# -etc  : Enable ETC code generation.
# -znd  : No Debug Information At All
# -znec : Allow comments anywhere (makes folded source legal in more cases)
# -udo  : User defined operators
# -init : INITIAL declarations
## -s    : run in STOP error mode
##>>  these now handled seperately  <<##
### -revalt : use reversed ALT disable where possible (more efficient)
### -zen  : enhanced ALT enables (more efficient)
### -zep  : ALT pre-enabling sequence (very efficient)
#
# -xin  : Enable extended input

# Default: medium warnings
occwopts=
occopts="-etc -w -y -znd -znec -udo -zncc -init -xin -mobiles -zrpe @OCCEXTRAOPTS@"

case "$host_cpu" in
	sparc*)
		occopts="$occopts -tbe"
		;;
	i386 | i486 | i586 | i686)
		occopts="$occopts -zcxdiv -zcxrem"
		;;
esac

occ21=${OCC21:-occ21}
octran=${OCTRAN:-$KROC/bin/tranx86}
ocrtsdir=${OCRTSDIR:-$KROC/lib}
ocrts=${OCRTS:--lkroc}

# necessary for dynamic procs (makes all synbols appear in the dynamic symbol table)

case "$host_os" in
	solaris*)
		extraccopts=${EXTRACCOPTS:-}
		;;
	*)
		extraccopts=${EXTRACCOPTS:--Xlinker -E}
		;;
esac


cc=${CC:-gcc}
as=${AS:-as}
asflags=""
ld=${LD:-ld}
ldopts="-shared"

# Assembler options needed A1 and A2 are used to define alignment.
# Different versions of the gnu assembler require different values:
# try A1=2, A=1 (powers rather than absolutes).
asflags="$asflags --defsym A1=4 --defsym A2=2 -W"

ocspath=
if [ "X$OCSEARCH" != "X" ]; then
  ocspath="$OCSEARCH:$ocrtsdir"
else
  ocspath="$ocrtsdir"
fi

oclibpath=
ocsearch=
clincludepath=

# ocspath is a COLON-SEPARATED list now, better process slightly differently


XIFS="$IFS"
IFS=':'

for dir in $ocspath; do
	dir=$(printf '%s' "$dir" | $SED -e 's:/$::')
	oclibpath="$oclibpath -L$dir"
	ocsearch="$ocsearch:$dir"
	cincludepath="$cincludepath -I$dir"
done

IFS="$XIFS"

# for dir in $ocspath; do
# 	dir=$(printf '%s' "$dir" | $SED -e 's:/$::')
# 	oclibpath="$oclibpath -L$dir"
# 	ocsearch="$ocsearch $dir"
# 	cincludepath="$cincludepath -I$dir"
# done

use_occ21_revalt=1
use_occ21_zen=1
use_occ21_zep=1
default_errormode_stop=0
showall=0
srcs=
verbose=
makelib=
compile=yes
translate=yes
link=yes
outfile=
dorun=yes
showversion=
showlibpath=
showincpath=
showascc=
showcflags=
showcc=
delete_temp=yes
enable_udc=
skip_link=
debugkroc=0
dumpxml=
usenocc=
nocc="@NOCCHOME@/nocc"
noccopts="--specs-file @NOCCHOME@/nocc.specs.xml"

while :
do
	case $# in
	0)
		break
		;;
	esac

	option=$1
	shift

	orig_option=$option     # Save original for error messages

	# Split out the argument for options that take them
	case $option in
	--*=*)
		optarg=$(printf '%s' "$option" | $SED -e 's/^[^=]*=//')
		;;
	# These options have mandatory values.  Since we didn't find an = sign,
	# the value must be in the next argument
	--octran-opts | --oc-opts | --cc-opts | --nocc-opts)
		optarg=$1
		shift
		;;
	esac


	case "$option" in
	-b | --brief)
		occopts="$occopts -b"
		;;
	-c | --compile)
		link=
		octranopts="$octranopts -c"
		noccopts="$noccopts -c"
		;;
	-e | --enable-udc)
		enable_udc=yes
		# can't use enhanced enabling with UDCs
		use_occ21_zen=0
		;;
	-p | --pre-compile)
		translate=
		link=
		;;
	-n | --dry-run)
		dorun=
		verbose=yes
		;;
	--dryrun)
		dorun=
	        printf '%s: --dryrun is obsolete, please use --dry-run\n' "$progname" 1>&2
		verbose=yes
		;;
	--no-checks)
		printf '%s: warning: disabling run-time checks\n' "$progname"
		octranopts="$octranopts -n"
		;;
	-io | --inline-io)
		octranopts="$octranopts -ii -io -ia"
		;;
	-is | --inline-sched)
		octranopts="$octranopts -is"
		;;
	-it | --inline-ldtimer)
		octranopts="$octranopts -it"
		;;
	-o)
		outfile=$1
		shift
		;;
	-o*)
		outfile=$(printf '%s' "$option" | $SED -e 's/^..//')
		;;
	-s | --strict)
		occopts="$occopts -strict"
		;;
	--oos)
		octranopts="$octranopts -ko"
		;;
	--nfw)
		octranotps="$octranopts --nfw"
		;;
	--new)
		octranopts="$octranopts --new"
		;;
	--octran-opts*)
		octranopts="$octranopts $optarg"
		;;
	--oc-opts*)
		occopts="$occopts $optarg"
		;;
	--cc-opts*)
		ccopts="$ccopts $optarg"
		;;
	--nocc-opts*)
		noccopts="$noccopts $optarg"
		;;
	-nd | --no-dynmem)
		occopts="$occopts -ndm"
		octranopts="$octranopts -nd"
		;;
	-l | --library)
		# set library (and non-main) for tranpc, and no vectorspace for compiler
		octranopts="$octranopts -c -l"
		occopts="$occopts -v"
		makelib=yes
		;;
	-l*)
		ocllibs="$ocllibs $option"
		;;
	-L*)
		dir=$(printf '%s' $option | $SED -e 's:/$::' -e 's:^..::')
		oclibpath="-L$dir $oclibpath"
		ocsearch="$dir:$ocsearch"
		;;
	-I*)
		dir=$(printf '%s' "$option" | $SED -e 's:/$::' -e 's:^..::')
		ocsearch="$dir:$ocsearch"
		cincludepath="-I$dir $cincludepath"
		;;
	-v | --verbose | --v | --verb*)
		verbose=yes
		octranopts="$octranopts -v"
		;;
	-k | --keep-temp)
		delete_temp=
		octranopts="$octranopts -es"
		;;
	-V | --version)
		showversion=yes
		;;
	--libpath)
		showlibpath=yes
		;;
	--incpath)
		showincpath=yes
		;;
	--cclibpath)
		showlibpath=yes
		showascc=yes
		;;
	--ccincpath)
		showincpath=yes
		showascc=yes
		;;
	--cflags)
		showcflags=yes
		;;
	--cc)
		showcc=yes
		;;
	--tranflags)
		showtranflags=yes
		;;
	--tran)
		showtran=yes
		;;
	-h | --help | --he*)
		fatal=yes
		;;
	-w | --warn)
		occwopts=$occ_warn_opts
		;;
	-nw | --no-warn)
		occwopts=$occ_no_warn_opts
		;;
	--nowarn)
	        printf '%s: --nowarn is obsolete, please use --no-warn\n' "$progname" 1>&2
		occwopts=$occ_no_warn_opts
		;;
	-t2 | -t4 | -t8 | -t9 )
		proc_class=$(printf '%s' $option | $SED -e 's/^.//')
		tsuffix="k$proc_class"
	        printf '%s: Option $option is experimental: setting processor class to %s\n' "$progname" "$proc_class" 1>&2
		;;
	-X1 )
	        printf '%s: Already using ETC.  Ignorning.\n' "$progname" 1>&2
		;;
	-X2 )
	        printf '%s: User defined operators already enabled.  Ignoring.\n' "$progname" 1>&2
		;;
	-X3 )
		printf '%s: INITIAL declarations already enabled.  Ignoring.\n' "$progname" 1>&2
		;;
	-X5 )
		printf '%s: MOBILE types now enabled by default\n' "$progname" 1>&2
		;;
	-X6 )
		printf '%s: enabling extended input for unhandled CASE tags\n' "$progname" 1>&2
		occopts="$occopts -xtag"
		;;
	-X7 )
		printf '%s: enabling mobile process types\n' "$progname" 1>&2
		occopts="$occopts -mpt"
		;;
	-d )
		printf '%s: Selecting post-mortem debugging\n' "$progname" 1>&2
		octranopts="$octranopts -dX"
		;;
	-di )
		printf '%s: Selecting insert debugging\n' "$progname" 1>&2
		octranopts="$octranopts -di"
		;;
	-dm )
		printf '%s: Selecting dynamic memory debugging\n' "$progname" 1>&2
		ocrtslibs="$ocrtslibs @DMOPTLIB@"
		octranopts="$octranopts -dm"
		;;
	-ds )
		printf '%s: Enabling memory usage summary\n' "$progname" 1>&2
		octranopts="$octranopts -ds"
		;;
	-O | --optimise )
		printf '%s: Optimisations already enabled\n' "$progname" 1>&2
		;;
	-P | --pause )
		printf '%s: Enabling scheduler check at loop-end/back-jump\n' "$progname" 1>&2
		octranopts="$octranopts -p"
		;;
	-S )
		printf '%s: Compiling in STOP error mode\n' "$progname" 1>&2
		octranopts="$octranopts -S"
		;;
	--force-tlp )
		octranopts="$octranopts --tlp-kybscrerr"
		;;
	--skip-link )
		printf '%s: skipping final link into executable\n' "$progname" 1>&2
		skip_link=yes
		;;
	--no-zen)
		use_occ21_zen=0
		;;
	--use-zen)
		use_occ21_zen=1
		;;
	--no-revalt)
		use_occ21_revalt=0
		;;
	--use-revalt)
		use_occ21_revalt=1
		;;
	--no-zep)
		use_occ21_zep=0
		;;
	--use-zep)
		use_occ21_zep=1
		;;
	--ncl)
		defaultlibraries=0
		;;
	--xml)
		dumpxml=1
		;;
	--nocc)
		if [ ! -x $nocc ]; then
			printf '%s: not configured to use NOCC\n' "$progname" 1>&2
			exit 1
		fi
		usenocc=1
		;;
	-z | --all-help)
		showall=1
		;;
	--debugkroc)
		debugkroc=1
		;;
	--* | -*)
		printf '%s: Unrecognized option: "%s"; use --help for usage.\n' "$progname" "$orig_option" 1>&2
		exit 1
		;;
	*)      srcs="$srcs $option"
		;;

	esac
done

if [ $use_occ21_revalt -eq 1 ]; then
	occopts="$occopts -revalt"
fi
if [ $use_occ21_zen -eq 1 ]; then
	occopts="$occopts -zen"
fi
if [ $use_occ21_zep -eq 1 ]; then
	occopts="$occopts -zep"
fi

if [ $defaultlibraries -eq 1 ]; then
	ocllibs="-loccam8 -loccamutl $ocllibs"
fi

# Add current directory first, always
oclibpath="-L. $oclibpath"
ocsearch=".:$ocsearch"
cincludepath="-I. $cincludepath"
procopts="-$proc_class"
occopts="$procopts $occopts"

if [ $enable_udc ]; then
	# enable MOBILE size-field
	occopts="$occopts -msf"
else
	# disallow PLACE'd channels and don't generate external channel checks
	occopts="$occopts -npc"
	octranopts="$octranopts -nec"
fi

if [ $showlibpath ]; then
	if [ $showascc ]; then
		printf '%s\n' "$oclibpath"
	else
		printf '%s\n' "$oclibpath" | $SED -e 's:-L::g' -e 's/ /:/g' -e 's/::/:/g'
	fi
	exit 0
fi

if [ $showincpath ]; then
	if [ $showascc ]; then
		printf '%s\n' "$cincludepath"
	else
		printf '%s \n' "$ocsearch" | $SED -e 's:^ ::' -e 's: $::' -e 's/ /:/g' -e 's/::/:/g'
	fi
	exit 0
fi

if [ $showcflags ]; then
	printf '%s\n' "$extcflags"
	exit 0
fi
if [ $showcc ]; then
	printf '%s\n' "$CC"
	exit 0
fi
if [ $showtranflags ]; then
	printf '%s\n' "$octranopts"
	exit 0
fi
if [ $showtran ]; then
	printf '%s\n' "$octran"
	exit 0
fi

if [ $makelib ]
then
	if [ "X$link" = "X" ]
	then
		printf '%s: -c and -l are mutually exclusive (dropping -c)\n' "$progname" 1>&2
		link=yes
	fi
fi


if [ "X${fatal}" != "X" -o "X$srcs" = "X" -o "X$showversion" != "X" ]; then

	exec 1>&2
	printf 'KRoC version %s targeting %s (driver V%s)\n' "$package_version" "$host_canonical" "$dversion"

	if [ $verbose ]; then
		showversion=yes
	fi
	if [ $showversion ]; then
		cat $KROC/AUTHORS
		exit 0
	fi

	exec 1>&2
	printf 'Usage: %s [options] [occam sources/pre-compiled sources]\n' "$progname"
	cat << EOF
Options:
  -b,  --brief           Give brief occ21 error messages
  -c,  --compile         Compile source to objects, do not link
  -s,  --strict          Strict checking mode
EOF
	if [ $default_errormode_stop -eq 1 ]; then
		printf '  -H,  --halterror       Compile in HALT error mode\n'
	else
		printf '  -S,  --stoperror       Compile in STOP error mode\n'
	fi
	cat << EOF
  -d                     Enable post-mortem debugging
  -e                     Enable user-defined channels
  -h,  --help            Print this message and exit
  -IDIRECTORY            Search DIRECTORY for occam libs & includes, C headers
  -k,  --keep-temp       Keep temporary files
  -V,  --version         Print version
  -l,  --library         Generate .so shared library (for dynamically loaded processes)
  -lNAME                 Link with native library libNAME.a / libNAME.so
  -LDIRECTORY            Search DIRECTORY for native libraries
  -n,  --dry-run         Do not run any commands; just print them.
       --oc-opts=opts    Use these occam compiler ($occ21) options
       --oc-opts opts      \"\"
       --cc-opts=opts    Use these C compiler ($cc) options
       --cc-opts opts      \"\"
  -nw, --no-warn         Give no warnings from $occ21
  -nd, --no-dynmem       Disable dynamic memory support
  -oFILE, -o FILE        Place output in file FILE
  -p,  --pre-compile     Pre-compile occam source to .tce files
  -P   --pause           Event/schedule check at loop-ends and backward jumps
  -io, --inline-io       Inline input/output kernel calls
  -is, --inline-sched    Inline parts of the scheduler
  -it, --inline-ldtimer  Inline load-timer instruction
  -v,  --verbose         Show commands run during compilation
  -w,  --warn            Additional warnings from $occ21
  -z,  --all-help        Show additional options
       --nfw             Do not wait for globally FORKed processes
       --new             Do not wait for blocking syscalls
  -X6                    Extended input for unhandled CASE inputs (experimental)
  -X7                    Enable mobile processes (experimental)
EOF
	if [ $showall -eq 1 ]; then
	cat << EOF
Exclusive options:
  --cc                   Print compiler for use with external C code
  --cflags               Print compiler flags for use with external C code
  --tran                 Print translator for .etc binaries
  --tranflags            Print translator flags
  --libpath              Print path to occam libraries
  --incpath              Print path to occam include files
  --cclibpath            Print path to occam libraries in CC -L.. form
  --ccincpath            Print path to occam include files in CC -I.. form
Additional options:
  -di                    Enable insert debugging
  -dm                    Enable dynamic memory debugging
  -ds                    Enable memory usage summary
  -t2, -t4, -t8, -t9     Set processor compilation class (default $proc_class)
  -O   --optimise        Enable optimisations [now default]
       --oos             Compile for OOS (experimental)
       --force-tlp       Force top-level PROC interface to (CHAN BYTE kyb?, scr!, err!)
  --ncl                  Do not link in default compiler libraries
  --xml                  Generate XML tree
  --nocc                 Use NOCC compiler (experimental)
EOF
	if [ $use_occ21_revalt -eq 1 ]; then
		printf '       --no-revalt       Do not use reversed ALT disabling sequence (default enabled)\n'
	else
		printf '       --use-revalt      Use reversed ALT disabling sequence (default disabled)\n'
	fi
	if [ $use_occ21_zen -eq 1 ]; then
		printf '       --no-zen          Do not use enhanced ALT enabling (default enabled)\n'
	else
		printf '       --use-zen         Use enhanced ALT enabling (default disabled)\n'
	fi
	if [ $use_occ21_zep -eq 1 ]; then
		printf '       --no-zep          Do not use ALT pre-enabling (default enabled)\n'
	else
		printf '       --use-zep         Use ALT pre-enabling (default disabled)\n'
	fi
	if [ $default_errormode_stop -eq 1 ]; then
		printf '  -S,  --stoperror       Compile in STOP error mode (default)\n'
	else
		printf '  -H,  --halterror       Compile in HALT error mode (default)\n'
	fi
	fi
	exit 0
fi

objs=
tmp_objs=
efile=
for src in $srcs; do
	origsrc=$src
	suffix=$(printf '%s' "$src" | $SED -e 's/^.*\.\(.*\)$/\1/')

	# Handle file. (no suffix)
	if [ "X$suffix" = "X"  ]; then
		nsrc="${src}occ"
		if [ -r $nsrc ]; then
			printf '%s: Assuming you meant to compile %s\n' "$progname" "$nsrc" 1>&2
			src=$nsrc
			suffix=occ
		else
			printf '%s: Ignoring %s (no %s found)\n' "$progname" "$src" "$nsrc" 1>&2
			continue
		fi
	elif [ "$suffix" = "$src" ]; then		# Handle file (no . at all)
		if [ -r "$src.occ" ]; then
			printf '%s: Assuming you meant to compile %s.occ\n' "$progname" "$src" 1>&2
			suffix=occ
		else
			printf '%s: Ignoring %s (no %s.occ found)\n' "$progname" "$src" "$src" 1>&2
			continue
		fi
	fi

	dir=$(printf '%s' "$src" | $SED -e 's%[^/][^/]*$%%')
	if [ "X$dir" = "X$src" ]; then
		dir=
	else
		src=$(printf '%s' "$src" | $SED -e 's%^.*/%%')
	fi

	base=$(printf '%s' "$src" | $SED -e 's/\.[^\.]*$//')

	# Pick output name, either from -o name if given or basename of name
	if [ "X$link" != "X" -a "X$efile" = "X" ]; then
		if [ "X$outfile" = "X" ]; then
			efile=$base
		else
			efile=$outfile
			outfile=
		fi
	fi

	# if the file does not exist, abort
	if [ ! -f $dir$base.$suffix ]; then
		printf '%s: cannot find file %s\n' "$progname" "$dir$base.$suffix" 1>&2
		exit 1
	fi

	if [ $debugkroc -eq 1 ]; then
		printf '    origsrc = %s\n' "$origsrc"
		printf '    src = %s\n' "$src"
		printf '    dir = %s\n' "$dir"
		printf '    base = %s\n' "$base"
		printf '    suffix = %s\n' "$suffix"
		printf '    efile = %s\n' "$efile"
		printf '    outfile = %s\n' "$outfile"
	fi


	# Using pre-compiled file?   FIXME: Handle this better
	if [ $suffix = "etc" -o $suffix = "kt2" -o $suffix = "kt4" -o $suffix = "kt8" -o $suffix = "kt9" ]; then
		compile=
		tfile="$dir$base.$suffix"
		tcefile="$dir$base.tce"

		if [ ! -r $tfile ]; then
			printf '%s: Cannot find pre-compiled file %s\n' "$progname" "$tfile" 1>&2
			exit 1;
		fi
		if [ ! -r $tcefile ]; then
			printf '%s: Cannot find pre-compiled TCE file %s\n' "$progname" "$tcefile" 1>&2
			exit 1;
		fi
	fi

	if [ $suffix != "occ" -a $suffix != "co" -a "X$compile" != "X" ]; then
		objs="$objs $origsrc"
		continue
	fi

	if [ $suffix = "co" ]; then
		src="$dir$base.co"
	else
		src="$dir$base.occ"
	fi


	if [ ! -r $src ]; then
		printf '%s: Cannot find occam source file %s\n' "$progname" "$src" 1>&2
		exit 1
	fi

	if [ $link ]; then
		if [ $efile = $src ]; then
			efile="$efile.out";
			printf '%s: Compiling %s to %s\n' "$progname" "$src" "$efile" 1>&2
		fi
	fi

	tmpfiles=

	# .ktX files and TCO (and ETC) files
	if [ $compile ]; then
		if [ $usenocc ]; then
			tcefile="$base.etc"
			tsuffix="etc"
		else
			tcefile="$base.tce"
		fi
		if [ "X$translate" != "X" -a "X$outfile" != "X" ]; then
			tfile=$outfile
		else
			tfile="$base.$tsuffix"
		fi
		tmpfiles="$tmpfiles $tcefile $tfile"
	fi

	# Native assembler file
	sfile="$base.s"
	tmpfiles="$tmpfiles $sfile"

	# Native object file
	if [ "X$link" != "X" -a "X$outfile" != "X" ]; then
		ofile=$outfile
	else
		ofile="$base.o"
	fi
	tmpfiles="$tmpfiles $ofile"

	if [ $delete_temp ]; then
		trap "rm -f $tmpfiles" 1 2 3 9 15
	fi

	ISEARCH=$ocsearch; export ISEARCH
	if [ $verbose ]; then
		printf '%s: Search path for native libraries:\n' "$progname" 1>&2
		printf '  %s\n' "$oclibpath" | $SED -e 's:-L::g' 1>&2
		printf '%s: Search path for occam libraries and includes; C headers:\n' "$progname" 1>&2
		printf '  %s\n' "$ocsearch" 1>&2
	fi


	if [ $compile ]; then
		if [ $dorun ]; then
			rm -f $tfile #$tcefile
		fi

		if [ $usenocc ]; then
			cmd="$nocc $noccopts $src -o $tfile"
		else
			cmd="$occ21 $occopts $occwopts $src -o $tfile"
			if [ $dumpxml ]; then
				xmlfile=$base.xml
				cmd="$cmd -ztx -xf $xmlfile"
			fi
		fi

		if [ $verbose ]; then
			printf '%s\n' "$cmd" 1>&2
		fi
		if [ $dorun ]; then
			$cmd
			if [ $? -ne 0 ]; then
				if [ $usenocc ]; then
					printf '%s: %s failed to compile %s to %s\n' "$progname" "$nocc" "$src" "$tfile" 1>&2
				else
					printf '%s: %s failed to compile %s to %s\n' "$progname" "$occ21" "$src" "$tfile" 1>&2
				fi
				exit 1;
			fi
			if [ $link ]; then
				if [ $delete_temp ]; then
					tmp_objs="$tmp_objs $tfile $tcefile"
				fi
			fi
		fi
	fi


	if [ $translate ]; then
		if [ $dorun ]; then
			rm -f $ofile
		fi

		cmd="$octran $octranopts $tfile" # $sfile"
		if [ $verbose ]; then
			printf '%s\n' "$cmd" 1>&2
		fi
		if [ $dorun ]; then
			$cmd
			if [ $? -ne 0 ]; then
				printf '%s: %s failed to translate %s to %s\n' "$progname" "$octran" "$tfile" "$ofile" 1>&2
				exit 1;
			fi
		fi

		# don't assemble anymore -- tranx86 dumps .o files
#		if [ $dorun ]; then
#			rm -f $ofile
#		fi

#		cmd="$as $asflags $sfile -o $ofile"
#		if [ $verbose ]; then
#			echo $cmd 1>&2
#		fi
#		if [ $dorun ]; then
#			$cmd
#			if [ $? -ne 0 ]; then
#				echo "$progname: $as failed to assemble $sfile to $ofile ($?)" 1>&2
#				exit 1;
#			fi
#		fi
		objs="$objs $ofile"
		tmp_objs="$tmp_objs $ofile"

		if [ $dorun ]; then
			if [ $delete_temp ]; then
				rm -f $sfile
			fi
		fi
	fi

done


if [ "X$link" = "X" ]; then
	exit 0
fi

if [ "X$efile" = "X" ]; then
	printf '%s: No output executable file name found (and no -oname)\n' "$progname" 1>&2
	exit 1
fi

if [ $dorun ]; then
	rm -f $efile
fi

if [ $makelib ]; then
	efile=$efile".so"
	cmd="$ld $ldopts -o $efile $objs"
elif [ $skip_link ]; then
	test
else
	if [ "$host_os" = "cygwin" ]; then
		local_ocllibs=""
		local_ocrts=""
		foundrts=
		for lib in $ocllibs $ocrts; do
			# if it looks like -lname, search for it in oclibpath

			case "X$lib" in
			X-l*)
				foundlib=
				libname=$(printf '%s' "$lib" | $SED -e 's/^-l//g')
				# search
				for lpath in $oclibpath; do
					case "X$lpath" in
					X-L*)
						libpath=$(printf '%s' "$lpath" | $SED -e 's/^-L//g')

						# is it here ?
						if [ -f $libpath/lib$libname.so ]; then
							foundlib=1
							local_ocllibs="$local_ocllibs $libpath/lib$libname.so"
						elif [ -f $libpath/lib$libname.a ]; then
							foundlib=1
							local_ocllibs="$local_ocllibs $libpath/$libname.a"
						elif [ -f $libpath/$libname.o ]; then
							printf '%s: (warning) using object-file %s for library: %s\n' "$progname" "$libpath/$libname.o" "$libname" 1>&2
							foundlib=1
							local_ocllibs="$local_ocllibs $libpath/$libname.o"
						fi
						;;
					*)
						;;
					esac
					if [ "$foundlib" != "" ]; then
						break
					fi
				done

				if [ "$foundlib" = "" ]; then
					printf '%s: (warning) cannot find library: %s\n' "$progname" "$libname" 1>&2
				elif [ "$lib" = "$ocrts" ]; then
					foundrts=1
				fi

				;;
			*)
				;;
			esac

		done
		if [ "$foundrts" = "" ]; then
			printf '%s: (warning) cannot find run-time kernel: %s\n' "$progname" "$ocrts" 1>&2
		fi
	else
		local_ocllibs="$ocllibs"
		local_ocrts="$ocrts"
	fi
	cmd="$cc $ccopts $objs $oclibpath $cincludepath $local_ocllibs $local_ocrts $ocrtslibs $extraccopts -o $efile"
fi
if [ $verbose ]; then
	printf '%s\n' "$cmd"  1>&2
fi
if [ $dorun ]; then
	$cmd
	if [ $? -ne 0 ]; then
		printf '%s: %s failed to link %s\n' "$progname" "$cc" "$efile" 1>&2
		exit 1;
	fi
fi
if [ $delete_temp ]; then
	if [ "X$tmp_objs" != "X" ]; then
		rm -f $tmp_objs
	fi
fi

exit 0

