--
--	video.occ -- video-4-linux-2 frame-grabber
--	Copyright (C) 2008 Fred Barnes <frmb@kent.ac.uk>
--
--	This program is free software; you can redistribute it and/or modify
--	it under the terms of the GNU General Public License as published by
--	the Free Software Foundation; either version 2 of the License, or
--	(at your option) any later version.
--
--	This program is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	GNU General Public License for more details.
--
--	You should have received a copy of the GNU General Public License
--	along with this program; if not, write to the Free Software
--	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
--

--** V4L2 frame-grabber interface.
--
-- This module provides a raster-based interface to video-4-linux
-- frame-grabbers (version 2 of the Linux API).
--
--** @module video

--{{{  includes
#INCLUDE "raster.module"
#INCLUDE "video.inc"
--}}}
--{{{  external C functions
#PRAGMA EXTERNAL "PROC C.video.initstruct (RESULT VIDEO.DEVICE vdev) = 0"
#PRAGMA EXTERNAL "PROC B.video.open (VIDEO.DEVICE vdev, RESULT BOOL ok) = 3"
#PRAGMA EXTERNAL "PROC C.video.close (VIDEO.DEVICE vdev, RESULT BOOL ok) = 0"

-- #PRAGMA EXTERNAL "PROC B.video.v4l2.readrgbframe (VAL INT fd, [][]INT r) = 3"
#PRAGMA EXTERNAL "PROC C.video.identity (VIDEO.DEVICE vdev, RESULT VIDEO.IDENTITY ident, RESULT BOOL ok) = 0"
#PRAGMA EXTERNAL "PROC C.video.numcams (VIDEO.DEVICE vdev, RESULT INT num) = 0"
#PRAGMA EXTERNAL "PROC C.video.getcaminfos (VIDEO.DEVICE vdev, []VIDEO.CAMINPUT inputs) = 0"
#PRAGMA EXTERNAL "PROC C.video.setcamera (VIDEO.DEVICE vdev, VIDEO.CAMINPUT input, RESULT BOOL ok) = 0"

#PRAGMA EXTERNAL "PROC C.video.getpicture (VIDEO.DEVICE vdev, RESULT VIDEO.PICTURE picture) = 0"
#PRAGMA EXTERNAL "PROC C.video.setpicture (VIDEO.DEVICE vdev, VIDEO.PICTURE picture, RESULT BOOL ok) = 0"

--}}}


--{{{  PROC video.opendev (...)
--* Opens a video device.
PROC video.opendev (VAL []BYTE fname, RESULT VIDEO.DEVICE dev, RESULT BOOL ok)
  INT xlen:
  SEQ
    C.video.initstruct (dev)
    IF
      (SIZE fname) >= VIDEO.DEVICE.FNAMEMAX
        xlen := VIDEO.DEVICE.FNAMEMAX
      TRUE
        xlen := SIZE fname
    [dev[fname] FOR xlen] := [fname FOR xlen]
    dev[fnamelen] := xlen

    B.video.open (dev, ok)
:
--}}}
--{{{  PROC video.identity (...)
--* Identifies a video device.
PROC video.identity (VIDEO.DEVICE dev, RESULT VIDEO.IDENTITY ident, RESULT BOOL ok)
  SEQ
    C.video.identity (dev, ident, ok)
:
--}}}
--{{{  PROC video.getcaminputs (...)
--* Gets information about camera inputs.
PROC video.getcaminputs (VIDEO.DEVICE dev, RESULT MOBILE []VIDEO.CAMINPUT inputs)
  INT ninputs:
  SEQ
    C.video.numcams (dev, ninputs)
    inputs := MOBILE [ninputs]VIDEO.CAMINPUT

    IF
      ninputs > 0
        C.video.getcaminfos (dev, inputs)
      TRUE
        SKIP
:
--}}}
--{{{  PROC video.closedev (...)
--* Closes a video device.
PROC video.closedev (VIDEO.DEVICE dev, RESULT BOOL ok)
  SEQ
    C.video.close (dev, ok)
:
--}}}
--{{{  PROC video.setcamera (...)
--* Sets the particular video camera to use.
PROC video.setcamera (VIDEO.DEVICE dev, VIDEO.CAMINPUT input, RESULT BOOL ok)
  SEQ
    C.video.setcamera (dev, input, ok)
:
--}}}
--{{{  PROC video.getpicture (...)
--* Gets the current picture properties (brightness, etc.)
PROC video.getpicture (VIDEO.DEVICE dev, RESULT VIDEO.PICTURE picture)
  SEQ
    C.video.getpicture (dev, picture)
:
--}}}
--{{{  PROC video.setpicture (...)
--* Sets the current picture properties (brightness, etc.)
PROC video.setpicture (VIDEO.DEVICE dev, VIDEO.PICTURE picture, RESULT BOOL ok)
  SEQ
    C.video.setpicture (dev, picture, ok)
:
--}}}


