--
--	Barrier demonstration
--	Copyright (C) 1996  P.H. Welch
--
--	This program is free software; you can redistribute it and/or modify
--	it under the terms of the GNU General Public License as published by
--	the Free Software Foundation; either version 2 of the License, or
--	(at your option) any later version.
--
--	This program is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	GNU General Public License for more details.
--
--	You should have received a copy of the GNU General Public License
--	along with this program; if not, write to the Free Software
--	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
--

#INCLUDE "semaphore.module"
#INCLUDE "barrier.module"
#INCLUDE "course.module"

PROC barrier.test (CHAN OF BYTE keyboard, screen, error)
  --{{{  
  --{{{  SHARED screen
  #PRAGMA SHARED screen
  
  SEMAPHORE screen.s:
  #PRAGMA SHARED screen.s
  --}}}
  
  --{{{  client
  PROC client (VAL INT id, n.clients, UBARRIER b,
               SEMAPHORE out.s, CHAN OF BYTE out)
    --{{{  
    INT n:
    SEQ
      n := id
      WHILE TRUE
        SEQ
          --{{{  wait n seconds
          VAL INT seconds IS 1000000:
          TIMER tim:
          INT t:
          SEQ
            tim ? t
            tim ? AFTER t PLUS (n*seconds)
          --}}}
          --{{{  say ready to synchronise
          SEQ
            claim.semaphore (out.s)
            out.int (id, 0, out)
            out.string (" ready to synchronise*c*n", 0, out)
            release.semaphore (out.s)
          --}}}
          synchronise.barrier (b)
          --{{{  tell the world
          SEQ
            claim.semaphore (out.s)
            out.string ("==> ", 40, out)
            out.int (id, 0, out)
            out.string (" over the barrier ...*c*n", 0, out)
            release.semaphore (out.s)
          --}}}
          n := (n.clients + 1) - n
    --}}}
  :
  --}}}
  
  VAL INT n.clients IS 10:
  
  --{{{  SHARED UBARRIER
  UBARRIER b:
  #PRAGMA SHARED b
  --}}}
  
  SEQ
    --{{{  COMMENT initialise
    --SEQ
      --initialise.semaphore (screen.s, 1)
      --initialise.barrier (e, n.clients)
    --}}}
    --{{{  initialise
    SEQ
      initialise.semaphore (screen.s, 1)
      initialise.barrier (b, n.clients)
    --}}}
    --{{{  client network (serviced by the screen channel)
    PAR n = 0 FOR n.clients
      client (n + 1, n.clients, b, screen.s, screen)
    --}}}
  --}}}
:
