--
--	Bucket demonstration
--	Copyright (C) 1996  P.H. Welch
--
--	This program is free software; you can redistribute it and/or modify
--	it under the terms of the GNU General Public License as published by
--	the Free Software Foundation; either version 2 of the License, or
--	(at your option) any later version.
--
--	This program is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	GNU General Public License for more details.
--
--	You should have received a copy of the GNU General Public License
--	along with this program; if not, write to the Free Software
--	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
--

#INCLUDE "semaphore.module"
#INCLUDE "bucket.module"
#INCLUDE "course.module"

PROC new.bucket.test (CHAN OF BYTE keyboard, screen, error)
  --{{{  
  
  --{{{  SHARED screen
  #PRAGMA SHARED screen
  
  SEMAPHORE screen.s:
  #PRAGMA SHARED screen.s
  --}}}
  
  --{{{  client
  PROC client (VAL INT id, BUCKET b,
               SEMAPHORE out.s, CHAN OF BYTE out)
    --{{{  
    WHILE TRUE
      SEQ
        --{{{  wait id seconds
        VAL INT seconds IS 1000000:
        TIMER tim:
        INT t:
        SEQ
          tim ? t
          tim ? AFTER t PLUS (id*seconds)
        --}}}
        --{{{  say we are ready to synchronise
        SEQ
          claim.semaphore (out.s)
          out.int (id, 0, out)
          out.string (" falling into bucket*c*n", 0, out)
          release.semaphore (out.s)
        --}}}
        fall.into.bucket (b)
        --{{{  tell the world we are back
        SEQ
          claim.semaphore (out.s)
          out.string ("==> ", 40, out)
          out.int (id, 0, out)
          out.string (" flushed ...*c*n", 0, out)
          release.semaphore (out.s)
        --}}}
    --}}}
  :
  --}}}
  
  --{{{  flusher
  PROC flusher (CHAN OF BYTE in, BUCKET b)
    --{{{  
    WHILE TRUE
      SEQ
        --{{{  wait for signal
        BYTE ch:
        in ? ch
        --}}}
        flush.bucket (b)
    --}}}
  :
  --}}}
  
  VAL INT n.clients IS 10:
  
  --{{{  SHARED BUCKET b
  BUCKET b:
  #PRAGMA SHARED b
  --}}}
  
  SEQ
    --{{{  explain
    out.string ("*nPress a key to flush the bucket ...*n*n", 0, screen)
    --}}}
    --{{{  initialise
    SEQ
      initialise.semaphore (screen.s, 1)
      initialise.bucket (b)
    --}}}
    --{{{  client-flusher network
    PAR
      PAR n = 0 FOR n.clients
        client (n + 1, b, screen.s, screen)
      flusher (keyboard, b)
    --}}}
  
  --}}}
:
