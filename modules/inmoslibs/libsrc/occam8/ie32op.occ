--
--	Inmos Libraries
--	Copyright (C) 1988, 1989, 1990, 1991, 1993  Inmos Limited
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--	You should have received a copy of the GNU Lesser General Public
--	License along with this library; if not, write to the Free Software
--	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
--

--** @module occam8

#IF (TARGET.BITS.PER.WORD > 16)

--{{{  #options and #comments
#OPTION "E V"  -- no compiler libs, no vector space
#COMMENT "TA compiler library, V1.3 06/04/90"
#PRAGMA LINKAGE  -- prioritised text section
#COMMENT "(c) Copyright INMOS Limited 1988"
--}}}

#PRAGMA TRANSLATE IEEE32OP "IEEE32OP%O"

#INCLUDE "realvals.inc"

--{{{  IEEE32OP   -- TA
BOOL, REAL32 FUNCTION IEEE32OP (VAL REAL32 X, VAL INT RoundMode, Op,
                                VAL REAL32 Yp)

  --{{{  history
  -- Beta-2 (27feb87)
  -- Range checking of Op and RoundMode added in halt & stop modes 16-sep-87
  -- V1.1, 21-Feb-89
  -- V1.2, 24-Feb-89
  -- V1.3, 6-Apr-90 SRH
  --}}}

  BOOL   Error :
  REAL32 Result:
  VALOF
    #INCLUDE "nan32.inc"
    --{{{  
    INT Result RETYPES Result :
    VAL INT X RETYPES X :
    VAL INT Yp RETYPES Yp :
    --{{{  IEEE Single length constants for 32 bit implementation
    VAL RealExpSh     IS        23 :
    VAL RealInf       IS #7F800000 :
    VAL BiggestFinite IS #7F7FFFFF :
    --}}}
    --{{{  comment/variables
    --compute floating point value :-
    --  Result : destination for result
    --  X      : left hand operand
    --  Op     : operation (Add, Sub, Mul, Div)
    --         : + 4 * Rounding Mode (RN, RZ, RP, RM)
    --  Y      : right hand operand (will be copied to local).
    
    INT Xexp, Xfrac, Yexp, Yfrac, Carry, Guard, Places, Ans, Y :
    VAL INT Sign IS SignBit :
    --}}}
    SEQ
      --{{{  range check
      IF
        ((Op < 0) OR (Op > 3)) OR ((RoundMode < 0) OR (RoundMode > 3))
          CAUSEERROR ()
        TRUE
          SKIP
      --}}}
      --{{{  unpack operands and determine special cases
      --{{{  unpack operands
      IF
        Op = Sub                          --get minus Y
          Y := Yp >< Sign
        TRUE                              --use Y
          Y := Yp
      Xexp,  Xfrac := SHIFTLEFT ( 0,  X << 1,  RealShift)
      Xfrac := Xfrac >> 1                 --room for leading bit
      Yexp,  Yfrac := SHIFTLEFT ( 0,  Y << 1,  RealShift)
      Yfrac := Yfrac >> 1
      --}}}
      --{{{  determine special cases
      Carry := 0                          --assume not normal case
      Error := FALSE                      --assume no Error
      IF
        (Xexp <> RealExp) AND (Yexp <> RealExp)
          --{{{  normal or zeros
          IF
            (Xexp <> 0) AND (Yexp <> 0)   --normal case
              --{{{  
              SEQ
                Carry := 1
                Xfrac := Xfrac \/ Sign
                Yfrac := Yfrac \/ Sign
              --}}}
            (Xexp \/ Xfrac) = 0           --X is zero
              --{{{  
              IF
                (Yexp \/ Yfrac) = 0     --both zero
                  IF
                    Op < Mul            --add/sub
                      IF
                        RoundMode = RM
                          Ans := X \/ Y
                        TRUE
                          Ans := X /\ Y
                    Op = Mul
                      Ans := X >< Y     --signed zero
                    TRUE                --div
                      SEQ
                        Ans := ZeroZeroDivNaN.32
                        Error := TRUE
                Op < Mul                --result is Y
                  Ans := Y
                TRUE                    --div or mul
                  Ans := (X >< Y) /\ Sign--zero
              --}}}
            (Yexp \/ Yfrac) = 0           --Y is zero
              --{{{  
              IF
                Op < Mul                  --add/sub
                  Ans := X
                Op = Mul
                  Ans := (X >< Y) /\ Sign --zero
                TRUE
                  SEQ
                    Ans := ((X >< Y) /\ Sign) \/ RealInf  --infinity
                    Error := TRUE
              --}}}
            TRUE                          --one or other denormalised
              --{{{  
              SEQ
                Carry := 1                --work to do
                IF
                  Xexp <> 0               --set leading bit
                    Xfrac := Xfrac \/ Sign
                  TRUE                    --set correct exponent
                    Xexp := 1
                IF
                  Yexp <> 0
                    Yfrac := Yfrac \/ Sign
                  TRUE
                    Yexp := 1
              --}}}
          --}}}
        TRUE                              -- at least one is inf or NaN
          SEQ
            Error := TRUE
            IF
              (Xexp = RealExp) AND (Yexp = RealExp)
                --{{{  both inf or NaN
                IF
                  (Xfrac \/ Yfrac) <> 0         --one or both NaN
                    SEQ
                      IF
                        Yfrac > Xfrac             --return larger NaN as in F4
                          Ans := Y
                        TRUE
                          Ans := X
                      IF
                        Op < Mul
                          SKIP
                        TRUE
                          Ans := (Ans /\ (~Sign)) \/ ((X >< Y) /\ Sign)  -- fix sign
                  (Op < Mul) AND (((X >< Y) /\ Sign) = 0)--add/sub both same inf
                    Ans := X
                  Op = Mul
                    Ans := ((X >< Y) /\ Sign) \/ RealInf--infinity
                  TRUE                          --add/sub/div and inf inf
                    IF
                      Op = Div
                        Ans := InfInfDivNaN.32
                      TRUE
                        Ans := AddSubInfInfNaN.32
                --}}}
              Xexp = RealExp
                --{{{  X infinity or NaN
                IF
                  (Op < Mul)    -- nan +- finite or inf +- finite
                    Ans := X
                  (Xfrac <> 0)  -- nan */ finite = nan with sign
                    Ans := X >< (Y /\ Sign)
                  Op = Mul
                    IF
                      (Yexp \/ Yfrac) = 0       --mul by zero
                        Ans := ZeroInfMulNaN.32
                      TRUE                      --inf times normal
                        Ans := ((X >< Y) /\ Sign) \/ RealInf--infinity
                  TRUE                          --div
                    Ans := ((X >< Y) /\ Sign) \/ RealInf--infinity
                --}}}
              Yfrac <> 0
                --{{{  Y is NaN
                IF
                  Op < Mul  -- finite +- nan
                    Ans := Y
                  TRUE      -- finite */ nan
                    Ans := Y >< (X /\ Sign)
                --}}}
              TRUE
                --{{{  Y is infinity
                IF
                  Op < Mul                      --add/sub
                    Ans := Y
                  Op = Mul
                    IF
                      (Xexp \/ Xfrac) = 0       --mul by zero
                        Ans := ZeroInfMulNaN.32
                      TRUE                      --inf times normal
                        Ans := ((X >< Y) /\ Sign) \/ RealInf--infinity
                  TRUE                          --div
                    Ans := (X >< Y) /\ Sign     --zero
                --}}}
      --}}}
      --}}}
      --{{{  evaluate
      #PRAGMA DEFINED Ans
      IF
        Carry = 0
          --{{{  Answer set up
          Result := Ans
          --}}}
        TRUE
          SEQ
            IF
              Op < Mul
                --{{{  add/sub
                SEQ                             --normal case
                  --{{{  Align fractions
                  Places := Xexp - Yexp
                  IF
                    Places = 0                  --correctly aligned
                      Guard := 0
                    Places > BitsPerWord
                      SEQ
                        Yfrac := 0
                        Guard := 1      -- Yfrac <> 0
                    Places > 0                  --shift Y
                      Yfrac,  Guard := SHIFTRIGHT ( Yfrac,  0,  Places)
                    Places < (-BitsPerWord)
                      SEQ
                        Xfrac := 0
                        Guard := 1      -- Xfrac <> 0
                        Xexp := Yexp
                    TRUE                        --shift X
                      SEQ
                        Xfrac,  Guard := SHIFTRIGHT ( Xfrac,  0,  -Places)
                        Xexp := Yexp            --set largest exp
                  --}}}
                  IF
                    ((X >< Y) /\ Sign) = 0    --add magnitudes
                      --{{{  Add magnitudes
                      SEQ
                        Ans := X /\ Sign              --get sign
                        Carry,  Xfrac := LONGSUM ( Xfrac,  Yfrac,  0)
                        IF
                          Carry <> 0            --inc exponent
                            SEQ
                              Xexp := Xexp + 1
                              IF
                                Xexp = RealExp  --OVERFLOW
                                  SKIP
                                TRUE
                                  SEQ
                                    Xfrac,  Guard := SHIFTRIGHT ( Xfrac,  Guard,  1)
                                    Xfrac := Xfrac \/ Sign
                          Xexp = 1              --check normalisation
                            IF
                              (Xfrac /\ Sign) = 0
                                Xexp := 0       --still denormalised
                              TRUE
                                SKIP            --not denormalised
                          TRUE
                            SKIP
                      --}}}
                    TRUE                        --subtract magnitudes
                      --{{{  Subtract magnitudes
                      SEQ
                        Carry,  Guard := LONGDIFF ( 0,  Guard,  0)
                        Places,  Ans := LONGDIFF ( Xfrac,  Yfrac,  Carry)
                        IF
                          Places = 0            --correct
                            SEQ
                              Xfrac := Ans
                              Ans := X /\ Sign              --get sign
                          TRUE                  --must negate
                            SEQ
                              Carry,  Xfrac := LONGDIFF ( Yfrac,  Xfrac,  Carry)
                              Ans := Y /\ Sign  --flip sign of answer
                        IF
                          (Xfrac /\ Sign) <> 0  --normalised
                            SKIP
                          (Xfrac \/ Guard) = 0  --result is zero
                            SEQ
                              IF
                                RoundMode = RM
                                  Ans := Sign   -- -0 in RM
                                TRUE
                                  Ans := 0      -- otherwise +0
                              Xexp := 0
                          Xexp > 1              --not yet denormalised
                            SEQ
                              Places,  Xfrac,  Guard := NORMALISE ( Xfrac,  Guard)
                              Xexp := Xexp - Places
                              IF
                                Xexp > 0        --still normal
                                  SKIP
                                TRUE            --gone denormalised
                                  SEQ
                                    Xfrac,  Guard := SHIFTRIGHT ( Xfrac,  Guard,  1 - Xexp)
                                    Xexp := 0
                          TRUE                 --already denormalised
                            Xexp := 0
                      --}}}
                --}}}
              TRUE
                --{{{  mul/div
                SEQ
                  Ans := (X >< Y) /\ Sign          --get sign of answer
                  IF
                    --{{{  Multiply
                    Op = Mul                       --do multiply
                      SEQ
                        Xfrac,  Guard := LONGPROD ( Xfrac,  Yfrac,  0)
                        Xexp := (Xexp + Yexp) + (1 - RealXcess)
                    --}}}
                    --{{{  Divide
                    TRUE                           --do divide
                      SEQ
                        Places,  Yfrac,  Carry := NORMALISE ( Yfrac,  0)
                        Yexp := Yexp - Places      --ensure normal Y
                        Places,  Xfrac,  Carry := NORMALISE ( Xfrac,  0)
                        Xfrac,  Carry := LONGDIV ( Xfrac >> 1,  0,  Yfrac)
                        IF
                          Carry = 0
                            Guard := 0
                          TRUE
                            Guard := 1
                        Xexp := (Xexp - Yexp) + (RealXcess - Places)
                    --}}}
                  --{{{  Normalise
                  Places,  Xfrac,  Guard := NORMALISE ( Xfrac,  Guard)
                  Xexp := Xexp - Places
                  IF
                    Xexp >= RealExp                --overflow
                      SKIP
                    Xexp > 0                       --correct range
                      SKIP
                    TRUE                           --denormalised
                      SEQ
                        Places := 1 - Xexp
                        IF
                          Places > BitsPerWord
                            SEQ
                              Guard := Guard \/ Xfrac  -- guard everything
                              Xfrac := 0
                          TRUE
                            SEQ
                              Carry := Guard             --don't lose
                              Xfrac,  Guard := SHIFTRIGHT ( Xfrac,  Guard,  Places)
                              Guard := Carry \/ Guard
                        Xexp := 0
                  --}}}
                --}}}
            --{{{  round & pack result
            --ROUND & PACK RESULT--
            IF
              Xexp < RealExp                       --still in range
                SEQ
                  Places := Xfrac /\ RealExp       --get round bits
                  Xexp,  Xfrac := SHIFTRIGHT ( Xexp,  Xfrac << 1,  RealShift + 1)
                  IF
                    RoundMode = RN
                      --{{{  RN rounding as before
                      IF
                        (Places /\ RealRBit) = 0       --round bit not set
                          SKIP
                        ((Guard \/ (Places /\ RealXcess)) \/ (Xfrac /\ 1)) = 0
                          SKIP                         --round down
                        TRUE                           --round up/even
                          Xfrac := Xfrac + 1
                      --}}}
                    ((RoundMode = RM) AND (Ans = 0)) OR
                      (((RoundMode = RP) AND (Ans <> 0)) OR
                        (RoundMode = RZ))
                      SKIP -- truncate
                    TRUE
                      IF
                        (Places \/ Guard) = 0
                          SKIP  -- no round up
                        TRUE
                          Xfrac := Xfrac + 1
                  Error := (Xfrac = RealInf)  -- OVERFLOW
                  Result := Ans \/ Xfrac
              ((RoundMode = RM) AND (Ans = 0)) OR
                (((RoundMode = RP) AND (Ans <> 0)) OR
                  (RoundMode = RZ))
                SEQ
                  Result := Ans \/ BiggestFinite
                  Error := TRUE
              TRUE                                 --OVERFLOW to infinity
                SEQ
                  Result := Ans \/ RealInf
                  Error := TRUE
            --}}}
      --}}}
    --}}}
    RESULT Error, Result
:
--}}}

#ENDIF
