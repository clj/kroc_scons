--
--	Inmos Libraries
--	Copyright (C) 1988, 1989, 1990, 1991, 1993  Inmos Limited
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--	You should have received a copy of the GNU Lesser General Public
--	License along with this library; if not, write to the Free Software
--	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
--

--** @module streamio

#OPTION "E"  -- no compliler libs
#COMMENT "Stream i/o library, V1.1, 14/06/90"
#COMMENT "(c) Copyright INMOS Limited, 1988"
#INCLUDE "hostio.inc"
#INCLUDE "streamio.inc"
#USE "hostio.lib"
--* Convert output in screen stream protocol to output using TVI920
-- screen conventions.
--
-- Receipt of st.endstream will terminate this procedure.
--
-- @param fs from server
-- @param ts to server
-- @param scrn for input
PROC so.scrstream.to.TVI920 (CHAN OF SP fs, ts, CHAN OF SS scrn)
  --{{{  history
  -- Introduced st.help and st.initialise tags into the
  -- CASE input.  New version is 1.1 ( old version was
  -- 0.01, 23-Dec-88 ); 14-June-90 SRH
  --}}}

  VAL esc  IS 27(BYTE):
  VAL bell IS  7(BYTE):
  VAL bs   IS  8(BYTE):
  VAL ff   IS 12(BYTE):
  VAL vt   IS 11(BYTE):
  VAL lf   IS 10(BYTE):
  BOOL going:
  SEQ
    --{{{  body
    going := TRUE
    WHILE going
      SEQ
        scrn ? CASE
          [st.max.string.size]BYTE str:
          INT32 len:
          st.out.string; len::str
            so.write.string (fs, ts, [str FROM 0 FOR INT len])
          BYTE st.char :
          st.out.byte; st.char
            so.write.char (fs, ts, st.char)
          BYTE st.char :
          st.ins.char; st.char
            so.write.string (fs, ts, [esc, 'Q', st.char])
          INT32 x :
          st.out.int; x
            so.write.char (fs, ts, BYTE x)
          INT32 x,y:
          st.goto; x; y
            so.write.string (fs, ts, [esc, '=',
                             BYTE ((INT y) + 32), BYTE ((INT x) + 32)])
          st.reset
            SKIP
          st.up
            so.write.char (fs, ts, vt)
          st.down
            so.write.char (fs, ts, lf)
          st.left
            so.write.char (fs, ts, bs)
          st.right
            so.write.char (fs, ts, ff)
          st.del.char
            so.write.string (fs, ts, [esc, 'W'])
          st.clear.eol
            so.write.string (fs, ts, [esc, 'T'])
          st.clear.eos
            so.write.string (fs, ts, [esc, 'Y'])
          st.ins.line
            so.write.string (fs, ts, [esc, 'E'])
          st.del.line
            so.write.string (fs, ts, [esc, 'R'])
          st.beep
            so.write.char (fs, ts, bell)
          st.terminate
            SKIP
          st.help
            SKIP
          st.initialise
            SKIP
          st.key.raw
            SKIP
          st.key.cooked
            SKIP
          st.release
            SKIP
          st.claim
            SKIP
          st.endstream
            going := FALSE
          -- if st.spare is received then something is wrong => STOP
    --}}}
:
