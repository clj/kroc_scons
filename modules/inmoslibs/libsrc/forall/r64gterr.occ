--
--	Inmos Libraries
--	Copyright (C) 1988, 1989, 1990, 1991, 1993  Inmos Limited
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--	You should have received a copy of the GNU Lesser General Public
--	License along with this library; if not, write to the Free Software
--	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
--

#IF (TARGET.BITS.PER.WORD = 32) AND (NOT DEFINED(TARGET.HAS.FPU))

--{{{  #options and #comments
#OPTION "E V"  -- no compiler libs, no vector space
#COMMENT "TA compiler library, V1.1 21/02/89"
#COMMENT "(c) Copyright INMOS Limited 1988"
--}}}

#PRAGMA TRANSLATE REAL64GTERR "REAL64GTERR%CHK"

--{{{  
BOOL FUNCTION REAL64GTERR (VAL REAL64 X, Y)

  -- Beta-2 (27feb87)

  BOOL bool :
  VALOF
    --{{{  
    VAL [2]INT X RETYPES X :
    VAL [2]INT Y RETYPES Y :
    VAL low  IS 0 :
    VAL high IS 1 :
    INT MagX :
    INT MagY :
    SEQ
      VAL DRealInf.high IS #7FF00000 :
      IF
        ((X [high] /\ DRealInf.high) = DRealInf.high) OR
           ((Y [high] /\ DRealInf.high) = DRealInf.high)
          CAUSEERROR()
        TRUE
          SKIP
      MagX := X [high] /\ #7FFFFFFF
      MagY := Y [high] /\ #7FFFFFFF
      IF
        --{{{  X and Y have different signs
        (X [high] >< Y [high]) < 0       -- Still infinities but no NaNs
          --Signs are different hence test Y < 0 and not both 0
          bool := (Y [high] < 0) AND
                  ((((MagX PLUS MagY) \/ X [low]) \/ Y [low]) <> 0)
        --}}}
        --{{{  X and Y both negative
        X [high] < 0
          SEQ
            IF
              MagY = MagX
                --This is the equivalent of an unsigned comparison
                bool := (Y [low] >< #80000000) > (X [low] >< #80000000)
              TRUE
                bool := (MagY > MagX)
        --}}}
        --{{{  TRUE - X and Y both positive
        TRUE
          SEQ
            IF
              MagX = MagY
                --This is the equivalent of an unsigned comparison
                bool := (X [low] >< #80000000) > (Y [low] >< #80000000)
              TRUE
                bool := (MagX > MagY)
        --}}}
    --}}}
    RESULT bool
:
--}}}

#ENDIF


#IF (TARGET.BITS.PER.WORD = 16)

--{{{  #options and #comments
#OPTION "E V"  -- no compiler libs, no vector space
#COMMENT "T2 compiler library, V1.1 21/02/89"
#COMMENT "(c) Copyright INMOS Limited 1988"
--}}}

#PRAGMA TRANSLATE REAL64GTERR "REAL64GTERR%CHK"

--{{{  
BOOL FUNCTION REAL64GTERR (VAL REAL64 X, Y)

  -- Beta-3 (11may87)  Function version (10 Jun 87)

  BOOL bool :
  VALOF
    VAL [4]INT X RETYPES X :
    VAL [4]INT Y RETYPES Y :
    INT MagX, MagY :
    SEQ
      VAL INT DRealInf.high IS #7FF0 :
      IF
        ((X[3] /\ DRealInf.high) = DRealInf.high) OR
            ((Y[3] /\ DRealInf.high) = DRealInf.high)
          CAUSEERROR()
        TRUE
          SKIP
      MagX := X [3] /\ #7FFF
      MagY := Y [3] /\ #7FFF
      IF
        --{{{  X and Y have different signs
        (X [3] >< Y [3]) < 0       -- Still infinities but no NaNs
          --Signs are different hence test Y < 0 and not both 0
          bool := (Y [3] < 0) AND
                   (((MagX PLUS MagY) \/
                    (((X [2] \/ X [1]) \/ X [0]) \/
                              ((Y [2] \/ Y [1]) \/ Y [0]))) <> 0)
        --}}}
        --{{{  X and Y both negative
        X [3] < 0
          INT Dump,Carry :
          SEQ
            Carry, Dump := LONGDIFF (X[0], Y[0], 0)
            Carry, Dump := LONGDIFF (X[1], Y[1], Carry)
            Carry, Dump := LONGDIFF (X[2], Y[2], Carry)
            Carry, Dump := LONGDIFF (MagX, MagY, Carry)
            bool := (Dump < 0)    -- i.e. Mag Y > Mag X
        --}}}
        --{{{  TRUE - X and Y both positive
        TRUE
          INT Dump,Carry :
          SEQ
            Carry, Dump := LONGDIFF (Y[0], X[0], 0)
            Carry, Dump := LONGDIFF (Y[1], X[1], Carry)
            Carry, Dump := LONGDIFF (Y[2], X[2], Carry)
            Carry, Dump := LONGDIFF (MagY, MagX, Carry)
            bool := (Dump < 0)    -- i.e. Mag X > Mag Y
        --}}}
    RESULT bool
:
--}}}

#ENDIF
