--
--	Inmos Libraries
--	Copyright (C) 1988, 1989, 1990, 1991, 1993  Inmos Limited
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation; either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--	You should have received a copy of the GNU Lesser General Public
--	License along with this library; if not, write to the Free Software
--	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
--

--** @module hostio

#COMMENT "Host i/o library, V1.3, 8/02/91"
#COMMENT "(c) Copyright INMOS Limited 1989"
#INCLUDE "hostio.inc"
--{{{  history
-- V1.0 10-Mar-89
-- Introduced a fairer implementation, made it an error if from.user and
-- to.user are of unequal sizes, and made SIZE queue = 0 valid; V1.1
-- 29-Jun-90 SRH
-- Improved the efficiency of the implementation.  For further information
-- see "Carefully scheduled selection with ALT" by G Jones, in occam user
-- group newsletter, no. 10 January 1989, pp17 - 23; V1.2 4-Feb-91 SRH
-- Improved the efficiency even more by replacing the one REM of V1.2 by
-- an IF, with thanks to R. Peel for the suggestion; V1.3 8-Feb-91 SRH
--}}}
--{{{  sp.overlapped.multiplexor
--* Multiplex any number of pairs of SP protocol channels onto a single
-- pair of SP protocol channels, where the multiplexing is overlapped
-- so that output through this routine can continue independently of
-- the receipt of replies.
--
-- It is an error if the size of from.user is different to that of
-- to.user. It is permissible for the size of from.user ( and hence
-- to.user ) to be zero. The maximum number of bytes that can be
-- channelled through this routine in each direction is
-- sp.max.packet.data.size. It is assumed that replies for messages are
-- received in the same sequence as the messages are sent. To attempt
-- some degree of fairness, there is a heirarchy of priorities from
-- from.user with index i for SIZE from.user, using modulo SIZE
-- from.user on the indexes, with i starting from 0 and incrementing by
-- one after each input accepted.
--
-- @param fs input to this routine
-- @param ts output from this routine
-- @param from.user input to this routine
-- @param to.user output from this routine
-- @param stopper input to this routine: TRUE or FALSE received on this
--   channel will cause the routine to stop listening on the from.user
--   channels and wait until all replies have been received before
--   terminating; stopper has the highest priority amongst the channels
-- @param queue the values in queue on entry are irrelevant but the
--   size of it is the maximum number of communications that can be
--   output through this routine before a reply is received and to be
--   passed back; the values in queue on termination are equally
--   irrelevant; queue is used for storage only; if it is of zero
--   length then no communication can be done and the routine simply
--   waits on stopper for an input which immediately causes termination
--   of this routine
PROC sp.overlapped.multiplexor (CHAN OF SP fs, ts,
                                []CHAN OF SP from.user, to.user,
                                CHAN OF BOOL stopper,
                                []INT queue)
  --{{{  more info
  --           The idea is that the ts channel will arrive at the server, after
  --           perhaps having gone through other processes, and that the fs
  --           channel has come from the server, perhaps via other processes.
  --           This will reduce latency time in communications if a process
  --           has to talk to the server through other processes.
  --}}}

  IF
    ( SIZE from.user ) <> ( SIZE to.user )
      STOP
    ( ( SIZE from.user ) = 0 ) OR ( ( SIZE queue ) = 0 )
      BOOL stop :
      stopper ? stop
    TRUE
      CHAN OF INT stop.replies, done.one.reply, reply.to.channel :
      PAR
        --{{{  from user to server
        [sp.max.packet.data.size]BYTE buffer :
        INT16 len :
        BOOL  running :
        INT   replies.outstanding, first :
        VAL INT modulus IS (SIZE from.user) :
        VAL INT modulus.minus.1 IS (modulus - 1) :
        SEQ
          running := TRUE
          replies.outstanding := 0
          --{{{  copy to server until stopped, counting the replies
          first := 0
          WHILE running
            PRI ALT
              stopper ? running
                running := FALSE
          
              INT dummy :
              done.one.reply ? dummy
                replies.outstanding := replies.outstanding - 1
          
              --{{{  V1.1 code for the from.user guard
              --PRI ALT i = first FOR (SIZE from.user)
              --  VAL index IS ( i REM (SIZE from.user) ) :
              --  from.user[ index ] ? len :: buffer
              --    SEQ
              --      PAR
              --        ts ! len :: buffer
              --        reply.to.channel ! index
              --      first := ( first + 1 ) REM (SIZE from.user)
              --      replies.outstanding := replies.outstanding + 1
              --}}}
          
              --{{{  V1.2/V1.3 code for the from.user guard
              PRI ALT
                PRI ALT index = first FOR ( (SIZE from.user) - first )
                  from.user[ index ] ? len :: buffer
                    SEQ
                      PAR
                        ts ! len :: buffer
                        reply.to.channel ! index
                      --first := ( first + 1 ) REM (SIZE from.user)
                      IF
                        first = modulus.minus.1
                          first := 0
                        TRUE
                          first := first + 1
                      replies.outstanding := replies.outstanding + 1
                PRI ALT index = 0 FOR first
                  from.user[ index ] ? len :: buffer
                    SEQ
                      PAR
                        ts ! len :: buffer
                        reply.to.channel ! index
                      --first := ( first + 1 ) REM (SIZE from.user)
                      IF
                        first = modulus.minus.1
                          first := 0
                        TRUE
                          first := first + 1
                      replies.outstanding := replies.outstanding + 1
              --}}}
          --}}}copy to server until stopped, counting the replies
          --{{{  wait for any outstanding replies
          SEQ i = 0 FOR replies.outstanding
            INT any :
            done.one.reply ? any
          --}}}wait for any outstanding replies
          stop.replies ! 0
        --}}}from user to server
        --{{{  from server to user
        [sp.max.packet.data.size]BYTE buffer :
        INT16 len :
        INT   fptr, bptr : -- queue pointers
        BOOL  running, queue.not.full :
        SEQ
          running := TRUE
          fptr := 0
          bptr := 0
          queue.not.full := TRUE
          --{{{  copy from server until stopped
          WHILE running
            PRI ALT
              queue.not.full & reply.to.channel ? queue [bptr]
                SEQ
                  bptr := (bptr + 1) \ (SIZE queue)
                  queue.not.full := bptr <> fptr
          
              fs ? len :: buffer
                PAR
                  done.one.reply ! 0  -- anything
                  SEQ
                    to.user [queue[fptr]] ! len :: buffer
                    fptr := (fptr + 1) \ (SIZE queue)
                    PRI ALT    -- to prevent deadlock if sender has just input
                      reply.to.channel ? queue [bptr]
                        SEQ
                          bptr := (bptr + 1) \ (SIZE queue)
                          queue.not.full := bptr <> fptr
                      TRUE & SKIP
                        queue.not.full := TRUE
          
              INT any :
              stop.replies ? any
                running := FALSE
          --}}}copy from server until stopped
        --}}}from server to user
:
--}}}sp.overlapped.multiplexor
--{{{  so.overlapped.multiplexor
PROC so.overlapped.multiplexor (CHAN OF SP fs, ts,
                                []CHAN OF SP from.user, to.user,
                                CHAN OF BOOL stopper,
                                []INT queue)

  sp.overlapped.multiplexor (fs, ts, from.user, to.user, stopper, queue)
:
--}}}so.overlapped.multiplexor
