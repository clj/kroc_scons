#INCLUDE "course.module"

--{{{  COMMENT documentation
--
--The integrate process:
--
-->               ---------------
-->               |             |
-->          in   |             |   out
-->         ---->--  integrate  -->-----
-->               |             |
-->               |             |
-->               ---------------
--
--transforms the input data stream [a, b, c, ...] into the output data
--stream [a, a+b, a+b+c, ...].
--
--The differentiate process is defined to be such that it undoes the work
--of integrate when placed in series with it -- i.e. that the network:
--
-->               ---------------       -------------------
-->               |             |       |                 |
-->          in   |             |       |                 |   out
-->         ---->--  integrate  ---->----  differentiate  -->-----
-->               |             |       |                 |
-->               |             |       |                 |
-->               ---------------       -------------------
--
--transforms the input data stream [a, b, c, ...] into the output data
--stream [a, b, c, ...].  Your task is to implement differentiate in the
--same style as the implementation of integrate -- i.e. as a network of
--simple components of the level of those in the demo_cycles.occ library.
--
--Hint: you may need a minus process that is similar in nature to the
--plus process in demo_cycles.occ.  Another hint: differentiate can be
--built from one instance of this minus and two other processes already
--in demo_cycles.occ.
--
--A test-rig that demonstrates correct functioning for your differentiate
--can be built by piping the output from numbers (from demo_cycles.occ)
--into integrate and then into your differentiate.  The output from this
--should be the same as the output from numbers alone -- i.e. the natural
--numbers (make sure you haven't lost the first zero).  This output needs
--to be piped into something like tabulate.int (to turn the INT stream
--into a readable BYTE stream) and connected to the external screen channel
--of q2.
--
--So, implement the body of q2 by connecting up instances of numbers,
--integrate, differentiate and tabulate.int as described.
--
--Do not type in declarations for any PROCs defined in /usr/work/kroc/libsrc
--(files demo_cycles.occ and demo_nets.occ) as you already have access to them
--courtesy of the #USE "course.lib" directive at the start of this file.
--However, layout.max.chans (should you wish to use it) is not in those
--libraries and is therefore included below for convenience.
--
--}}}



-- declare your minus and differentiate here



--* This pauses execution of the invoking process by delay microseconds.
--* Other processes are unaffected.
--*
--* @param delay : the length of the pause (in microseconds)
--*
PROC pause (VAL INT delay)
  TIMER tim:
  INT t:
  SEQ
    tim ? t
    tim ? AFTER t PLUS delay
:

--* This inputs a number and tabulates it on a single line of output.
--* Then, it pauses for delay microseconds.  It repeats this for ever.
--*
--* @param delay : the length of the pause (in microseconds)
--*
PROC print.stream (VAL INT delay, CHAN INT in?, CHAN BYTE out!)
  WHILE TRUE
    INT n:
    SEQ
      in ? n
      out.int (n, 10, out!)             -- out.int is from "course.lib"
      out.string ("*c*n", 0, out!)      -- out.string is from "course.lib"
      pause (delay)
:

PROC q2 (CHAN BYTE keyboard?, screen!, error!)
  SKIP  -- replace this!
:

