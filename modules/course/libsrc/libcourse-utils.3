.\" KRoC course library manual page.  Last updated 30/12/2005 Fred Barnes  <frmb@kent.ac.uk>
.TH LIBCOURSE-UTILS "3" "December 2005" "kroc 1.4.0" KRoC
.SH NAME
out.repeat, out.ch, out.string, out.byte, out.int, out.hex, out.bool, out.yes.no,
in.skip, in.digit, in.string, in.bool, in.byte, in.int,
ask.string, ask.bool, ask.byte, ask.int,
cursor.x.y, cursor.up, cursor.down, cursor.right, cursor.left, cursor.visible, cursor.invisible,
erase.eol, erase.bol, erase.line, erase.eos, erase.screen,
black.hole, flush, pos.int, pos.yes.no
\- KRoC course library functions
.SH SYNOPSIS
.B #USE \fB"course.lib\fB"\fR
.br
.B kroc -lcourse
.PP
.BI "PROC out.repeat (VAL BYTE " ch ", VAL INT " n ", CHAN BYTE " out "!)"
.br
.BI "PROC out.ch (VAL BYTE " ch ", VAL INT " field ", CHAN BYTE " out "!)"
.br
.BI "PROC out.string (VAL []BYTE " s ", VAL INT " field ", CHAN BYTE " out "!)"
.br
.BI "PROC out.byte (VAL BYTE " b ", VAL INT " field ", CHAN BYTE " out "!)"
.br
.BI "PROC out.int (VAL INT " n ", VAL INT " field ", CHAN BYTE " out "!)"
.br
.BI "PROC out.hex (VAL INT " n ", VAL INT " field ", CHAN BYTE " out "!)"
.br
.BI "PROC out.bool (VAL BOOL " b ", VAL INT " field ", CHAN BYTE " out "!)"
.br
.BI "PROC out.yes.no (VAL BOOL " b ", VAL INT " field ", CHAN BYTE " out "!)"
.PP

.BI "PROC in.skip (BYTE " ch ", CHAN BYTE " in "?)"
.br
.BI "PROC in.digit (BYTE " d ", CHAN BYTE " in "?, " out "!)"
.br
.BI "PROC in.string ([]BYTE " s ", INT " length ", VAL INT " max ", CHAN BYTE " in "?, " out "!)"
.br
.BI "PROC in.bool (BOOL " b ", CHAN BYTE " in "?, " out "!)"
.br
.BI "PROC in.byte (BYTE " b ", VAL INT " max ", CHAN BYTE " in "?, " out "!)"
.br
.BI "PROC in.int (INT " n ", VAL INT " max ", CHAN BYTE " in "?, " out "!)"
.PP

.BI "PROC ask.string (VAL []BYTE " prompt ", []BYTE " s ", INT " length ", VAL INT " max ", CHAN BYTE " in "?, " out "!)"
.br
.BI "PROC ask.bool (VAL []BYTE " prompt ", BOOL " b ", CHAN BYTE " in "?, " out "!)"
.br
.BI "PROC ask.byte (VAL []BYTE " prompt ", BYTE " b ", VAL INT " max ", CHAN BYTE " in "?, " out "!)"
.br
.BI "PROC ask.int (VAL []BYTE " prompt ", INT " n ", VAL INT " max ", CHAN BYTE " in "?, " out "!)"
.PP

.BI "PROC cursor.x.y (VAL BYTE " x ", " y ", CHAN BYTE " out "!)"
.br
.BI "PROC cursor.up (VAL BYTE " n ", CHAN BYTE " out "!)"
.br
.BI "PROC cursor.down (VAL BYTE " n ", CHAN BYTE " out "!)"
.br
.BI "PROC cursor.right (VAL BYTE " n ", CHAN BYTE " out "!)"
.br
.BI "PROC cursor.left (VAL BYTE " n ", CHAN BYTE " out "!)"
.br
.BI "PROC cursor.visible (CHAN BYTE " out "!)"
.br
.BI "PROC cursor.invisible (CHAN BYTE " out "!)"
.PP

.BI "PROC erase.eol (CHAN BYTE " out "!)"
.br
.BI "PROC erase.bol (CHAN BYTE " out "!)"
.br
.BI "PROC erase.line (CHAN BYTE " out "!)"
.br
.BI "PROC erase.eos (CHAN BYTE " out "!)"
.br
.BI "PROC erase.bos (CHAN BYTE " out "!)"
.br
.BI "PROC erase.screen (CHAN BYTE " out "!)"
.PP

.BI "PROC black.hole (CHAN BYTE " in "?)"
.br
.BI "PROC flush (CHAN BYTE " out "!)"
.br
.BI "PROC pos.int (VAL INT " col ", " row ", " n ", " field ", CHAN BYTE " out "!)"
.br
.BI "PROC pos.yes.no (VAL INT " col ", " row ", VAL BOOL " b ", VAL INT " field ", CHAN BYTE " out "!)"
.SH DESCRIPTION
.PP
These PROCs provide basic input and output, interactive input, cursor positioning (for VT220 compatible
terminals), and miscellaneous input/ouput.
.PP

.SH "SIMPLE OUTPUT"
.PP
\fBout.repeat\fR outputs the BYTE \fIch\fR down the channel \fIout\fR, \fIn\fR times.
.PP
\fBout.ch\fR outputs \fIch\fR in a fieldwidth \fIfield\fR down \fIout\fR.  If the fieldwidth is too wide for \fIch\fR, it right-justifies \fIch\fR with
spaces on the left.  If the field is not wide enough, it prints the \fIch\fR anyway.  These rules for fieldwidth are the same as
those used by the Pascal \fBwrite\fR procedure.
.PP
\fBout.string\fR outputs the BYTE array (string) \fIs\fR in fieldwidth \fIfield\fR down the channel \fIout\fR.  See \fBout.ch\fR for a description of \fIfield\fR.
.PP
\fBout.byte\fR outputs the decimal value of \fIb\fR in fieldwidth \fIfield\fR down the channel \fIout\fR.  \fBout.int\fR outputs the decimal value of \fIn\fR in
fieldwidth \fIfield\fR down the channel \fIout\fR.
.PP
\fBout.hex\fR outputs the hexidecimal value of \fIn\fR in fieldwidth \fIfield\fR down the channel \fIout\fR.
At least 9 characters are always sent, including the leading `#'.
.PP
\fBout.bool\fR and \fBout.yes.no\fR output the value of \fIb\fR (as either "TRUE"/"FALSE" or
"yes"/"no" respectively), in fieldwidth \fIfield\fR down the channel \fIout\fR.
.PP
.SH "SIMPLE INPUT"
.PP
\fBin.skip\fR inputs BYTE values from the \fIin\fR channel until a non-space character is input.  The non-space character is returned in \fIch\fR.
.PP
\fBin.digit\fR inputs a digit (BYTE) from the \fIin\fR channel and stores it in \fId\fR.  If a non-digit character is input, a BEL character is output to the \fIout\fR channel.
.PP
\fBin.string\fR inputs a string of up to \fImax\fR characters inputted from the \fIin\fR channel and stores them in \fIs\fR.  Input is terminated with a new-line
or carriage-return, that is not included in \fIs\fR.  The number of characters input is stored in \fIlength\fR, any remaining characters in \fIs\fR are set to NUL.
All characters are echoed on the \fIout\fR channel.  Backspace is handled sensibly.
.PP
\fBin.bool\fR waits for a "y" or "n" character from the \fIin\fR channel, sending a BEL character to \fIout\fR for other characters.  "Y" and "N" are also
accepted.  The BOOL value is returned in \fIb\fR and also output on the \fIout\fR channel as either "yes" or "no" respectively.
.PP
\fBin.byte\fR inputs a BYTE expressed as decimal digits.  Up to \fImax\fR characters are input from \fIin\fR and echoed on \fIout\fR, with backspace handled sensibly.
Input is terminated with a carriage-return, new-line or space.  Values greater than 255 are ignored.
.PP
\fBin.int\fR inputs an INT expressed as decimal digits.  Up to \fImax\fR characters are input from \fIin\fR and echoed on \fIout\fR, with backspace handled sensibly.
Input is terminated with a carriage-return, new-line or space.  The first character may be "+" or "-".  \fBin.int\fR will guard against overflow.
.PP
.SH "INTERACTIVE INPUT"
.PP
\fBask.string\fR outputs the \fIprompt\fR string and waits for input from \fIin\fR of up to \fImax\fR characters (terminated by a carriage-return or new-line) echoing down
\fIout\fR as necessary.  The input string is returned in \fIs\fR with its length in \fIlength\fR, padded on the right with NUL characters if needed.
.PP
\fBask.bool\fR outputs the \fIprompt\fR string and waits for input from \fIin\fR of either a "y" or "n" character (other characters cause BEL to be output to \fIout\fR).
The boolean \fIb\fR is set TRUE or FALSE depending on whether "y" or "n" was received, echoing "yes" or "no" down \fIout\fR respectively.  "Y" and "N" are accepted as "y" and "n".
.PP
\fBask.byte\fR outputs the \fIprompt\fR string and waits for input from \fIin\fR of a properly formatted (decimal) byte.  Up to \fImax\fR input characters are
allowed, terminated by a carriage-return, new-line or space.  The value of the byte is computed and returned in \fIb\fR.  Characters are echoed to the \fIout\fR channel.
.PP
\fBask.int\fR outputs the \fIprompt\fR string and waits for input from \fIin\fR of a properly formatted integer.  Up to \fImax\fR input characters are allowed,
terminated by a carriage-return, new-line or space.  The value of the integer is computed and returned in \fIn\fR.  Characters are echoed to the \fIout\fR channel.
.PP
.SH "VT220 CURSOR CONTROL"
.PP
\fBcursor.x.y\fR outputs a VT220 control sequence down channel \fIout\fR to place the cursor at screen coordinates (\fIx\fR, \fIy\fR).
.PP
\fBcursor.up\fR outputs a VT220 control sequence down channel \fIout\fR to move the cursor up \fIn\fR lines.
.PP
\fBcursor.down\fR outputs a VT220 control sequence down channel \fIout\fR to move the cursor down \fIn\fR lines.
.PP
\fBcursor.left\fR outputs a VT220 control sequence down channel \fIout\fR to move the cursor left \fIn\fR columns.
.PP
\fBcursor.right\fR outputs a VT220 control sequence down channel \fIout\fR to move the cursor right \fIn\fR columns.
.PP
\fBcursor.visible\fR outputs a VT220 control sequence down channel \fIout\fR to make the cursor visible.
.PP
\fBcursor.invisible\fR outputs a VT220 control sequence down channel \fIout\fR to make the cursor invisible.  Note: not all terminals support this.
.PP
.SH "VT220 SCREEN ERASING"
.PP
\fBerase.eol\fR outputs a VT220 control sequence down channel \fIout\fR to erase characters from the current cursor position to the end of the screen line.
.PP
\fBerase.bol\fR outputs a VT220 control sequence down channel \fIout\fR to erase characters from the current cursor position backwards to the start of the line.
.PP
\fBerase.line\fR outputs a VT220 control sequence down channel \fIout\fR to erase all characters on the current line.
.PP
\fBerase.eos\fR outputs a VT220 control sequence down channel \fIout\fR to erase characters from the current cursor position to the end of the screen.
.PP
\fBerase.bos\fR outputs a VT220 control sequence down channel \fIout\fR to erase characters from the current cursor position backwards to the start of the screen.
.PP
\fBerase.screen\fR outputs a VT220 control sequence down channel \fIout\fR to erase all characters from the screen.
.PP
.SH MISCELLANEOUS
.PP
\fBblack.hole\fR inputs characters from \fIin\fR forever.  It is used to mask off unwanted BYTE streams.
.PP
\fBflush\fR is used to flush screen output.  If \fIout\fR is (ultimately) connected to the external "screen" channel (standard-output of the occam program),
this flushes all characters in the screen output buffer, ensuring that they are written to the underlying file-descriptor.
.PP
\fBpos.int\fR outputs a VT220 control sequence down channel \fIout\fR to place the cursor at screen coordinates (\fIcol\fR, \fIrow\fR) and output \fIn\fR
in a fieldwidth of \fIfield\fR.
.PP
\fBpos.yes.no\fR outputs a VT220 control sequence down channel \fIout\fR to place the cursor at screen coordinates (\fIcol\fR, \fIrow\fR) and output \fIb\fR
(as either "yes" or "no") in a fieldwidth of \fIfield\fR.
.PP

.SH AUTHOR
This manual page is maintained by Fred Barnes <frmb@kent.ac.uk>.  The documentation
itself was largely extracted from the library sources.
.SH "SEE ALSO"
kroc(1)
.br
course/examples/test_utils.occ in the KRoC distribution

.SH "REPORTING BUGS"
Please report bugs to <ofa-bugs@kent.ac.uk>

.SH COPYRIGHT
Copyright \(co 1997 P.H.Welch
.PP
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
.PP
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
.PP

