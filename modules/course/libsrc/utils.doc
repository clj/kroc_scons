
#COMMENT "Copyright: P.H.Welch, 1997"

--{{{  out stuff

PROC out.repeat (VAL BYTE ch, VAL INT n, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs `ch' down the channel `out' `n' times.
  --If `n' is negative, nothing happens.
  --}}}

PROC out.ch (VAL BYTE ch, VAL INT field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs `ch' in a fieldwidth `field' down `out'.  If the
  --fieldwidth is too wide for `ch', it right-justifies `ch' with
  --spaces on the left.  If the field is not wide enough, it prints
  --the `ch' anyway.  These rules for fieldwidth are the same as
  --those used by the Pascal `write' procedure.
  --}}}

PROC out.string (VAL []BYTE s, VAL INT field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs `s' in a fieldwidth `field' down `out'.
  --}}}

PROC out.byte (VAL BYTE b, VAL INT field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs `b' in a fieldwidth `field' down `out'.  If the
  --fieldwidth is too wide for `b', it right-justifies `b' with
  --spaces on the left.  If the field is not wide enough, it prints
  --the `b' anyway.  These rules for fieldwidth are the same as
  --those used by the Pascal `write' procedure.
  --}}}

PROC out.int (VAL INT n, VAL INT field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs `n' in a fieldwidth `field' down `out'.  The rules
  --for fieldwidth are as above.
  --}}}

PROC out.bool (VAL BOOL b, VAL INT field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs `b' as the string "TRUE" or "FALSE" in a fieldwidth
  --`field' down `out'.
  --}}}

PROC out.yes.no (VAL BOOL b, VAL INT field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs `b' as the string "yes" or "no" in a fieldwidth
  --`field' down `out'.
  --}}}

PROC flush (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --If `out' is (ultimately) connected to the external stdout or stderr
  --channel, this forces UNIX to flush all outstanding output to that
  --file descriptor.  UNIX normally buffers this character output on a
  --line-by-line basis.
  --}}}

--}}}

--{{{  in stuff

PROC in.skip (BYTE ch, CHAN OF BYTE in)
  --{{{  COMMENT documentation
  --This inputs from `in' until a non-space character is found.  The
  --non-space character is returned in `ch'.
  --}}}

PROC in.digit (BYTE d, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This inputs a digit from `in' into `d'.  Non-digit characters are
  --ignored and the `out' channel is beeped.  The accepted digit is
  --not echoed down `out'.
  --}}}

PROC in.string ([]BYTE s, INT length, VAL INT max, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This inputs a string of up to `max' characters from `in' into `s'.
  --Input is terminated by a carriage-return or new-line (which is not
  --included in `s'.  The number of characters actually input is recorded
  --in `length'.  The string `s' is padded on the right with NULLs if
  --necessary.  All characters are echoed on `out'.  The backspace
  --or delete (ASCII 8 or 127) characters are processed sensibly.
  --}}}

PROC in.bool (BOOL b, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This bleeps down `out' anything other than a "y" or "n" arriving
  --from `in'.  If a "y" arrives, "yes" is echoed down `out' and `b'
  --is set TRUE.  If a "n" arrives, "no" is echoed down `out' and `b'
  --is set FALSE.  It accepts "Y" and "N" for "y" and "n".
  --}}}

PROC in.byte.chars ([]BYTE s, INT length, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This routine is used for inputting a BYTE value expressed as decimal
  --digits.  It inputs a string of up to 3 digits from `in' into `s'.
  --The number of digits input is recorded in `length'.  It works just
  --like `in.string' except that only digits are accepted -- anything else
  --is bleeped.  Input is terminated by a carriage-return, new-line or
  --space (none of which characters are recorded in `s').  [Note: this
  --is a low-level routine used by `in.byte' below.]
  --}}}

INT FUNCTION convert.byte.chars (VAL []BYTE s, VAL INT length)
  --{{{  COMMENT documentation
  --This assumes that `s' has only digits.  It converts that string into
  --an integer and returns it.  It does not guard against for overflow.
  --[Note: this is a low-level routine used by `in.byte' below.]
  --}}}

PROC in.byte (BYTE b, VAL INT max, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This routine is used for inputting a BYTE value expressed as decimal
  --digits.  It inputs a string of up to `max' digits from `in' into `s'.
  --If `max' is more than 3, it is truncated to 3.  Input is terminated
  --by a carriage-return, new-line or space.  Input strings converting
  --to values greater than 255 are rejected.
  --}}}

PROC in.num.chars ([]BYTE s, INT length, VAL INT max, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This inputs a string of up to `max' characters from `in' into `s'.  The
  --number input is recorded in `length'.  It works just like `in.string'
  --except that only digits and "+" or "-" are accepted -- any non-numeric
  --characters are bleeped.  Input is terminated by a carriage-return,
  --new-line or space.  [Note: this is a low-level routine used by `in.int'
  --below.]
  --}}}

BOOL FUNCTION check.num.chars (VAL []BYTE s, VAL INT length)
  --{{{  COMMENT documentation
  --This returns whether the string `s' has the format of a legal integer.
  --It assumes `s' consists only of decimal digits or "+"/"-" symbols
  --(e.g. having been input using `in.num.chars' above).  [Note: this is
  --a low-level routine used by `in.int' below.]
  --}}}

BOOL, INT FUNCTION convert.num.chars (VAL []BYTE s)
  --{{{  COMMENT documentation
  --This assumes that `s' has the format of a legal integer.  It computes
  --that integer and returns it.  It guards against overflow, returning
  --success in the BOOL result.  [Note: this is a low-level routine used
  --by `in.int' below.]
  --}}}

PROC in.int (INT n, VAL INT max, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This routine is used for inputting an INT value expressed as decimal
  --digits.  It inputs a string of up to `max' characters from `in' into `s'.
  --If `max' is more than 20, it is truncated to 20.  The first character
  --may be "+" or "-".  Input is terminated by a carriage-return, new-line
  --or space.  It does guard against overflow.
  --}}}

PROC black.hole (CHAN OF BYTE in)
  --{{{  COMMENT documentation
  --This inputs characters from `in' forever.  It is used to mask off
  --unwanted BYTE streams.
  --}}}

--}}}

--{{{  ask stuff

-- These routines correspond to the routines from in.stuff.  However,
-- the caller supplies a prompt and afterwards a '*c' and '*n' are output.

PROC ask.string (VAL []BYTE prompt, []BYTE s, INT length,
                 VAL INT max, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This outputs the `prompt' string and waits for input from `in' of up
  --to `max' characters (terminated by carriage-return) echoing down
  --`out' as necessary.  The input string is returned in `s' with its
  --length in `length', padding on the right with NULLs if needed.
  --}}}

PROC ask.bool (VAL []BYTE prompt, BOOL b, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This outputs the `prompt' string and waits for input from `in' of
  --either a "y" or "n" character (bleeping all others down `out').
  --The boolean `b' is set TRUE or FALSE depending on whether "y" or
  --"n" was received, echoing "yes" or "no" down `out' respectively.
  --"Y" and "N" are accepted as "y" and "n".
  --}}}

PROC ask.byte (VAL []BYTE prompt, BYTE b, VAL INT max, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This outputs the `prompt' string and waits for input from `in' of a
  --properly formatted (decimal) byte.  Up to `max' input characters are
  --allowed, terminated by a carriage-return, new-line or space.  The value
  --of the byte is computed and returned in `b'.  Echoing takes place down
  --the channel `out'.
  --}}}

PROC ask.int (VAL []BYTE prompt, INT n, VAL INT max, CHAN OF BYTE in, out)
  --{{{  COMMENT documentation
  --This outputs the `prompt' string and waits for input from `in' of a
  --properly formatted integer.  Up to `max' input characters are allowed,
  --terminated by a carriage-return, new-line or space.  The value of the
  --integer is computed and returned in `n'.  Echoing takes place down `out'.
  --}}}

--}}}

--{{{  screen stuff (VT220 protocol)

PROC cursor.x.y (VAL BYTE x, y, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence down channel `out' to place
  --the cursor at screen coordinates (x, y).
  --}}}

PROC cursor.up (VAL BYTE n, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence down channel `out' to move
  --the cursor up `n' positions.
  --}}}

PROC cursor.down (VAL BYTE n, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence down channel `out' to move
  --the cursor down `n' positions.
  --}}}

PROC cursor.right (VAL BYTE n, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence down channel `out' to move
  --the cursor right `n' positions.
  --}}}

PROC cursor.left (VAL BYTE n, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence down channel `out' to move
  --the cursor left `n' positions.
  --}}}

PROC erase.eol (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to erase characters from the
  --current cursor position to the end of the screen line.
  --}}}

PROC erase.bol (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to erase characters from the
  --current cursor position backwards to the start of the line.
  --}}}

PROC erase.line (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to erase all characters on the
  --current cursor line.
  --}}}

PROC erase.eos (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to erase characters from the
  --current cursor position to the end of the screen.
  --}}}

PROC erase.bos (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to erase characters from the
  --current cursor position backwards to the start of the screen.
  --}}}

PROC erase.screen (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to erase all characters from the screen.
  --}}}

PROC cursor.visible (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to make the cursor visible.
  --}}}

PROC cursor.invisible (CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to make the cursor invisible.
  --}}}

PROC goto.x.y (VAL INT x, y, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence down `out' to place the cursor
  --at screen coordinates (x, y).  [Note: this routine has been superceded
  --by `cursor.x.y'.]
  --}}}

PROC pos.int (VAL INT col, row, n, field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to place the cursor at screen
  --coordinates (col, row) and output `n' in a fieldwidth of `field'.
  --}}}

PROC pos.yes.no (VAL INT col, row, VAL BOOL b,
                 VAL INT field, CHAN OF BYTE out)
  --{{{  COMMENT documentation
  --This outputs a VT220 control sequence to place the cursor at screen
  --coordinates (col, row) and output `b' in a fieldwidth of `field'.
  --}}}

--}}}

