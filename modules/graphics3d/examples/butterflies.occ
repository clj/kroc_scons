--
--	butterflies.occ -- plain butterflies demo
--	Copyright (C) 2009 Fred Barnes <frmb@kent.ac.uk>
--
--	This program is free software; you can redistribute it and/or modify
--	it under the terms of the GNU General Public License as published by
--	the Free Software Foundation; either version 2 of the License, or
--	(at your option) any later version.
--
--	This program is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	GNU General Public License for more details.
--
--	You should have received a copy of the GNU General Public License
--	along with this program; if not, write to the Free Software
--	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
--

#INCLUDE "course.module"
#INCLUDE "sdlraster.module"
#INCLUDE "graphics3d.module"

VAL INT N.BUTTERFLIES IS 400:

--{{{  PROC bfly.network (G3D.RENDER.ENGINE? rlink.in, VAL INT width, height)
--* Implements a butterfly that crosses the screen, starts in a random location.
-- @private
PROC bfly.network (G3D.RENDER.ENGINE? rlink.in, VAL INT width, height)
  CHAN MOBILE []G3D.POINT3 gp1, gp2:
  CHAN MOBILE []G3D.POINT2.3 gc1:
  CHAN MOBILE []G3D.POLY pc1:
  CHAN MOBILE []G3D.POLY.SCAN ps1:

  CHAN G3D.GEN.CONTROL gen.ctl:
  CHAN G3D.ROT.CONTROL rot.ctl:
  CHAN G3D.PRJ.CONTROL prj.ctl:
  CHAN G3D.PGN.CONTROL pgn.ctl:
  CHAN G3D.PSC.CONTROL psc.ctl:
  CHAN G3D.RDR.CONTROL rdr.ctl:

  CHAN INT trigger:
  PAR
    INT trig:
    SEQ
      trigger ? trig
      fbypoints.generator (gp1!, gen.ctl?)

    points3d.rotate (gp1?, gp2!, rot.ctl?)
    points.3d.to.2d3 (gp2?, gc1!, prj.ctl?)
    flutterby.points (gc1?, pc1!, pgn.ctl?)
    render.polyframe (pc1?, rlink.in?, rdr.ctl?)

    INT seed:
    TIMER tim:
    SEQ
      rot.ctl ! set.mode; G3D.ROTATE.MODE.X \/ G3D.ROTATE.MODE.Y
      rot.ctl ! set.angle; PI / 2.0

      prj.ctl ! set.3dshift; [-12.0, 0.0, 0.0]
      trigger ! 0

      tim ? seed
      seed := (seed >> 2) + 1

      WHILE TRUE
        INT yoff, zoff, speed:
        REAL32 xpos, ypos, zpos:
        INT t:
        INT val:
        SEQ
          yoff, seed := random (160, seed)
          yoff := yoff - 80
          zoff, seed := random (200, seed)
          zoff := zoff - 100
          speed, seed := random (10, seed)
          speed := speed + 2

          xpos := -12.0
          ypos := (REAL32 TRUNC yoff) / 10.0
          zpos := (REAL32 TRUNC zoff) / 10.0

          [4]BYTE pix RETYPES val:
          SEQ v = 0 FOR 3
            INT n:
            SEQ
              n, seed := random (127, seed)
              pix[v] := BYTE ((n + 100) /\ #FF)

          pgn.ctl ! set.face.colour; 0; val

          tim ? t
          WHILE xpos < 24.0
            SEQ
              prj.ctl ! set.3dshift; [xpos, ypos, zpos]

              xpos := xpos + ((REAL32 TRUNC speed) / 10.0)

              RESCHEDULE ()
:
--}}}
--{{{  PROC bfly.network.spawn (VAL INT width, height, SHARED CHAN G3D.RENDER.ENGINE! new.link!)
PROC bfly.network.spawn (VAL INT width, height, SHARED CHAN G3D.RENDER.ENGINE! new.link!)
  G3D.RENDER.ENGINE! rlink:
  G3D.RENDER.ENGINE? rsvr:
  SEQ
    rsvr, rlink := MOBILE G3D.RENDER.ENGINE
    FORK bfly.network (rsvr?, width, height)
    CLAIM new.link!
      new.link ! rlink
:
--}}}
--{{{  PROC main (CHAN BYTE kyb?, SHARED CHAN BYTE scr!)
--* Top-level process.
--
-- @param kyb Keyboard.
-- @param scr Screen.
-- @private
--
PROC main (CHAN BYTE kyb?, SHARED CHAN BYTE scr!)
  VAL INT SCR.WIDTH IS G3D.DEFAULT.WIDTH:
  VAL INT SCR.HEIGHT IS G3D.DEFAULT.HEIGHT:
  SEQ

    CHAN RASTER rc1, rc2, rc3:
    SHARED! CHAN G3D.RENDER.ENGINE! rre:
    CHAN G3D.TMR.CONTROL tmr.ctl:
    PAR
      raster.timed.buffer (rc1?, rc2!, 40, tmr.ctl?)
      raster.display.simple ("Inmos Butterflies", SCR.WIDTH, SCR.HEIGHT, 4, rc2?, rc3!)
      raster.chain (rc3?, rc1!, rre?, FALSE)

      SEQ i = 0 FOR N.BUTTERFLIES
        bfly.network.spawn (SCR.WIDTH, SCR.HEIGHT, rre!)
:
--}}}

