--** Wrapper library for occGL
-- Generated using swig 1.3.31
-- @module occGL
-- @maintainer Swig 1.3.31

-- ----------------------------------------------------------------------------
-- This file was automatically generated by SWIG (http://www.swig.org).
-- Version 1.3.31
--
-- Do not make changes to this file unless you know what you are doing--modify
-- the SWIG interface file instead.
-- ----------------------------------------------------------------------------- 
#IF NOT DEFINED (GUARD.occGL)
#DEFINE GUARD.occGL
--* C constant turned into a VAL INT
VAL INT GL.VERSION.1.1  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.VERSION.1.2  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.VERSION.1.3  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.ARB.imaging  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.FALSE  IS #0: 
--* C constant turned into a VAL INT
VAL INT GL.TRUE  IS #1: 
--* C constant turned into a VAL INT
VAL INT GL.BYTE  IS #1400: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.BYTE  IS #1401: 
--* C constant turned into a VAL INT
VAL INT GL.SHORT  IS #1402: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT  IS #1403: 
--* C constant turned into a VAL INT
VAL INT GL.INT  IS #1404: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.INT  IS #1405: 
--* C constant turned into a VAL INT
VAL INT GL.FLOAT  IS #1406: 
--* C constant turned into a VAL INT
VAL INT GL.DOUBLE  IS #140A: 
--* C constant turned into a VAL INT
VAL INT GL.2.BYTES  IS #1407: 
--* C constant turned into a VAL INT
VAL INT GL.3.BYTES  IS #1408: 
--* C constant turned into a VAL INT
VAL INT GL.4.BYTES  IS #1409: 
--* C constant turned into a VAL INT
VAL INT GL.POINTS  IS #0000: 
--* C constant turned into a VAL INT
VAL INT GL.LINES  IS #0001: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.LOOP  IS #0002: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.STRIP  IS #0003: 
--* C constant turned into a VAL INT
VAL INT GL.TRIANGLES  IS #0004: 
--* C constant turned into a VAL INT
VAL INT GL.TRIANGLE.STRIP  IS #0005: 
--* C constant turned into a VAL INT
VAL INT GL.TRIANGLE.FAN  IS #0006: 
--* C constant turned into a VAL INT
VAL INT GL.QUADS  IS #0007: 
--* C constant turned into a VAL INT
VAL INT GL.QUAD.STRIP  IS #0008: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON  IS #0009: 
--* C constant turned into a VAL INT
VAL INT GL.VERTEX.ARRAY  IS #8074: 
--* C constant turned into a VAL INT
VAL INT GL.NORMAL.ARRAY  IS #8075: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.ARRAY  IS #8076: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.ARRAY  IS #8077: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COORD.ARRAY  IS #8078: 
--* C constant turned into a VAL INT
VAL INT GL.EDGE.FLAG.ARRAY  IS #8079: 
--* C constant turned into a VAL INT
VAL INT GL.VERTEX.ARRAY.SIZE  IS #807A: 
--* C constant turned into a VAL INT
VAL INT GL.VERTEX.ARRAY.TYPE  IS #807B: 
--* C constant turned into a VAL INT
VAL INT GL.VERTEX.ARRAY.STRIDE  IS #807C: 
--* C constant turned into a VAL INT
VAL INT GL.NORMAL.ARRAY.TYPE  IS #807E: 
--* C constant turned into a VAL INT
VAL INT GL.NORMAL.ARRAY.STRIDE  IS #807F: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.ARRAY.SIZE  IS #8081: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.ARRAY.TYPE  IS #8082: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.ARRAY.STRIDE  IS #8083: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.ARRAY.TYPE  IS #8085: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.ARRAY.STRIDE  IS #8086: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COORD.ARRAY.SIZE  IS #8088: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COORD.ARRAY.TYPE  IS #8089: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COORD.ARRAY.STRIDE  IS #808A: 
--* C constant turned into a VAL INT
VAL INT GL.EDGE.FLAG.ARRAY.STRIDE  IS #808C: 
--* C constant turned into a VAL INT
VAL INT GL.VERTEX.ARRAY.POINTER  IS #808E: 
--* C constant turned into a VAL INT
VAL INT GL.NORMAL.ARRAY.POINTER  IS #808F: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.ARRAY.POINTER  IS #8090: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.ARRAY.POINTER  IS #8091: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COORD.ARRAY.POINTER  IS #8092: 
--* C constant turned into a VAL INT
VAL INT GL.EDGE.FLAG.ARRAY.POINTER  IS #8093: 
--* C constant turned into a VAL INT
VAL INT GL.V2F  IS #2A20: 
--* C constant turned into a VAL INT
VAL INT GL.V3F  IS #2A21: 
--* C constant turned into a VAL INT
VAL INT GL.C4UB.V2F  IS #2A22: 
--* C constant turned into a VAL INT
VAL INT GL.C4UB.V3F  IS #2A23: 
--* C constant turned into a VAL INT
VAL INT GL.C3F.V3F  IS #2A24: 
--* C constant turned into a VAL INT
VAL INT GL.N3F.V3F  IS #2A25: 
--* C constant turned into a VAL INT
VAL INT GL.C4F.N3F.V3F  IS #2A26: 
--* C constant turned into a VAL INT
VAL INT GL.T2F.V3F  IS #2A27: 
--* C constant turned into a VAL INT
VAL INT GL.T4F.V4F  IS #2A28: 
--* C constant turned into a VAL INT
VAL INT GL.T2F.C4UB.V3F  IS #2A29: 
--* C constant turned into a VAL INT
VAL INT GL.T2F.C3F.V3F  IS #2A2A: 
--* C constant turned into a VAL INT
VAL INT GL.T2F.N3F.V3F  IS #2A2B: 
--* C constant turned into a VAL INT
VAL INT GL.T2F.C4F.N3F.V3F  IS #2A2C: 
--* C constant turned into a VAL INT
VAL INT GL.T4F.C4F.N3F.V4F  IS #2A2D: 
--* C constant turned into a VAL INT
VAL INT GL.MATRIX.MODE  IS #0BA0: 
--* C constant turned into a VAL INT
VAL INT GL.MODELVIEW  IS #1700: 
--* C constant turned into a VAL INT
VAL INT GL.PROJECTION  IS #1701: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE  IS #1702: 
--* C constant turned into a VAL INT
VAL INT GL.POINT.SMOOTH  IS #0B10: 
--* C constant turned into a VAL INT
VAL INT GL.POINT.SIZE  IS #0B11: 
--* C constant turned into a VAL INT
VAL INT GL.POINT.SIZE.GRANULARITY  IS #0B13: 
--* C constant turned into a VAL INT
VAL INT GL.POINT.SIZE.RANGE  IS #0B12: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.SMOOTH  IS #0B20: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.STIPPLE  IS #0B24: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.STIPPLE.PATTERN  IS #0B25: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.STIPPLE.REPEAT  IS #0B26: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.WIDTH  IS #0B21: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.WIDTH.GRANULARITY  IS #0B23: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.WIDTH.RANGE  IS #0B22: 
--* C constant turned into a VAL INT
VAL INT GL.POINT  IS #1B00: 
--* C constant turned into a VAL INT
VAL INT GL.LINE  IS #1B01: 
--* C constant turned into a VAL INT
VAL INT GL.FILL  IS #1B02: 
--* C constant turned into a VAL INT
VAL INT GL.CW  IS #0900: 
--* C constant turned into a VAL INT
VAL INT GL.CCW  IS #0901: 
--* C constant turned into a VAL INT
VAL INT GL.FRONT  IS #0404: 
--* C constant turned into a VAL INT
VAL INT GL.BACK  IS #0405: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.MODE  IS #0B40: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.SMOOTH  IS #0B41: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.STIPPLE  IS #0B42: 
--* C constant turned into a VAL INT
VAL INT GL.EDGE.FLAG  IS #0B43: 
--* C constant turned into a VAL INT
VAL INT GL.CULL.FACE  IS #0B44: 
--* C constant turned into a VAL INT
VAL INT GL.CULL.FACE.MODE  IS #0B45: 
--* C constant turned into a VAL INT
VAL INT GL.FRONT.FACE  IS #0B46: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.OFFSET.FACTOR  IS #8038: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.OFFSET.UNITS  IS #2A00: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.OFFSET.POINT  IS #2A01: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.OFFSET.LINE  IS #2A02: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.OFFSET.FILL  IS #8037: 
--* C constant turned into a VAL INT
VAL INT GL.COMPILE  IS #1300: 
--* C constant turned into a VAL INT
VAL INT GL.COMPILE.AND.EXECUTE  IS #1301: 
--* C constant turned into a VAL INT
VAL INT GL.LIST.BASE  IS #0B32: 
--* C constant turned into a VAL INT
VAL INT GL.LIST.INDEX  IS #0B33: 
--* C constant turned into a VAL INT
VAL INT GL.LIST.MODE  IS #0B30: 
--* C constant turned into a VAL INT
VAL INT GL.NEVER  IS #0200: 
--* C constant turned into a VAL INT
VAL INT GL.LESS  IS #0201: 
--* C constant turned into a VAL INT
VAL INT GL.EQUAL  IS #0202: 
--* C constant turned into a VAL INT
VAL INT GL.LEQUAL  IS #0203: 
--* C constant turned into a VAL INT
VAL INT GL.GREATER  IS #0204: 
--* C constant turned into a VAL INT
VAL INT GL.NOTEQUAL  IS #0205: 
--* C constant turned into a VAL INT
VAL INT GL.GEQUAL  IS #0206: 
--* C constant turned into a VAL INT
VAL INT GL.ALWAYS  IS #0207: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.TEST  IS #0B71: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.BITS  IS #0D56: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.CLEAR.VALUE  IS #0B73: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.FUNC  IS #0B74: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.RANGE  IS #0B70: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.WRITEMASK  IS #0B72: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.COMPONENT  IS #1902: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHTING  IS #0B50: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT0  IS #4000: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT1  IS #4001: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT2  IS #4002: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT3  IS #4003: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT4  IS #4004: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT5  IS #4005: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT6  IS #4006: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT7  IS #4007: 
--* C constant turned into a VAL INT
VAL INT GL.SPOT.EXPONENT  IS #1205: 
--* C constant turned into a VAL INT
VAL INT GL.SPOT.CUTOFF  IS #1206: 
--* C constant turned into a VAL INT
VAL INT GL.CONSTANT.ATTENUATION  IS #1207: 
--* C constant turned into a VAL INT
VAL INT GL.LINEAR.ATTENUATION  IS #1208: 
--* C constant turned into a VAL INT
VAL INT GL.QUADRATIC.ATTENUATION  IS #1209: 
--* C constant turned into a VAL INT
VAL INT GL.AMBIENT  IS #1200: 
--* C constant turned into a VAL INT
VAL INT GL.DIFFUSE  IS #1201: 
--* C constant turned into a VAL INT
VAL INT GL.SPECULAR  IS #1202: 
--* C constant turned into a VAL INT
VAL INT GL.SHININESS  IS #1601: 
--* C constant turned into a VAL INT
VAL INT GL.EMISSION  IS #1600: 
--* C constant turned into a VAL INT
VAL INT GL.POSITION  IS #1203: 
--* C constant turned into a VAL INT
VAL INT GL.SPOT.DIRECTION  IS #1204: 
--* C constant turned into a VAL INT
VAL INT GL.AMBIENT.AND.DIFFUSE  IS #1602: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.INDEXES  IS #1603: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT.MODEL.TWO.SIDE  IS #0B52: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT.MODEL.LOCAL.VIEWER  IS #0B51: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT.MODEL.AMBIENT  IS #0B53: 
--* C constant turned into a VAL INT
VAL INT GL.FRONT.AND.BACK  IS #0408: 
--* C constant turned into a VAL INT
VAL INT GL.SHADE.MODEL  IS #0B54: 
--* C constant turned into a VAL INT
VAL INT GL.FLAT  IS #1D00: 
--* C constant turned into a VAL INT
VAL INT GL.SMOOTH  IS #1D01: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.MATERIAL  IS #0B57: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.MATERIAL.FACE  IS #0B55: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.MATERIAL.PARAMETER  IS #0B56: 
--* C constant turned into a VAL INT
VAL INT GL.NORMALIZE  IS #0BA1: 
--* C constant turned into a VAL INT
VAL INT GL.CLIP.PLANE0  IS #3000: 
--* C constant turned into a VAL INT
VAL INT GL.CLIP.PLANE1  IS #3001: 
--* C constant turned into a VAL INT
VAL INT GL.CLIP.PLANE2  IS #3002: 
--* C constant turned into a VAL INT
VAL INT GL.CLIP.PLANE3  IS #3003: 
--* C constant turned into a VAL INT
VAL INT GL.CLIP.PLANE4  IS #3004: 
--* C constant turned into a VAL INT
VAL INT GL.CLIP.PLANE5  IS #3005: 
--* C constant turned into a VAL INT
VAL INT GL.ACCUM.RED.BITS  IS #0D58: 
--* C constant turned into a VAL INT
VAL INT GL.ACCUM.GREEN.BITS  IS #0D59: 
--* C constant turned into a VAL INT
VAL INT GL.ACCUM.BLUE.BITS  IS #0D5A: 
--* C constant turned into a VAL INT
VAL INT GL.ACCUM.ALPHA.BITS  IS #0D5B: 
--* C constant turned into a VAL INT
VAL INT GL.ACCUM.CLEAR.VALUE  IS #0B80: 
--* C constant turned into a VAL INT
VAL INT GL.ACCUM  IS #0100: 
--* C constant turned into a VAL INT
VAL INT GL.ADD  IS #0104: 
--* C constant turned into a VAL INT
VAL INT GL.LOAD  IS #0101: 
--* C constant turned into a VAL INT
VAL INT GL.MULT  IS #0103: 
--* C constant turned into a VAL INT
VAL INT GL.RETURN  IS #0102: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA.TEST  IS #0BC0: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA.TEST.REF  IS #0BC2: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA.TEST.FUNC  IS #0BC1: 
--* C constant turned into a VAL INT
VAL INT GL.BLEND  IS #0BE2: 
--* C constant turned into a VAL INT
VAL INT GL.BLEND.SRC  IS #0BE1: 
--* C constant turned into a VAL INT
VAL INT GL.BLEND.DST  IS #0BE0: 
--* C constant turned into a VAL INT
VAL INT GL.ZERO  IS #0: 
--* C constant turned into a VAL INT
VAL INT GL.ONE  IS #1: 
--* C constant turned into a VAL INT
VAL INT GL.SRC.COLOR  IS #0300: 
--* C constant turned into a VAL INT
VAL INT GL.ONE.MINUS.SRC.COLOR  IS #0301: 
--* C constant turned into a VAL INT
VAL INT GL.SRC.ALPHA  IS #0302: 
--* C constant turned into a VAL INT
VAL INT GL.ONE.MINUS.SRC.ALPHA  IS #0303: 
--* C constant turned into a VAL INT
VAL INT GL.DST.ALPHA  IS #0304: 
--* C constant turned into a VAL INT
VAL INT GL.ONE.MINUS.DST.ALPHA  IS #0305: 
--* C constant turned into a VAL INT
VAL INT GL.DST.COLOR  IS #0306: 
--* C constant turned into a VAL INT
VAL INT GL.ONE.MINUS.DST.COLOR  IS #0307: 
--* C constant turned into a VAL INT
VAL INT GL.SRC.ALPHA.SATURATE  IS #0308: 
--* C constant turned into a VAL INT
VAL INT GL.CONSTANT.COLOR  IS #8001: 
--* C constant turned into a VAL INT
VAL INT GL.ONE.MINUS.CONSTANT.COLOR  IS #8002: 
--* C constant turned into a VAL INT
VAL INT GL.CONSTANT.ALPHA  IS #8003: 
--* C constant turned into a VAL INT
VAL INT GL.ONE.MINUS.CONSTANT.ALPHA  IS #8004: 
--* C constant turned into a VAL INT
VAL INT GL.FEEDBACK  IS #1C01: 
--* C constant turned into a VAL INT
VAL INT GL.RENDER  IS #1C00: 
--* C constant turned into a VAL INT
VAL INT GL.SELECT  IS #1C02: 
--* C constant turned into a VAL INT
VAL INT GL.2D  IS #0600: 
--* C constant turned into a VAL INT
VAL INT GL.3D  IS #0601: 
--* C constant turned into a VAL INT
VAL INT GL.3D.COLOR  IS #0602: 
--* C constant turned into a VAL INT
VAL INT GL.3D.COLOR.TEXTURE  IS #0603: 
--* C constant turned into a VAL INT
VAL INT GL.4D.COLOR.TEXTURE  IS #0604: 
--* C constant turned into a VAL INT
VAL INT GL.POINT.TOKEN  IS #0701: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.TOKEN  IS #0702: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.RESET.TOKEN  IS #0707: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.TOKEN  IS #0703: 
--* C constant turned into a VAL INT
VAL INT GL.BITMAP.TOKEN  IS #0704: 
--* C constant turned into a VAL INT
VAL INT GL.DRAW.PIXEL.TOKEN  IS #0705: 
--* C constant turned into a VAL INT
VAL INT GL.COPY.PIXEL.TOKEN  IS #0706: 
--* C constant turned into a VAL INT
VAL INT GL.PASS.THROUGH.TOKEN  IS #0700: 
--* C constant turned into a VAL INT
VAL INT GL.FEEDBACK.BUFFER.POINTER  IS #0DF0: 
--* C constant turned into a VAL INT
VAL INT GL.FEEDBACK.BUFFER.SIZE  IS #0DF1: 
--* C constant turned into a VAL INT
VAL INT GL.FEEDBACK.BUFFER.TYPE  IS #0DF2: 
--* C constant turned into a VAL INT
VAL INT GL.SELECTION.BUFFER.POINTER  IS #0DF3: 
--* C constant turned into a VAL INT
VAL INT GL.SELECTION.BUFFER.SIZE  IS #0DF4: 
--* C constant turned into a VAL INT
VAL INT GL.FOG  IS #0B60: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.MODE  IS #0B65: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.DENSITY  IS #0B62: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.COLOR  IS #0B66: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.INDEX  IS #0B61: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.START  IS #0B63: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.END  IS #0B64: 
--* C constant turned into a VAL INT
VAL INT GL.LINEAR  IS #2601: 
--* C constant turned into a VAL INT
VAL INT GL.EXP  IS #0800: 
--* C constant turned into a VAL INT
VAL INT GL.EXP2  IS #0801: 
--* C constant turned into a VAL INT
VAL INT GL.LOGIC.OP  IS #0BF1: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.LOGIC.OP  IS #0BF1: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.LOGIC.OP  IS #0BF2: 
--* C constant turned into a VAL INT
VAL INT GL.LOGIC.OP.MODE  IS #0BF0: 
--* C constant turned into a VAL INT
VAL INT GL.CLEAR  IS #1500: 
--* C constant turned into a VAL INT
VAL INT GL.SET  IS #150F: 
--* C constant turned into a VAL INT
VAL INT GL.COPY  IS #1503: 
--* C constant turned into a VAL INT
VAL INT GL.COPY.INVERTED  IS #150C: 
--* C constant turned into a VAL INT
VAL INT GL.NOOP  IS #1505: 
--* C constant turned into a VAL INT
VAL INT GL.INVERT  IS #150A: 
--* C constant turned into a VAL INT
VAL INT GL.AND  IS #1501: 
--* C constant turned into a VAL INT
VAL INT GL.NAND  IS #150E: 
--* C constant turned into a VAL INT
VAL INT GL.OR  IS #1507: 
--* C constant turned into a VAL INT
VAL INT GL.NOR  IS #1508: 
--* C constant turned into a VAL INT
VAL INT GL.XOR  IS #1506: 
--* C constant turned into a VAL INT
VAL INT GL.EQUIV  IS #1509: 
--* C constant turned into a VAL INT
VAL INT GL.AND.REVERSE  IS #1502: 
--* C constant turned into a VAL INT
VAL INT GL.AND.INVERTED  IS #1504: 
--* C constant turned into a VAL INT
VAL INT GL.OR.REVERSE  IS #150B: 
--* C constant turned into a VAL INT
VAL INT GL.OR.INVERTED  IS #150D: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.TEST  IS #0B90: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.WRITEMASK  IS #0B98: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.BITS  IS #0D57: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.FUNC  IS #0B92: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.VALUE.MASK  IS #0B93: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.REF  IS #0B97: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.FAIL  IS #0B94: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.PASS.DEPTH.PASS  IS #0B96: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.PASS.DEPTH.FAIL  IS #0B95: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.CLEAR.VALUE  IS #0B91: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.INDEX  IS #1901: 
--* C constant turned into a VAL INT
VAL INT GL.KEEP  IS #1E00: 
--* C constant turned into a VAL INT
VAL INT GL.REPLACE  IS #1E01: 
--* C constant turned into a VAL INT
VAL INT GL.INCR  IS #1E02: 
--* C constant turned into a VAL INT
VAL INT GL.DECR  IS #1E03: 
--* C constant turned into a VAL INT
VAL INT GL.NONE  IS #0: 
--* C constant turned into a VAL INT
VAL INT GL.LEFT  IS #0406: 
--* C constant turned into a VAL INT
VAL INT GL.RIGHT  IS #0407: 
--* C constant turned into a VAL INT
VAL INT GL.FRONT.LEFT  IS #0400: 
--* C constant turned into a VAL INT
VAL INT GL.FRONT.RIGHT  IS #0401: 
--* C constant turned into a VAL INT
VAL INT GL.BACK.LEFT  IS #0402: 
--* C constant turned into a VAL INT
VAL INT GL.BACK.RIGHT  IS #0403: 
--* C constant turned into a VAL INT
VAL INT GL.AUX0  IS #0409: 
--* C constant turned into a VAL INT
VAL INT GL.AUX1  IS #040A: 
--* C constant turned into a VAL INT
VAL INT GL.AUX2  IS #040B: 
--* C constant turned into a VAL INT
VAL INT GL.AUX3  IS #040C: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.INDEX  IS #1900: 
--* C constant turned into a VAL INT
VAL INT GL.RED  IS #1903: 
--* C constant turned into a VAL INT
VAL INT GL.GREEN  IS #1904: 
--* C constant turned into a VAL INT
VAL INT GL.BLUE  IS #1905: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA  IS #1906: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE  IS #1909: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE.ALPHA  IS #190A: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA.BITS  IS #0D55: 
--* C constant turned into a VAL INT
VAL INT GL.RED.BITS  IS #0D52: 
--* C constant turned into a VAL INT
VAL INT GL.GREEN.BITS  IS #0D53: 
--* C constant turned into a VAL INT
VAL INT GL.BLUE.BITS  IS #0D54: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.BITS  IS #0D51: 
--* C constant turned into a VAL INT
VAL INT GL.SUBPIXEL.BITS  IS #0D50: 
--* C constant turned into a VAL INT
VAL INT GL.AUX.BUFFERS  IS #0C00: 
--* C constant turned into a VAL INT
VAL INT GL.READ.BUFFER  IS #0C02: 
--* C constant turned into a VAL INT
VAL INT GL.DRAW.BUFFER  IS #0C01: 
--* C constant turned into a VAL INT
VAL INT GL.DOUBLEBUFFER  IS #0C32: 
--* C constant turned into a VAL INT
VAL INT GL.STEREO  IS #0C33: 
--* C constant turned into a VAL INT
VAL INT GL.BITMAP  IS #1A00: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR  IS #1800: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH  IS #1801: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL  IS #1802: 
--* C constant turned into a VAL INT
VAL INT GL.DITHER  IS #0BD0: 
--* C constant turned into a VAL INT
VAL INT GL.RGB  IS #1907: 
--* C constant turned into a VAL INT
VAL INT GL.RGBA  IS #1908: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.LIST.NESTING  IS #0B31: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.ATTRIB.STACK.DEPTH  IS #0D35: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.MODELVIEW.STACK.DEPTH  IS #0D36: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.NAME.STACK.DEPTH  IS #0D37: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.PROJECTION.STACK.DEPTH  IS #0D38: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.TEXTURE.STACK.DEPTH  IS #0D39: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.EVAL.ORDER  IS #0D30: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.LIGHTS  IS #0D31: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.CLIP.PLANES  IS #0D32: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.TEXTURE.SIZE  IS #0D33: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.PIXEL.MAP.TABLE  IS #0D34: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.VIEWPORT.DIMS  IS #0D3A: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.CLIENT.ATTRIB.STACK.DEPTH  IS #0D3B: 
--* C constant turned into a VAL INT
VAL INT GL.ATTRIB.STACK.DEPTH  IS #0BB0: 
--* C constant turned into a VAL INT
VAL INT GL.CLIENT.ATTRIB.STACK.DEPTH  IS #0BB1: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.CLEAR.VALUE  IS #0C22: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.WRITEMASK  IS #0C23: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.INDEX  IS #0B01: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.COLOR  IS #0B00: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.NORMAL  IS #0B02: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.RASTER.COLOR  IS #0B04: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.RASTER.DISTANCE  IS #0B09: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.RASTER.INDEX  IS #0B05: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.RASTER.POSITION  IS #0B07: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.RASTER.TEXTURE.COORDS  IS #0B06: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.RASTER.POSITION.VALID  IS #0B08: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.TEXTURE.COORDS  IS #0B03: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.CLEAR.VALUE  IS #0C20: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.MODE  IS #0C30: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.WRITEMASK  IS #0C21: 
--* C constant turned into a VAL INT
VAL INT GL.MODELVIEW.MATRIX  IS #0BA6: 
--* C constant turned into a VAL INT
VAL INT GL.MODELVIEW.STACK.DEPTH  IS #0BA3: 
--* C constant turned into a VAL INT
VAL INT GL.NAME.STACK.DEPTH  IS #0D70: 
--* C constant turned into a VAL INT
VAL INT GL.PROJECTION.MATRIX  IS #0BA7: 
--* C constant turned into a VAL INT
VAL INT GL.PROJECTION.STACK.DEPTH  IS #0BA4: 
--* C constant turned into a VAL INT
VAL INT GL.RENDER.MODE  IS #0C40: 
--* C constant turned into a VAL INT
VAL INT GL.RGBA.MODE  IS #0C31: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.MATRIX  IS #0BA8: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.STACK.DEPTH  IS #0BA5: 
--* C constant turned into a VAL INT
VAL INT GL.VIEWPORT  IS #0BA2: 
--* C constant turned into a VAL INT
VAL INT GL.AUTO.NORMAL  IS #0D80: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.COLOR.4  IS #0D90: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.GRID.DOMAIN  IS #0DD0: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.GRID.SEGMENTS  IS #0DD1: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.INDEX  IS #0D91: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.NORMAL  IS #0D92: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.TEXTURE.COORD.1  IS #0D93: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.TEXTURE.COORD.2  IS #0D94: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.TEXTURE.COORD.3  IS #0D95: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.TEXTURE.COORD.4  IS #0D96: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.VERTEX.3  IS #0D97: 
--* C constant turned into a VAL INT
VAL INT GL.MAP1.VERTEX.4  IS #0D98: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.COLOR.4  IS #0DB0: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.GRID.DOMAIN  IS #0DD2: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.GRID.SEGMENTS  IS #0DD3: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.INDEX  IS #0DB1: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.NORMAL  IS #0DB2: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.TEXTURE.COORD.1  IS #0DB3: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.TEXTURE.COORD.2  IS #0DB4: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.TEXTURE.COORD.3  IS #0DB5: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.TEXTURE.COORD.4  IS #0DB6: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.VERTEX.3  IS #0DB7: 
--* C constant turned into a VAL INT
VAL INT GL.MAP2.VERTEX.4  IS #0DB8: 
--* C constant turned into a VAL INT
VAL INT GL.COEFF  IS #0A00: 
--* C constant turned into a VAL INT
VAL INT GL.DOMAIN  IS #0A02: 
--* C constant turned into a VAL INT
VAL INT GL.ORDER  IS #0A01: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.HINT  IS #0C54: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.SMOOTH.HINT  IS #0C52: 
--* C constant turned into a VAL INT
VAL INT GL.PERSPECTIVE.CORRECTION.HINT  IS #0C50: 
--* C constant turned into a VAL INT
VAL INT GL.POINT.SMOOTH.HINT  IS #0C51: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.SMOOTH.HINT  IS #0C53: 
--* C constant turned into a VAL INT
VAL INT GL.DONT.CARE  IS #1100: 
--* C constant turned into a VAL INT
VAL INT GL.FASTEST  IS #1101: 
--* C constant turned into a VAL INT
VAL INT GL.NICEST  IS #1102: 
--* C constant turned into a VAL INT
VAL INT GL.SCISSOR.TEST  IS #0C11: 
--* C constant turned into a VAL INT
VAL INT GL.SCISSOR.BOX  IS #0C10: 
--* C constant turned into a VAL INT
VAL INT GL.MAP.COLOR  IS #0D10: 
--* C constant turned into a VAL INT
VAL INT GL.MAP.STENCIL  IS #0D11: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.SHIFT  IS #0D12: 
--* C constant turned into a VAL INT
VAL INT GL.INDEX.OFFSET  IS #0D13: 
--* C constant turned into a VAL INT
VAL INT GL.RED.SCALE  IS #0D14: 
--* C constant turned into a VAL INT
VAL INT GL.RED.BIAS  IS #0D15: 
--* C constant turned into a VAL INT
VAL INT GL.GREEN.SCALE  IS #0D18: 
--* C constant turned into a VAL INT
VAL INT GL.GREEN.BIAS  IS #0D19: 
--* C constant turned into a VAL INT
VAL INT GL.BLUE.SCALE  IS #0D1A: 
--* C constant turned into a VAL INT
VAL INT GL.BLUE.BIAS  IS #0D1B: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA.SCALE  IS #0D1C: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA.BIAS  IS #0D1D: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.SCALE  IS #0D1E: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.BIAS  IS #0D1F: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.S.TO.S.SIZE  IS #0CB1: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.I.SIZE  IS #0CB0: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.R.SIZE  IS #0CB2: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.G.SIZE  IS #0CB3: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.B.SIZE  IS #0CB4: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.A.SIZE  IS #0CB5: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.R.TO.R.SIZE  IS #0CB6: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.G.TO.G.SIZE  IS #0CB7: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.B.TO.B.SIZE  IS #0CB8: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.A.TO.A.SIZE  IS #0CB9: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.S.TO.S  IS #0C71: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.I  IS #0C70: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.R  IS #0C72: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.G  IS #0C73: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.B  IS #0C74: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.I.TO.A  IS #0C75: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.R.TO.R  IS #0C76: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.G.TO.G  IS #0C77: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.B.TO.B  IS #0C78: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MAP.A.TO.A  IS #0C79: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.ALIGNMENT  IS #0D05: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.LSB.FIRST  IS #0D01: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.ROW.LENGTH  IS #0D02: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.SKIP.PIXELS  IS #0D04: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.SKIP.ROWS  IS #0D03: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.SWAP.BYTES  IS #0D00: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.ALIGNMENT  IS #0CF5: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.LSB.FIRST  IS #0CF1: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.ROW.LENGTH  IS #0CF2: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.SKIP.PIXELS  IS #0CF4: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.SKIP.ROWS  IS #0CF3: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.SWAP.BYTES  IS #0CF0: 
--* C constant turned into a VAL INT
VAL INT GL.ZOOM.X  IS #0D16: 
--* C constant turned into a VAL INT
VAL INT GL.ZOOM.Y  IS #0D17: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.ENV  IS #2300: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.ENV.MODE  IS #2200: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.1D  IS #0DE0: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.2D  IS #0DE1: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.WRAP.S  IS #2802: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.WRAP.T  IS #2803: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.MAG.FILTER  IS #2800: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.MIN.FILTER  IS #2801: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.ENV.COLOR  IS #2201: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.GEN.S  IS #0C60: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.GEN.T  IS #0C61: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.GEN.MODE  IS #2500: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BORDER.COLOR  IS #1004: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.WIDTH  IS #1000: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.HEIGHT  IS #1001: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BORDER  IS #1005: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COMPONENTS  IS #1003: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.RED.SIZE  IS #805C: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.GREEN.SIZE  IS #805D: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BLUE.SIZE  IS #805E: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.ALPHA.SIZE  IS #805F: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.LUMINANCE.SIZE  IS #8060: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.INTENSITY.SIZE  IS #8061: 
--* C constant turned into a VAL INT
VAL INT GL.NEAREST.MIPMAP.NEAREST  IS #2700: 
--* C constant turned into a VAL INT
VAL INT GL.NEAREST.MIPMAP.LINEAR  IS #2702: 
--* C constant turned into a VAL INT
VAL INT GL.LINEAR.MIPMAP.NEAREST  IS #2701: 
--* C constant turned into a VAL INT
VAL INT GL.LINEAR.MIPMAP.LINEAR  IS #2703: 
--* C constant turned into a VAL INT
VAL INT GL.OBJECT.LINEAR  IS #2401: 
--* C constant turned into a VAL INT
VAL INT GL.OBJECT.PLANE  IS #2501: 
--* C constant turned into a VAL INT
VAL INT GL.EYE.LINEAR  IS #2400: 
--* C constant turned into a VAL INT
VAL INT GL.EYE.PLANE  IS #2502: 
--* C constant turned into a VAL INT
VAL INT GL.SPHERE.MAP  IS #2402: 
--* C constant turned into a VAL INT
VAL INT GL.DECAL  IS #2101: 
--* C constant turned into a VAL INT
VAL INT GL.MODULATE  IS #2100: 
--* C constant turned into a VAL INT
VAL INT GL.NEAREST  IS #2600: 
--* C constant turned into a VAL INT
VAL INT GL.REPEAT  IS #2901: 
--* C constant turned into a VAL INT
VAL INT GL.CLAMP  IS #2900: 
--* C constant turned into a VAL INT
VAL INT GL.S  IS #2000: 
--* C constant turned into a VAL INT
VAL INT GL.T  IS #2001: 
--* C constant turned into a VAL INT
VAL INT GL.R  IS #2002: 
--* C constant turned into a VAL INT
VAL INT GL.Q  IS #2003: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.GEN.R  IS #0C62: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.GEN.Q  IS #0C63: 
--* C constant turned into a VAL INT
VAL INT GL.VENDOR  IS #1F00: 
--* C constant turned into a VAL INT
VAL INT GL.RENDERER  IS #1F01: 
--* C constant turned into a VAL INT
VAL INT GL.VERSION  IS #1F02: 
--* C constant turned into a VAL INT
VAL INT GL.EXTENSIONS  IS #1F03: 
--* C constant turned into a VAL INT
VAL INT GL.NO.ERROR  IS #0: 
--* C constant turned into a VAL INT
VAL INT GL.INVALID.VALUE  IS #0501: 
--* C constant turned into a VAL INT
VAL INT GL.INVALID.ENUM  IS #0500: 
--* C constant turned into a VAL INT
VAL INT GL.INVALID.OPERATION  IS #0502: 
--* C constant turned into a VAL INT
VAL INT GL.STACK.OVERFLOW  IS #0503: 
--* C constant turned into a VAL INT
VAL INT GL.STACK.UNDERFLOW  IS #0504: 
--* C constant turned into a VAL INT
VAL INT GL.OUT.OF.MEMORY  IS #0505: 
--* C constant turned into a VAL INT
VAL INT GL.CURRENT.BIT  IS #00000001: 
--* C constant turned into a VAL INT
VAL INT GL.POINT.BIT  IS #00000002: 
--* C constant turned into a VAL INT
VAL INT GL.LINE.BIT  IS #00000004: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.BIT  IS #00000008: 
--* C constant turned into a VAL INT
VAL INT GL.POLYGON.STIPPLE.BIT  IS #00000010: 
--* C constant turned into a VAL INT
VAL INT GL.PIXEL.MODE.BIT  IS #00000020: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHTING.BIT  IS #00000040: 
--* C constant turned into a VAL INT
VAL INT GL.FOG.BIT  IS #00000080: 
--* C constant turned into a VAL INT
VAL INT GL.DEPTH.BUFFER.BIT  IS #00000100: 
--* C constant turned into a VAL INT
VAL INT GL.ACCUM.BUFFER.BIT  IS #00000200: 
--* C constant turned into a VAL INT
VAL INT GL.STENCIL.BUFFER.BIT  IS #00000400: 
--* C constant turned into a VAL INT
VAL INT GL.VIEWPORT.BIT  IS #00000800: 
--* C constant turned into a VAL INT
VAL INT GL.TRANSFORM.BIT  IS #00001000: 
--* C constant turned into a VAL INT
VAL INT GL.ENABLE.BIT  IS #00002000: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.BUFFER.BIT  IS #00004000: 
--* C constant turned into a VAL INT
VAL INT GL.HINT.BIT  IS #00008000: 
--* C constant turned into a VAL INT
VAL INT GL.EVAL.BIT  IS #00010000: 
--* C constant turned into a VAL INT
VAL INT GL.LIST.BIT  IS #00020000: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BIT  IS #00040000: 
--* C constant turned into a VAL INT
VAL INT GL.SCISSOR.BIT  IS #00080000: 
--* C constant turned into a VAL INT
VAL INT GL.ALL.ATTRIB.BITS  IS #000FFFFF: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.TEXTURE.1D  IS #8063: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.TEXTURE.2D  IS #8064: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.PRIORITY  IS #8066: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.RESIDENT  IS #8067: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BINDING.1D  IS #8068: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BINDING.2D  IS #8069: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.INTERNAL.FORMAT  IS #1003: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA4  IS #803B: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA8  IS #803C: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA12  IS #803D: 
--* C constant turned into a VAL INT
VAL INT GL.ALPHA16  IS #803E: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE4  IS #803F: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE8  IS #8040: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE12  IS #8041: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE16  IS #8042: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE4.ALPHA4  IS #8043: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE6.ALPHA2  IS #8044: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE8.ALPHA8  IS #8045: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE12.ALPHA4  IS #8046: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE12.ALPHA12  IS #8047: 
--* C constant turned into a VAL INT
VAL INT GL.LUMINANCE16.ALPHA16  IS #8048: 
--* C constant turned into a VAL INT
VAL INT GL.INTENSITY  IS #8049: 
--* C constant turned into a VAL INT
VAL INT GL.INTENSITY4  IS #804A: 
--* C constant turned into a VAL INT
VAL INT GL.INTENSITY8  IS #804B: 
--* C constant turned into a VAL INT
VAL INT GL.INTENSITY12  IS #804C: 
--* C constant turned into a VAL INT
VAL INT GL.INTENSITY16  IS #804D: 
--* C constant turned into a VAL INT
VAL INT GL.R3.G3.B2  IS #2A10: 
--* C constant turned into a VAL INT
VAL INT GL.RGB4  IS #804F: 
--* C constant turned into a VAL INT
VAL INT GL.RGB5  IS #8050: 
--* C constant turned into a VAL INT
VAL INT GL.RGB8  IS #8051: 
--* C constant turned into a VAL INT
VAL INT GL.RGB10  IS #8052: 
--* C constant turned into a VAL INT
VAL INT GL.RGB12  IS #8053: 
--* C constant turned into a VAL INT
VAL INT GL.RGB16  IS #8054: 
--* C constant turned into a VAL INT
VAL INT GL.RGBA2  IS #8055: 
--* C constant turned into a VAL INT
VAL INT GL.RGBA4  IS #8056: 
--* C constant turned into a VAL INT
VAL INT GL.RGB5.A1  IS #8057: 
--* C constant turned into a VAL INT
VAL INT GL.RGBA8  IS #8058: 
--* C constant turned into a VAL INT
VAL INT GL.RGB10.A2  IS #8059: 
--* C constant turned into a VAL INT
VAL INT GL.RGBA12  IS #805A: 
--* C constant turned into a VAL INT
VAL INT GL.RGBA16  IS #805B: 
--* C constant turned into a VAL INT
VAL INT GL.CLIENT.PIXEL.STORE.BIT  IS #00000001: 
--* C constant turned into a VAL INT
VAL INT GL.CLIENT.VERTEX.ARRAY.BIT  IS #00000002: 
--* C constant turned into a VAL INT
VAL INT GL.ALL.CLIENT.ATTRIB.BITS  IS #FFFFFFFF: 
--* C constant turned into a VAL INT
VAL INT GL.CLIENT.ALL.ATTRIB.BITS  IS #FFFFFFFF: 
--* C constant turned into a VAL INT
VAL INT GL.RESCALE.NORMAL  IS #803A: 
--* C constant turned into a VAL INT
VAL INT GL.CLAMP.TO.EDGE  IS #812F: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.ELEMENTS.VERTICES  IS #80E8: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.ELEMENTS.INDICES  IS #80E9: 
--* C constant turned into a VAL INT
VAL INT GL.BGR  IS #80E0: 
--* C constant turned into a VAL INT
VAL INT GL.BGRA  IS #80E1: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.BYTE.3.3.2  IS #8032: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.BYTE.2.3.3.REV  IS #8362: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.5.6.5  IS #8363: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.5.6.5.REV  IS #8364: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.4.4.4.4  IS #8033: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.4.4.4.4.REV  IS #8365: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.5.5.5.1  IS #8034: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.1.5.5.5.REV  IS #8366: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.INT.8.8.8.8  IS #8035: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.INT.8.8.8.8.REV  IS #8367: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.INT.10.10.10.2  IS #8036: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.INT.2.10.10.10.REV  IS #8368: 
--* C constant turned into a VAL INT
VAL INT GL.LIGHT.MODEL.COLOR.CONTROL  IS #81F8: 
--* C constant turned into a VAL INT
VAL INT GL.SINGLE.COLOR  IS #81F9: 
--* C constant turned into a VAL INT
VAL INT GL.SEPARATE.SPECULAR.COLOR  IS #81FA: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.MIN.LOD  IS #813A: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.MAX.LOD  IS #813B: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BASE.LEVEL  IS #813C: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.MAX.LEVEL  IS #813D: 
--* C constant turned into a VAL INT
VAL INT GL.SMOOTH.POINT.SIZE.RANGE  IS #0B12: 
--* C constant turned into a VAL INT
VAL INT GL.SMOOTH.POINT.SIZE.GRANULARITY  IS #0B13: 
--* C constant turned into a VAL INT
VAL INT GL.SMOOTH.LINE.WIDTH.RANGE  IS #0B22: 
--* C constant turned into a VAL INT
VAL INT GL.SMOOTH.LINE.WIDTH.GRANULARITY  IS #0B23: 
--* C constant turned into a VAL INT
VAL INT GL.ALIASED.POINT.SIZE.RANGE  IS #846D: 
--* C constant turned into a VAL INT
VAL INT GL.ALIASED.LINE.WIDTH.RANGE  IS #846E: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.SKIP.IMAGES  IS #806B: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.IMAGE.HEIGHT  IS #806C: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.SKIP.IMAGES  IS #806D: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.IMAGE.HEIGHT  IS #806E: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.3D  IS #806F: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.TEXTURE.3D  IS #8070: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.DEPTH  IS #8071: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.WRAP.R  IS #8072: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.3D.TEXTURE.SIZE  IS #8073: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BINDING.3D  IS #806A: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE  IS #80D0: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.COLOR.TABLE  IS #80D1: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.COLOR.TABLE  IS #80D2: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.COLOR.TABLE  IS #80D3: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.POST.CONVOLUTION.COLOR.TABLE  IS #80D4: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.POST.COLOR.MATRIX.COLOR.TABLE  IS #80D5: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.SCALE  IS #80D6: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.BIAS  IS #80D7: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.FORMAT  IS #80D8: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.WIDTH  IS #80D9: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.RED.SIZE  IS #80DA: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.GREEN.SIZE  IS #80DB: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.BLUE.SIZE  IS #80DC: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.ALPHA.SIZE  IS #80DD: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.LUMINANCE.SIZE  IS #80DE: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.TABLE.INTENSITY.SIZE  IS #80DF: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.1D  IS #8010: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.2D  IS #8011: 
--* C constant turned into a VAL INT
VAL INT GL.SEPARABLE.2D  IS #8012: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.BORDER.MODE  IS #8013: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.FILTER.SCALE  IS #8014: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.FILTER.BIAS  IS #8015: 
--* C constant turned into a VAL INT
VAL INT GL.REDUCE  IS #8016: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.FORMAT  IS #8017: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.WIDTH  IS #8018: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.HEIGHT  IS #8019: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.CONVOLUTION.WIDTH  IS #801A: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.CONVOLUTION.HEIGHT  IS #801B: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.RED.SCALE  IS #801C: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.GREEN.SCALE  IS #801D: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.BLUE.SCALE  IS #801E: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.ALPHA.SCALE  IS #801F: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.RED.BIAS  IS #8020: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.GREEN.BIAS  IS #8021: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.BLUE.BIAS  IS #8022: 
--* C constant turned into a VAL INT
VAL INT GL.POST.CONVOLUTION.ALPHA.BIAS  IS #8023: 
--* C constant turned into a VAL INT
VAL INT GL.CONSTANT.BORDER  IS #8151: 
--* C constant turned into a VAL INT
VAL INT GL.REPLICATE.BORDER  IS #8153: 
--* C constant turned into a VAL INT
VAL INT GL.CONVOLUTION.BORDER.COLOR  IS #8154: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.MATRIX  IS #80B1: 
--* C constant turned into a VAL INT
VAL INT GL.COLOR.MATRIX.STACK.DEPTH  IS #80B2: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.COLOR.MATRIX.STACK.DEPTH  IS #80B3: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.RED.SCALE  IS #80B4: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.GREEN.SCALE  IS #80B5: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.BLUE.SCALE  IS #80B6: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.ALPHA.SCALE  IS #80B7: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.RED.BIAS  IS #80B8: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.GREEN.BIAS  IS #80B9: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.BLUE.BIAS  IS #80BA: 
--* C constant turned into a VAL INT
VAL INT GL.POST.COLOR.MATRIX.ALPHA.BIAS  IS #80BB: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM  IS #8024: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.HISTOGRAM  IS #8025: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.WIDTH  IS #8026: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.FORMAT  IS #8027: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.RED.SIZE  IS #8028: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.GREEN.SIZE  IS #8029: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.BLUE.SIZE  IS #802A: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.ALPHA.SIZE  IS #802B: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.LUMINANCE.SIZE  IS #802C: 
--* C constant turned into a VAL INT
VAL INT GL.HISTOGRAM.SINK  IS #802D: 
--* C constant turned into a VAL INT
VAL INT GL.MINMAX  IS #802E: 
--* C constant turned into a VAL INT
VAL INT GL.MINMAX.FORMAT  IS #802F: 
--* C constant turned into a VAL INT
VAL INT GL.MINMAX.SINK  IS #8030: 
--* C constant turned into a VAL INT
VAL INT GL.TABLE.TOO.LARGE  IS #8031: 
--* C constant turned into a VAL INT
VAL INT GL.BLEND.EQUATION  IS #8009: 
--* C constant turned into a VAL INT
VAL INT GL.MIN  IS #8007: 
--* C constant turned into a VAL INT
VAL INT GL.MAX  IS #8008: 
--* C constant turned into a VAL INT
VAL INT GL.FUNC.ADD  IS #8006: 
--* C constant turned into a VAL INT
VAL INT GL.FUNC.SUBTRACT  IS #800A: 
--* C constant turned into a VAL INT
VAL INT GL.FUNC.REVERSE.SUBTRACT  IS #800B: 
--* C constant turned into a VAL INT
VAL INT GL.BLEND.COLOR  IS #8005: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE0  IS #84C0: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE1  IS #84C1: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE2  IS #84C2: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE3  IS #84C3: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE4  IS #84C4: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE5  IS #84C5: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE6  IS #84C6: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE7  IS #84C7: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE8  IS #84C8: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE9  IS #84C9: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE10  IS #84CA: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE11  IS #84CB: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE12  IS #84CC: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE13  IS #84CD: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE14  IS #84CE: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE15  IS #84CF: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE16  IS #84D0: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE17  IS #84D1: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE18  IS #84D2: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE19  IS #84D3: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE20  IS #84D4: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE21  IS #84D5: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE22  IS #84D6: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE23  IS #84D7: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE24  IS #84D8: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE25  IS #84D9: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE26  IS #84DA: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE27  IS #84DB: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE28  IS #84DC: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE29  IS #84DD: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE30  IS #84DE: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE31  IS #84DF: 
--* C constant turned into a VAL INT
VAL INT GL.ACTIVE.TEXTURE  IS #84E0: 
--* C constant turned into a VAL INT
VAL INT GL.CLIENT.ACTIVE.TEXTURE  IS #84E1: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.TEXTURE.UNITS  IS #84E2: 
--* C constant turned into a VAL INT
VAL INT GL.NORMAL.MAP  IS #8511: 
--* C constant turned into a VAL INT
VAL INT GL.REFLECTION.MAP  IS #8512: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.CUBE.MAP  IS #8513: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.BINDING.CUBE.MAP  IS #8514: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.CUBE.MAP.POSITIVE.X  IS #8515: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.CUBE.MAP.NEGATIVE.X  IS #8516: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.CUBE.MAP.POSITIVE.Y  IS #8517: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.CUBE.MAP.NEGATIVE.Y  IS #8518: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.CUBE.MAP.POSITIVE.Z  IS #8519: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.CUBE.MAP.NEGATIVE.Z  IS #851A: 
--* C constant turned into a VAL INT
VAL INT GL.PROXY.TEXTURE.CUBE.MAP  IS #851B: 
--* C constant turned into a VAL INT
VAL INT GL.MAX.CUBE.MAP.TEXTURE.SIZE  IS #851C: 
--* C constant turned into a VAL INT
VAL INT GL.COMPRESSED.ALPHA  IS #84E9: 
--* C constant turned into a VAL INT
VAL INT GL.COMPRESSED.LUMINANCE  IS #84EA: 
--* C constant turned into a VAL INT
VAL INT GL.COMPRESSED.LUMINANCE.ALPHA  IS #84EB: 
--* C constant turned into a VAL INT
VAL INT GL.COMPRESSED.INTENSITY  IS #84EC: 
--* C constant turned into a VAL INT
VAL INT GL.COMPRESSED.RGB  IS #84ED: 
--* C constant turned into a VAL INT
VAL INT GL.COMPRESSED.RGBA  IS #84EE: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COMPRESSION.HINT  IS #84EF: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COMPRESSED.IMAGE.SIZE  IS #86A0: 
--* C constant turned into a VAL INT
VAL INT GL.TEXTURE.COMPRESSED  IS #86A1: 
--* C constant turned into a VAL INT
VAL INT GL.NUM.COMPRESSED.TEXTURE.FORMATS  IS #86A2: 
--* C constant turned into a VAL INT
VAL INT GL.COMPRESSED.TEXTURE.FORMATS  IS #86A3: 
--* C constant turned into a VAL INT
VAL INT GL.MULTISAMPLE  IS #809D: 
--* C constant turned into a VAL INT
VAL INT GL.SAMPLE.ALPHA.TO.COVERAGE  IS #809E: 
--* C constant turned into a VAL INT
VAL INT GL.SAMPLE.ALPHA.TO.ONE  IS #809F: 
--* C constant turned into a VAL INT
VAL INT GL.SAMPLE.COVERAGE  IS #80A0: 
--* C constant turned into a VAL INT
VAL INT GL.SAMPLE.BUFFERS  IS #80A8: 
--* C constant turned into a VAL INT
VAL INT GL.SAMPLES  IS #80A9: 
--* C constant turned into a VAL INT
VAL INT GL.SAMPLE.COVERAGE.VALUE  IS #80AA: 
--* C constant turned into a VAL INT
VAL INT GL.SAMPLE.COVERAGE.INVERT  IS #80AB: 
--* C constant turned into a VAL INT
VAL INT GL.MULTISAMPLE.BIT  IS #20000000: 
--* C constant turned into a VAL INT
VAL INT GL.TRANSPOSE.MODELVIEW.MATRIX  IS #84E3: 
--* C constant turned into a VAL INT
VAL INT GL.TRANSPOSE.PROJECTION.MATRIX  IS #84E4: 
--* C constant turned into a VAL INT
VAL INT GL.TRANSPOSE.TEXTURE.MATRIX  IS #84E5: 
--* C constant turned into a VAL INT
VAL INT GL.TRANSPOSE.COLOR.MATRIX  IS #84E6: 
--* C constant turned into a VAL INT
VAL INT GL.COMBINE  IS #8570: 
--* C constant turned into a VAL INT
VAL INT GL.COMBINE.RGB  IS #8571: 
--* C constant turned into a VAL INT
VAL INT GL.COMBINE.ALPHA  IS #8572: 
--* C constant turned into a VAL INT
VAL INT GL.SOURCE0.RGB  IS #8580: 
--* C constant turned into a VAL INT
VAL INT GL.SOURCE1.RGB  IS #8581: 
--* C constant turned into a VAL INT
VAL INT GL.SOURCE2.RGB  IS #8582: 
--* C constant turned into a VAL INT
VAL INT GL.SOURCE0.ALPHA  IS #8588: 
--* C constant turned into a VAL INT
VAL INT GL.SOURCE1.ALPHA  IS #8589: 
--* C constant turned into a VAL INT
VAL INT GL.SOURCE2.ALPHA  IS #858A: 
--* C constant turned into a VAL INT
VAL INT GL.OPERAND0.RGB  IS #8590: 
--* C constant turned into a VAL INT
VAL INT GL.OPERAND1.RGB  IS #8591: 
--* C constant turned into a VAL INT
VAL INT GL.OPERAND2.RGB  IS #8592: 
--* C constant turned into a VAL INT
VAL INT GL.OPERAND0.ALPHA  IS #8598: 
--* C constant turned into a VAL INT
VAL INT GL.OPERAND1.ALPHA  IS #8599: 
--* C constant turned into a VAL INT
VAL INT GL.OPERAND2.ALPHA  IS #859A: 
--* C constant turned into a VAL INT
VAL INT GL.RGB.SCALE  IS #8573: 
--* C constant turned into a VAL INT
VAL INT GL.ADD.SIGNED  IS #8574: 
--* C constant turned into a VAL INT
VAL INT GL.INTERPOLATE  IS #8575: 
--* C constant turned into a VAL INT
VAL INT GL.SUBTRACT  IS #84E7: 
--* C constant turned into a VAL INT
VAL INT GL.CONSTANT  IS #8576: 
--* C constant turned into a VAL INT
VAL INT GL.PRIMARY.COLOR  IS #8577: 
--* C constant turned into a VAL INT
VAL INT GL.PREVIOUS  IS #8578: 
--* C constant turned into a VAL INT
VAL INT GL.DOT3.RGB  IS #86AE: 
--* C constant turned into a VAL INT
VAL INT GL.DOT3.RGBA  IS #86AF: 
--* C constant turned into a VAL INT
VAL INT GL.CLAMP.TO.BORDER  IS #812D: 
#PRAGMA EXTERNAL "PROC C.glClearIndex (VAL REAL32 c) = 0"

--* FFI interface to C function
-- @param c is a pointer to a GLfloat
INLINE PROC glClearIndex (VAL REAL32 c)
  C.glClearIndex (c)
:

#PRAGMA EXTERNAL "PROC C.glClearColor (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLclampf
-- @param green is a pointer to a GLclampf
-- @param blue is a pointer to a GLclampf
-- @param alpha is a pointer to a GLclampf
INLINE PROC glClearColor (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha)
  C.glClearColor (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glClear (VAL INT mask) = 0"

--* FFI interface to C function
-- @param mask is a pointer to a GLbitfield
INLINE PROC glClear (VAL INT mask)
  C.glClear (mask)
:

#PRAGMA EXTERNAL "PROC C.glIndexMask (VAL INT mask) = 0"

--* FFI interface to C function
-- @param mask is a pointer to a GLuint
INLINE PROC glIndexMask (VAL INT mask)
  C.glIndexMask (mask)
:

#PRAGMA EXTERNAL "PROC C.glColorMask (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLboolean
-- @param green is a pointer to a GLboolean
-- @param blue is a pointer to a GLboolean
-- @param alpha is a pointer to a GLboolean
INLINE PROC glColorMask (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha)
  C.glColorMask (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glAlphaFunc (VAL INT func, VAL REAL32 ref) = 0"

--* FFI interface to C function
-- @param func is a pointer to a GLenum
-- @param ref is a pointer to a GLclampf
INLINE PROC glAlphaFunc (VAL INT func, VAL REAL32 ref)
  C.glAlphaFunc (func, ref)
:

#PRAGMA EXTERNAL "PROC C.glBlendFunc (VAL INT sfactor, VAL INT dfactor) = 0"

--* FFI interface to C function
-- @param sfactor is a pointer to a GLenum
-- @param dfactor is a pointer to a GLenum
INLINE PROC glBlendFunc (VAL INT sfactor, VAL INT dfactor)
  C.glBlendFunc (sfactor, dfactor)
:

#PRAGMA EXTERNAL "PROC C.glLogicOp (VAL INT opcode) = 0"

--* FFI interface to C function
-- @param opcode is a pointer to a GLenum
INLINE PROC glLogicOp (VAL INT opcode)
  C.glLogicOp (opcode)
:

#PRAGMA EXTERNAL "PROC C.glCullFace (VAL INT mode) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
INLINE PROC glCullFace (VAL INT mode)
  C.glCullFace (mode)
:

#PRAGMA EXTERNAL "PROC C.glFrontFace (VAL INT mode) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
INLINE PROC glFrontFace (VAL INT mode)
  C.glFrontFace (mode)
:

#PRAGMA EXTERNAL "PROC C.glPointSize (VAL REAL32 size) = 0"

--* FFI interface to C function
-- @param size is a pointer to a GLfloat
INLINE PROC glPointSize (VAL REAL32 size)
  C.glPointSize (size)
:

#PRAGMA EXTERNAL "PROC C.glLineWidth (VAL REAL32 width) = 0"

--* FFI interface to C function
-- @param width is a pointer to a GLfloat
INLINE PROC glLineWidth (VAL REAL32 width)
  C.glLineWidth (width)
:

#PRAGMA EXTERNAL "PROC C.glLineStipple (VAL INT factor, VAL INT16 pattern) = 0"

--* FFI interface to C function
-- @param factor is a pointer to a GLint
-- @param pattern is a pointer to a GLushort
INLINE PROC glLineStipple (VAL INT factor, VAL INT16 pattern)
  C.glLineStipple (factor, pattern)
:

#PRAGMA EXTERNAL "PROC C.glPolygonMode (VAL INT face, VAL INT mode) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param mode is a pointer to a GLenum
INLINE PROC glPolygonMode (VAL INT face, VAL INT mode)
  C.glPolygonMode (face, mode)
:

#PRAGMA EXTERNAL "PROC C.glPolygonOffset (VAL REAL32 factor, VAL REAL32 units) = 0"

--* FFI interface to C function
-- @param factor is a pointer to a GLfloat
-- @param units is a pointer to a GLfloat
INLINE PROC glPolygonOffset (VAL REAL32 factor, VAL REAL32 units)
  C.glPolygonOffset (factor, units)
:

#PRAGMA EXTERNAL "PROC C.glPolygonStipple (BYTE mask) = 0"

--* FFI interface to C function
-- @param mask is a pointer to a p.q(const).GLubyte
INLINE PROC glPolygonStipple (BYTE mask)
  C.glPolygonStipple (mask)
:

#PRAGMA EXTERNAL "PROC C.glGetPolygonStipple (BYTE mask) = 0"

--* FFI interface to C function
-- @param mask is a pointer to a p.GLubyte
INLINE PROC glGetPolygonStipple (BYTE mask)
  C.glGetPolygonStipple (mask)
:

#PRAGMA EXTERNAL "PROC C.glEdgeFlag (VAL BYTE flag) = 0"

--* FFI interface to C function
-- @param flag is a pointer to a GLboolean
INLINE PROC glEdgeFlag (VAL BYTE flag)
  C.glEdgeFlag (flag)
:

#PRAGMA EXTERNAL "PROC C.glEdgeFlagv (BYTE flag) = 0"

--* FFI interface to C function
-- @param flag is a pointer to a p.q(const).GLboolean
INLINE PROC glEdgeFlagv (BYTE flag)
  C.glEdgeFlagv (flag)
:

#PRAGMA EXTERNAL "PROC C.glScissor (VAL INT x, VAL INT y, VAL INT width, VAL INT height) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
INLINE PROC glScissor (VAL INT x, VAL INT y, VAL INT width, VAL INT height)
  C.glScissor (x, y, width, height)
:

#PRAGMA EXTERNAL "PROC C.glClipPlane (VAL INT plane, REAL64 equation) = 0"

--* FFI interface to C function
-- @param plane is a pointer to a GLenum
-- @param equation is a pointer to a p.q(const).GLdouble
INLINE PROC glClipPlane (VAL INT plane, REAL64 equation)
  C.glClipPlane (plane, equation)
:

#PRAGMA EXTERNAL "PROC C.glGetClipPlane (VAL INT plane, REAL64 equation) = 0"

--* FFI interface to C function
-- @param plane is a pointer to a GLenum
-- @param equation is a pointer to a p.GLdouble
INLINE PROC glGetClipPlane (VAL INT plane, REAL64 equation)
  C.glGetClipPlane (plane, equation)
:

#PRAGMA EXTERNAL "PROC C.glDrawBuffer (VAL INT mode) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
INLINE PROC glDrawBuffer (VAL INT mode)
  C.glDrawBuffer (mode)
:

#PRAGMA EXTERNAL "PROC C.glReadBuffer (VAL INT mode) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
INLINE PROC glReadBuffer (VAL INT mode)
  C.glReadBuffer (mode)
:

#PRAGMA EXTERNAL "PROC C.glEnable (VAL INT cap) = 0"

--* FFI interface to C function
-- @param cap is a pointer to a GLenum
INLINE PROC glEnable (VAL INT cap)
  C.glEnable (cap)
:

#PRAGMA EXTERNAL "PROC C.glDisable (VAL INT cap) = 0"

--* FFI interface to C function
-- @param cap is a pointer to a GLenum
INLINE PROC glDisable (VAL INT cap)
  C.glDisable (cap)
:

#PRAGMA EXTERNAL "PROC C.glIsEnabled (RESULT BYTE return.value, VAL INT cap) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLboolean
-- @param cap is a pointer to a GLenum
INLINE PROC glIsEnabled (RESULT BYTE return.value, VAL INT cap)
  C.glIsEnabled (return.value, cap)
:

#PRAGMA EXTERNAL "PROC C.glEnableClientState (VAL INT cap) = 0"

--* FFI interface to C function
-- @param cap is a pointer to a GLenum
INLINE PROC glEnableClientState (VAL INT cap)
  C.glEnableClientState (cap)
:

#PRAGMA EXTERNAL "PROC C.glDisableClientState (VAL INT cap) = 0"

--* FFI interface to C function
-- @param cap is a pointer to a GLenum
INLINE PROC glDisableClientState (VAL INT cap)
  C.glDisableClientState (cap)
:

#PRAGMA EXTERNAL "PROC C.glGetBooleanv (VAL INT pname, BYTE params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLboolean
INLINE PROC glGetBooleanv (VAL INT pname, BYTE params)
  C.glGetBooleanv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetDoublev (VAL INT pname, REAL64 params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLdouble
INLINE PROC glGetDoublev (VAL INT pname, REAL64 params)
  C.glGetDoublev (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetFloatv (VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLfloat
INLINE PROC glGetFloatv (VAL INT pname, REAL32 params)
  C.glGetFloatv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetIntegerv (VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLint
INLINE PROC glGetIntegerv (VAL INT pname, INT params)
  C.glGetIntegerv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glPushAttrib (VAL INT mask) = 0"

--* FFI interface to C function
-- @param mask is a pointer to a GLbitfield
INLINE PROC glPushAttrib (VAL INT mask)
  C.glPushAttrib (mask)
:

#PRAGMA EXTERNAL "PROC C.glPopAttrib () = 0"

--* FFI interface to C function
INLINE PROC glPopAttrib ()
  C.glPopAttrib ()
:

#PRAGMA EXTERNAL "PROC C.glPushClientAttrib (VAL INT mask) = 0"

--* FFI interface to C function
-- @param mask is a pointer to a GLbitfield
INLINE PROC glPushClientAttrib (VAL INT mask)
  C.glPushClientAttrib (mask)
:

#PRAGMA EXTERNAL "PROC C.glPopClientAttrib () = 0"

--* FFI interface to C function
INLINE PROC glPopClientAttrib ()
  C.glPopClientAttrib ()
:

#PRAGMA EXTERNAL "PROC C.glRenderMode (RESULT INT return.value, VAL INT mode) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLint
-- @param mode is a pointer to a GLenum
INLINE PROC glRenderMode (RESULT INT return.value, VAL INT mode)
  C.glRenderMode (return.value, mode)
:

#PRAGMA EXTERNAL "PROC C.glGetError (RESULT INT return.value) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLenum
INLINE PROC glGetError (RESULT INT return.value)
  C.glGetError (return.value)
:

#PRAGMA EXTERNAL "PROC C.glGetString (RESULT BYTE return.value, VAL INT name) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type p.q(const).GLubyte
-- @param name is a pointer to a GLenum
INLINE PROC glGetString (RESULT BYTE return.value, VAL INT name)
  C.glGetString (return.value, name)
:

#PRAGMA EXTERNAL "PROC C.glFinish () = 0"

--* FFI interface to C function
INLINE PROC glFinish ()
  C.glFinish ()
:

#PRAGMA EXTERNAL "PROC C.glFlush () = 0"

--* FFI interface to C function
INLINE PROC glFlush ()
  C.glFlush ()
:

#PRAGMA EXTERNAL "PROC C.glHint (VAL INT target, VAL INT mode) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param mode is a pointer to a GLenum
INLINE PROC glHint (VAL INT target, VAL INT mode)
  C.glHint (target, mode)
:

#PRAGMA EXTERNAL "PROC C.glClearDepth (VAL REAL64 depth) = 0"

--* FFI interface to C function
-- @param depth is a pointer to a GLclampd
INLINE PROC glClearDepth (VAL REAL64 depth)
  C.glClearDepth (depth)
:

#PRAGMA EXTERNAL "PROC C.glDepthFunc (VAL INT func) = 0"

--* FFI interface to C function
-- @param func is a pointer to a GLenum
INLINE PROC glDepthFunc (VAL INT func)
  C.glDepthFunc (func)
:

#PRAGMA EXTERNAL "PROC C.glDepthMask (VAL BYTE flag) = 0"

--* FFI interface to C function
-- @param flag is a pointer to a GLboolean
INLINE PROC glDepthMask (VAL BYTE flag)
  C.glDepthMask (flag)
:

#PRAGMA EXTERNAL "PROC C.glDepthRange (VAL REAL64 near.val, VAL REAL64 far.val) = 0"

--* FFI interface to C function
-- @param near.val is a pointer to a GLclampd
-- @param far.val is a pointer to a GLclampd
INLINE PROC glDepthRange (VAL REAL64 near.val, VAL REAL64 far.val)
  C.glDepthRange (near.val, far.val)
:

#PRAGMA EXTERNAL "PROC C.glClearAccum (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLfloat
-- @param green is a pointer to a GLfloat
-- @param blue is a pointer to a GLfloat
-- @param alpha is a pointer to a GLfloat
INLINE PROC glClearAccum (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha)
  C.glClearAccum (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glAccum (VAL INT op, VAL REAL32 value) = 0"

--* FFI interface to C function
-- @param op is a pointer to a GLenum
-- @param value is a pointer to a GLfloat
INLINE PROC glAccum (VAL INT op, VAL REAL32 value)
  C.glAccum (op, value)
:

#PRAGMA EXTERNAL "PROC C.glMatrixMode (VAL INT mode) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
INLINE PROC glMatrixMode (VAL INT mode)
  C.glMatrixMode (mode)
:

#PRAGMA EXTERNAL "PROC C.glOrtho (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val) = 0"

--* FFI interface to C function
-- @param left is a pointer to a GLdouble
-- @param right is a pointer to a GLdouble
-- @param bottom is a pointer to a GLdouble
-- @param top is a pointer to a GLdouble
-- @param near.val is a pointer to a GLdouble
-- @param far.val is a pointer to a GLdouble
INLINE PROC glOrtho (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val)
  C.glOrtho (left, right, bottom, top, near.val, far.val)
:

#PRAGMA EXTERNAL "PROC C.glFrustum (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val) = 0"

--* FFI interface to C function
-- @param left is a pointer to a GLdouble
-- @param right is a pointer to a GLdouble
-- @param bottom is a pointer to a GLdouble
-- @param top is a pointer to a GLdouble
-- @param near.val is a pointer to a GLdouble
-- @param far.val is a pointer to a GLdouble
INLINE PROC glFrustum (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val)
  C.glFrustum (left, right, bottom, top, near.val, far.val)
:

#PRAGMA EXTERNAL "PROC C.glViewport (VAL INT x, VAL INT y, VAL INT width, VAL INT height) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
INLINE PROC glViewport (VAL INT x, VAL INT y, VAL INT width, VAL INT height)
  C.glViewport (x, y, width, height)
:

#PRAGMA EXTERNAL "PROC C.glPushMatrix () = 0"

--* FFI interface to C function
INLINE PROC glPushMatrix ()
  C.glPushMatrix ()
:

#PRAGMA EXTERNAL "PROC C.glPopMatrix () = 0"

--* FFI interface to C function
INLINE PROC glPopMatrix ()
  C.glPopMatrix ()
:

#PRAGMA EXTERNAL "PROC C.glLoadIdentity () = 0"

--* FFI interface to C function
INLINE PROC glLoadIdentity ()
  C.glLoadIdentity ()
:

#PRAGMA EXTERNAL "PROC C.glLoadMatrixd (REAL64 m) = 0"

--* FFI interface to C function
-- @param m is a pointer to a p.q(const).GLdouble
INLINE PROC glLoadMatrixd (REAL64 m)
  C.glLoadMatrixd (m)
:

#PRAGMA EXTERNAL "PROC C.glLoadMatrixf (REAL32 m) = 0"

--* FFI interface to C function
-- @param m is a pointer to a p.q(const).GLfloat
INLINE PROC glLoadMatrixf (REAL32 m)
  C.glLoadMatrixf (m)
:

#PRAGMA EXTERNAL "PROC C.glMultMatrixd (REAL64 m) = 0"

--* FFI interface to C function
-- @param m is a pointer to a p.q(const).GLdouble
INLINE PROC glMultMatrixd (REAL64 m)
  C.glMultMatrixd (m)
:

#PRAGMA EXTERNAL "PROC C.glMultMatrixf (REAL32 m) = 0"

--* FFI interface to C function
-- @param m is a pointer to a p.q(const).GLfloat
INLINE PROC glMultMatrixf (REAL32 m)
  C.glMultMatrixf (m)
:

#PRAGMA EXTERNAL "PROC C.glRotated (VAL REAL64 angle, VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* FFI interface to C function
-- @param angle is a pointer to a GLdouble
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param z is a pointer to a GLdouble
INLINE PROC glRotated (VAL REAL64 angle, VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glRotated (angle, x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRotatef (VAL REAL32 angle, VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* FFI interface to C function
-- @param angle is a pointer to a GLfloat
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
-- @param z is a pointer to a GLfloat
INLINE PROC glRotatef (VAL REAL32 angle, VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glRotatef (angle, x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glScaled (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param z is a pointer to a GLdouble
INLINE PROC glScaled (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glScaled (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glScalef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
-- @param z is a pointer to a GLfloat
INLINE PROC glScalef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glScalef (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glTranslated (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param z is a pointer to a GLdouble
INLINE PROC glTranslated (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glTranslated (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glTranslatef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
-- @param z is a pointer to a GLfloat
INLINE PROC glTranslatef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glTranslatef (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glIsList (RESULT BYTE return.value, VAL INT list) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLboolean
-- @param list is a pointer to a GLuint
INLINE PROC glIsList (RESULT BYTE return.value, VAL INT list)
  C.glIsList (return.value, list)
:

#PRAGMA EXTERNAL "PROC C.glDeleteLists (VAL INT list, VAL INT range) = 0"

--* FFI interface to C function
-- @param list is a pointer to a GLuint
-- @param range is a pointer to a GLsizei
INLINE PROC glDeleteLists (VAL INT list, VAL INT range)
  C.glDeleteLists (list, range)
:

#PRAGMA EXTERNAL "PROC C.glGenLists (RESULT INT return.value, VAL INT range) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLuint
-- @param range is a pointer to a GLsizei
INLINE PROC glGenLists (RESULT INT return.value, VAL INT range)
  C.glGenLists (return.value, range)
:

#PRAGMA EXTERNAL "PROC C.glNewList (VAL INT list, VAL INT mode) = 0"

--* FFI interface to C function
-- @param list is a pointer to a GLuint
-- @param mode is a pointer to a GLenum
INLINE PROC glNewList (VAL INT list, VAL INT mode)
  C.glNewList (list, mode)
:

#PRAGMA EXTERNAL "PROC C.glEndList () = 0"

--* FFI interface to C function
INLINE PROC glEndList ()
  C.glEndList ()
:

#PRAGMA EXTERNAL "PROC C.glCallList (VAL INT list) = 0"

--* FFI interface to C function
-- @param list is a pointer to a GLuint
INLINE PROC glCallList (VAL INT list)
  C.glCallList (list)
:

#PRAGMA EXTERNAL "PROC C.glCallLists (VAL INT n, VAL INT type, []INT lists) = 0"

--* FFI interface to C function
-- @param n is a pointer to a GLsizei
-- @param type is a pointer to a GLenum
--@param lists pointer to a C array of p.q(const).GLvoid
INLINE PROC glCallLists (VAL INT n, VAL INT type, []INT lists)
  C.glCallLists (n, type, lists)
:

#PRAGMA EXTERNAL "PROC C.glListBase (VAL INT base) = 0"

--* FFI interface to C function
-- @param base is a pointer to a GLuint
INLINE PROC glListBase (VAL INT base)
  C.glListBase (base)
:

#PRAGMA EXTERNAL "PROC C.glBegin (VAL INT mode) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
INLINE PROC glBegin (VAL INT mode)
  C.glBegin (mode)
:

#PRAGMA EXTERNAL "PROC C.glEnd () = 0"

--* FFI interface to C function
INLINE PROC glEnd ()
  C.glEnd ()
:

#PRAGMA EXTERNAL "PROC C.glVertex2d (VAL REAL64 x, VAL REAL64 y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
INLINE PROC glVertex2d (VAL REAL64 x, VAL REAL64 y)
  C.glVertex2d (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex2f (VAL REAL32 x, VAL REAL32 y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
INLINE PROC glVertex2f (VAL REAL32 x, VAL REAL32 y)
  C.glVertex2f (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex2i (VAL INT x, VAL INT y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
INLINE PROC glVertex2i (VAL INT x, VAL INT y)
  C.glVertex2i (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex2s (VAL INT16 x, VAL INT16 y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLshort
-- @param y is a pointer to a GLshort
INLINE PROC glVertex2s (VAL INT16 x, VAL INT16 y)
  C.glVertex2s (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param z is a pointer to a GLdouble
INLINE PROC glVertex3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glVertex3d (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
-- @param z is a pointer to a GLfloat
INLINE PROC glVertex3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glVertex3f (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex3i (VAL INT x, VAL INT y, VAL INT z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param z is a pointer to a GLint
INLINE PROC glVertex3i (VAL INT x, VAL INT y, VAL INT z)
  C.glVertex3i (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex3s (VAL INT16 x, VAL INT16 y, VAL INT16 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLshort
-- @param y is a pointer to a GLshort
-- @param z is a pointer to a GLshort
INLINE PROC glVertex3s (VAL INT16 x, VAL INT16 y, VAL INT16 z)
  C.glVertex3s (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param z is a pointer to a GLdouble
-- @param w is a pointer to a GLdouble
INLINE PROC glVertex4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w)
  C.glVertex4d (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
-- @param z is a pointer to a GLfloat
-- @param w is a pointer to a GLfloat
INLINE PROC glVertex4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w)
  C.glVertex4f (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param z is a pointer to a GLint
-- @param w is a pointer to a GLint
INLINE PROC glVertex4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w)
  C.glVertex4i (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLshort
-- @param y is a pointer to a GLshort
-- @param z is a pointer to a GLshort
-- @param w is a pointer to a GLshort
INLINE PROC glVertex4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w)
  C.glVertex4s (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex2dv (VAL [2]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glVertex2dv (VAL [2]REAL64 v)
  C.glVertex2dv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex2fv (VAL [2]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glVertex2fv (VAL [2]REAL32 v)
  C.glVertex2fv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex2iv (VAL [2]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glVertex2iv (VAL [2]INT v)
  C.glVertex2iv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex2sv (VAL [2]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glVertex2sv (VAL [2]INT16 v)
  C.glVertex2sv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3dv (VAL [3]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glVertex3dv (VAL [3]REAL64 v)
  C.glVertex3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3fv (VAL [3]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glVertex3fv (VAL [3]REAL32 v)
  C.glVertex3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3iv (VAL [3]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glVertex3iv (VAL [3]INT v)
  C.glVertex3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3sv (VAL [3]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glVertex3sv (VAL [3]INT16 v)
  C.glVertex3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4dv (VAL [4]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glVertex4dv (VAL [4]REAL64 v)
  C.glVertex4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4fv (VAL [4]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glVertex4fv (VAL [4]REAL32 v)
  C.glVertex4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4iv (VAL [4]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glVertex4iv (VAL [4]INT v)
  C.glVertex4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4sv (VAL [4]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glVertex4sv (VAL [4]INT16 v)
  C.glVertex4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3b (VAL BYTE nx, VAL BYTE ny, VAL BYTE nz) = 0"

--* FFI interface to C function
-- @param nx is a pointer to a GLbyte
-- @param ny is a pointer to a GLbyte
-- @param nz is a pointer to a GLbyte
INLINE PROC glNormal3b (VAL BYTE nx, VAL BYTE ny, VAL BYTE nz)
  C.glNormal3b (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3d (VAL REAL64 nx, VAL REAL64 ny, VAL REAL64 nz) = 0"

--* FFI interface to C function
-- @param nx is a pointer to a GLdouble
-- @param ny is a pointer to a GLdouble
-- @param nz is a pointer to a GLdouble
INLINE PROC glNormal3d (VAL REAL64 nx, VAL REAL64 ny, VAL REAL64 nz)
  C.glNormal3d (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3f (VAL REAL32 nx, VAL REAL32 ny, VAL REAL32 nz) = 0"

--* FFI interface to C function
-- @param nx is a pointer to a GLfloat
-- @param ny is a pointer to a GLfloat
-- @param nz is a pointer to a GLfloat
INLINE PROC glNormal3f (VAL REAL32 nx, VAL REAL32 ny, VAL REAL32 nz)
  C.glNormal3f (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3i (VAL INT nx, VAL INT ny, VAL INT nz) = 0"

--* FFI interface to C function
-- @param nx is a pointer to a GLint
-- @param ny is a pointer to a GLint
-- @param nz is a pointer to a GLint
INLINE PROC glNormal3i (VAL INT nx, VAL INT ny, VAL INT nz)
  C.glNormal3i (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3s (VAL INT16 nx, VAL INT16 ny, VAL INT16 nz) = 0"

--* FFI interface to C function
-- @param nx is a pointer to a GLshort
-- @param ny is a pointer to a GLshort
-- @param nz is a pointer to a GLshort
INLINE PROC glNormal3s (VAL INT16 nx, VAL INT16 ny, VAL INT16 nz)
  C.glNormal3s (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3bv (VAL [3]BYTE v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLbyte
INLINE PROC glNormal3bv (VAL [3]BYTE v)
  C.glNormal3bv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3dv (VAL [3]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glNormal3dv (VAL [3]REAL64 v)
  C.glNormal3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3fv (VAL [3]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glNormal3fv (VAL [3]REAL32 v)
  C.glNormal3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3iv (VAL [3]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glNormal3iv (VAL [3]INT v)
  C.glNormal3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3sv (VAL [3]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glNormal3sv (VAL [3]INT16 v)
  C.glNormal3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glIndexd (VAL REAL64 c) = 0"

--* FFI interface to C function
-- @param c is a pointer to a GLdouble
INLINE PROC glIndexd (VAL REAL64 c)
  C.glIndexd (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexf (VAL REAL32 c) = 0"

--* FFI interface to C function
-- @param c is a pointer to a GLfloat
INLINE PROC glIndexf (VAL REAL32 c)
  C.glIndexf (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexi (VAL INT c) = 0"

--* FFI interface to C function
-- @param c is a pointer to a GLint
INLINE PROC glIndexi (VAL INT c)
  C.glIndexi (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexs (VAL INT16 c) = 0"

--* FFI interface to C function
-- @param c is a pointer to a GLshort
INLINE PROC glIndexs (VAL INT16 c)
  C.glIndexs (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexub (VAL BYTE c) = 0"

--* FFI interface to C function
-- @param c is a pointer to a GLubyte
INLINE PROC glIndexub (VAL BYTE c)
  C.glIndexub (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexdv (VAL []REAL64 c) = 0"

--* FFI interface to C function
--@param c pointer to a C array of q(const).GLdouble
INLINE PROC glIndexdv (VAL []REAL64 c)
  C.glIndexdv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexfv (VAL []REAL32 c) = 0"

--* FFI interface to C function
--@param c pointer to a C array of q(const).GLfloat
INLINE PROC glIndexfv (VAL []REAL32 c)
  C.glIndexfv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexiv (VAL []INT c) = 0"

--* FFI interface to C function
--@param c pointer to a C array of q(const).GLint
INLINE PROC glIndexiv (VAL []INT c)
  C.glIndexiv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexsv (VAL []INT16 c) = 0"

--* FFI interface to C function
--@param c pointer to a C array of q(const).GLshort
INLINE PROC glIndexsv (VAL []INT16 c)
  C.glIndexsv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexubv (VAL []BYTE c) = 0"

--* FFI interface to C function
--@param c pointer to a C array of q(const).GLubyte
INLINE PROC glIndexubv (VAL []BYTE c)
  C.glIndexubv (c)
:

#PRAGMA EXTERNAL "PROC C.glColor3b (VAL BYTE red, VAL BYTE green, VAL BYTE blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLbyte
-- @param green is a pointer to a GLbyte
-- @param blue is a pointer to a GLbyte
INLINE PROC glColor3b (VAL BYTE red, VAL BYTE green, VAL BYTE blue)
  C.glColor3b (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLdouble
-- @param green is a pointer to a GLdouble
-- @param blue is a pointer to a GLdouble
INLINE PROC glColor3d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue)
  C.glColor3d (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLfloat
-- @param green is a pointer to a GLfloat
-- @param blue is a pointer to a GLfloat
INLINE PROC glColor3f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue)
  C.glColor3f (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3i (VAL INT red, VAL INT green, VAL INT blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLint
-- @param green is a pointer to a GLint
-- @param blue is a pointer to a GLint
INLINE PROC glColor3i (VAL INT red, VAL INT green, VAL INT blue)
  C.glColor3i (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3s (VAL INT16 red, VAL INT16 green, VAL INT16 blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLshort
-- @param green is a pointer to a GLshort
-- @param blue is a pointer to a GLshort
INLINE PROC glColor3s (VAL INT16 red, VAL INT16 green, VAL INT16 blue)
  C.glColor3s (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLubyte
-- @param green is a pointer to a GLubyte
-- @param blue is a pointer to a GLubyte
INLINE PROC glColor3ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue)
  C.glColor3ub (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3ui (VAL INT red, VAL INT green, VAL INT blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLuint
-- @param green is a pointer to a GLuint
-- @param blue is a pointer to a GLuint
INLINE PROC glColor3ui (VAL INT red, VAL INT green, VAL INT blue)
  C.glColor3ui (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3us (VAL INT16 red, VAL INT16 green, VAL INT16 blue) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLushort
-- @param green is a pointer to a GLushort
-- @param blue is a pointer to a GLushort
INLINE PROC glColor3us (VAL INT16 red, VAL INT16 green, VAL INT16 blue)
  C.glColor3us (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor4b (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLbyte
-- @param green is a pointer to a GLbyte
-- @param blue is a pointer to a GLbyte
-- @param alpha is a pointer to a GLbyte
INLINE PROC glColor4b (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha)
  C.glColor4b (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue, VAL REAL64 alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLdouble
-- @param green is a pointer to a GLdouble
-- @param blue is a pointer to a GLdouble
-- @param alpha is a pointer to a GLdouble
INLINE PROC glColor4d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue, VAL REAL64 alpha)
  C.glColor4d (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLfloat
-- @param green is a pointer to a GLfloat
-- @param blue is a pointer to a GLfloat
-- @param alpha is a pointer to a GLfloat
INLINE PROC glColor4f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha)
  C.glColor4f (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4i (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLint
-- @param green is a pointer to a GLint
-- @param blue is a pointer to a GLint
-- @param alpha is a pointer to a GLint
INLINE PROC glColor4i (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha)
  C.glColor4i (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4s (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLshort
-- @param green is a pointer to a GLshort
-- @param blue is a pointer to a GLshort
-- @param alpha is a pointer to a GLshort
INLINE PROC glColor4s (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha)
  C.glColor4s (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLubyte
-- @param green is a pointer to a GLubyte
-- @param blue is a pointer to a GLubyte
-- @param alpha is a pointer to a GLubyte
INLINE PROC glColor4ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha)
  C.glColor4ub (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4ui (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLuint
-- @param green is a pointer to a GLuint
-- @param blue is a pointer to a GLuint
-- @param alpha is a pointer to a GLuint
INLINE PROC glColor4ui (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha)
  C.glColor4ui (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4us (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha) = 0"

--* FFI interface to C function
-- @param red is a pointer to a GLushort
-- @param green is a pointer to a GLushort
-- @param blue is a pointer to a GLushort
-- @param alpha is a pointer to a GLushort
INLINE PROC glColor4us (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha)
  C.glColor4us (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor3bv (VAL [3]BYTE v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLbyte
INLINE PROC glColor3bv (VAL [3]BYTE v)
  C.glColor3bv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3dv (VAL [3]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glColor3dv (VAL [3]REAL64 v)
  C.glColor3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3fv (VAL [3]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glColor3fv (VAL [3]REAL32 v)
  C.glColor3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3iv (VAL [3]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glColor3iv (VAL [3]INT v)
  C.glColor3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3sv (VAL [3]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glColor3sv (VAL [3]INT16 v)
  C.glColor3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3ubv (VAL [3]BYTE v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLubyte
INLINE PROC glColor3ubv (VAL [3]BYTE v)
  C.glColor3ubv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3uiv (VAL [3]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLuint
INLINE PROC glColor3uiv (VAL [3]INT v)
  C.glColor3uiv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3usv (VAL [3]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLushort
INLINE PROC glColor3usv (VAL [3]INT16 v)
  C.glColor3usv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4bv (VAL [4]BYTE v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLbyte
INLINE PROC glColor4bv (VAL [4]BYTE v)
  C.glColor4bv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4dv (VAL [4]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glColor4dv (VAL [4]REAL64 v)
  C.glColor4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4fv (VAL [4]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glColor4fv (VAL [4]REAL32 v)
  C.glColor4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4iv (VAL [4]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glColor4iv (VAL [4]INT v)
  C.glColor4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4sv (VAL [4]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glColor4sv (VAL [4]INT16 v)
  C.glColor4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4ubv (VAL [4]BYTE v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLubyte
INLINE PROC glColor4ubv (VAL [4]BYTE v)
  C.glColor4ubv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4uiv (VAL [4]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLuint
INLINE PROC glColor4uiv (VAL [4]INT v)
  C.glColor4uiv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4usv (VAL [4]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLushort
INLINE PROC glColor4usv (VAL [4]INT16 v)
  C.glColor4usv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1d (VAL REAL64 s) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLdouble
INLINE PROC glTexCoord1d (VAL REAL64 s)
  C.glTexCoord1d (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1f (VAL REAL32 s) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLfloat
INLINE PROC glTexCoord1f (VAL REAL32 s)
  C.glTexCoord1f (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1i (VAL INT s) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLint
INLINE PROC glTexCoord1i (VAL INT s)
  C.glTexCoord1i (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1s (VAL INT16 s) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLshort
INLINE PROC glTexCoord1s (VAL INT16 s)
  C.glTexCoord1s (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2d (VAL REAL64 s, VAL REAL64 t) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLdouble
-- @param t is a pointer to a GLdouble
INLINE PROC glTexCoord2d (VAL REAL64 s, VAL REAL64 t)
  C.glTexCoord2d (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2f (VAL REAL32 s, VAL REAL32 t) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLfloat
-- @param t is a pointer to a GLfloat
INLINE PROC glTexCoord2f (VAL REAL32 s, VAL REAL32 t)
  C.glTexCoord2f (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2i (VAL INT s, VAL INT t) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLint
-- @param t is a pointer to a GLint
INLINE PROC glTexCoord2i (VAL INT s, VAL INT t)
  C.glTexCoord2i (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2s (VAL INT16 s, VAL INT16 t) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLshort
-- @param t is a pointer to a GLshort
INLINE PROC glTexCoord2s (VAL INT16 s, VAL INT16 t)
  C.glTexCoord2s (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLdouble
-- @param t is a pointer to a GLdouble
-- @param r is a pointer to a GLdouble
INLINE PROC glTexCoord3d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r)
  C.glTexCoord3d (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLfloat
-- @param t is a pointer to a GLfloat
-- @param r is a pointer to a GLfloat
INLINE PROC glTexCoord3f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r)
  C.glTexCoord3f (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3i (VAL INT s, VAL INT t, VAL INT r) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLint
-- @param t is a pointer to a GLint
-- @param r is a pointer to a GLint
INLINE PROC glTexCoord3i (VAL INT s, VAL INT t, VAL INT r)
  C.glTexCoord3i (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3s (VAL INT16 s, VAL INT16 t, VAL INT16 r) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLshort
-- @param t is a pointer to a GLshort
-- @param r is a pointer to a GLshort
INLINE PROC glTexCoord3s (VAL INT16 s, VAL INT16 t, VAL INT16 r)
  C.glTexCoord3s (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r, VAL REAL64 q) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLdouble
-- @param t is a pointer to a GLdouble
-- @param r is a pointer to a GLdouble
-- @param q is a pointer to a GLdouble
INLINE PROC glTexCoord4d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r, VAL REAL64 q)
  C.glTexCoord4d (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r, VAL REAL32 q) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLfloat
-- @param t is a pointer to a GLfloat
-- @param r is a pointer to a GLfloat
-- @param q is a pointer to a GLfloat
INLINE PROC glTexCoord4f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r, VAL REAL32 q)
  C.glTexCoord4f (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4i (VAL INT s, VAL INT t, VAL INT r, VAL INT q) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLint
-- @param t is a pointer to a GLint
-- @param r is a pointer to a GLint
-- @param q is a pointer to a GLint
INLINE PROC glTexCoord4i (VAL INT s, VAL INT t, VAL INT r, VAL INT q)
  C.glTexCoord4i (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4s (VAL INT16 s, VAL INT16 t, VAL INT16 r, VAL INT16 q) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLshort
-- @param t is a pointer to a GLshort
-- @param r is a pointer to a GLshort
-- @param q is a pointer to a GLshort
INLINE PROC glTexCoord4s (VAL INT16 s, VAL INT16 t, VAL INT16 r, VAL INT16 q)
  C.glTexCoord4s (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1dv (VAL [1]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glTexCoord1dv (VAL [1]REAL64 v)
  C.glTexCoord1dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1fv (VAL [1]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glTexCoord1fv (VAL [1]REAL32 v)
  C.glTexCoord1fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1iv (VAL [1]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glTexCoord1iv (VAL [1]INT v)
  C.glTexCoord1iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1sv (VAL [1]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glTexCoord1sv (VAL [1]INT16 v)
  C.glTexCoord1sv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2dv (VAL [2]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glTexCoord2dv (VAL [2]REAL64 v)
  C.glTexCoord2dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2fv (VAL [2]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glTexCoord2fv (VAL [2]REAL32 v)
  C.glTexCoord2fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2iv (VAL [2]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glTexCoord2iv (VAL [2]INT v)
  C.glTexCoord2iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2sv (VAL [2]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glTexCoord2sv (VAL [2]INT16 v)
  C.glTexCoord2sv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3dv (VAL [3]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glTexCoord3dv (VAL [3]REAL64 v)
  C.glTexCoord3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3fv (VAL [3]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glTexCoord3fv (VAL [3]REAL32 v)
  C.glTexCoord3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3iv (VAL [3]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glTexCoord3iv (VAL [3]INT v)
  C.glTexCoord3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3sv (VAL [3]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glTexCoord3sv (VAL [3]INT16 v)
  C.glTexCoord3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4dv (VAL [4]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glTexCoord4dv (VAL [4]REAL64 v)
  C.glTexCoord4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4fv (VAL [4]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glTexCoord4fv (VAL [4]REAL32 v)
  C.glTexCoord4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4iv (VAL [4]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glTexCoord4iv (VAL [4]INT v)
  C.glTexCoord4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4sv (VAL [4]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glTexCoord4sv (VAL [4]INT16 v)
  C.glTexCoord4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2d (VAL REAL64 x, VAL REAL64 y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
INLINE PROC glRasterPos2d (VAL REAL64 x, VAL REAL64 y)
  C.glRasterPos2d (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2f (VAL REAL32 x, VAL REAL32 y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
INLINE PROC glRasterPos2f (VAL REAL32 x, VAL REAL32 y)
  C.glRasterPos2f (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2i (VAL INT x, VAL INT y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
INLINE PROC glRasterPos2i (VAL INT x, VAL INT y)
  C.glRasterPos2i (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2s (VAL INT16 x, VAL INT16 y) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLshort
-- @param y is a pointer to a GLshort
INLINE PROC glRasterPos2s (VAL INT16 x, VAL INT16 y)
  C.glRasterPos2s (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param z is a pointer to a GLdouble
INLINE PROC glRasterPos3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glRasterPos3d (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
-- @param z is a pointer to a GLfloat
INLINE PROC glRasterPos3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glRasterPos3f (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3i (VAL INT x, VAL INT y, VAL INT z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param z is a pointer to a GLint
INLINE PROC glRasterPos3i (VAL INT x, VAL INT y, VAL INT z)
  C.glRasterPos3i (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3s (VAL INT16 x, VAL INT16 y, VAL INT16 z) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLshort
-- @param y is a pointer to a GLshort
-- @param z is a pointer to a GLshort
INLINE PROC glRasterPos3s (VAL INT16 x, VAL INT16 y, VAL INT16 z)
  C.glRasterPos3s (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param z is a pointer to a GLdouble
-- @param w is a pointer to a GLdouble
INLINE PROC glRasterPos4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w)
  C.glRasterPos4d (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLfloat
-- @param y is a pointer to a GLfloat
-- @param z is a pointer to a GLfloat
-- @param w is a pointer to a GLfloat
INLINE PROC glRasterPos4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w)
  C.glRasterPos4f (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param z is a pointer to a GLint
-- @param w is a pointer to a GLint
INLINE PROC glRasterPos4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w)
  C.glRasterPos4i (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLshort
-- @param y is a pointer to a GLshort
-- @param z is a pointer to a GLshort
-- @param w is a pointer to a GLshort
INLINE PROC glRasterPos4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w)
  C.glRasterPos4s (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2dv (VAL [2]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glRasterPos2dv (VAL [2]REAL64 v)
  C.glRasterPos2dv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2fv (VAL [2]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glRasterPos2fv (VAL [2]REAL32 v)
  C.glRasterPos2fv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2iv (VAL [2]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glRasterPos2iv (VAL [2]INT v)
  C.glRasterPos2iv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2sv (VAL [2]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glRasterPos2sv (VAL [2]INT16 v)
  C.glRasterPos2sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3dv (VAL [3]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glRasterPos3dv (VAL [3]REAL64 v)
  C.glRasterPos3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3fv (VAL [3]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glRasterPos3fv (VAL [3]REAL32 v)
  C.glRasterPos3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3iv (VAL [3]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glRasterPos3iv (VAL [3]INT v)
  C.glRasterPos3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3sv (VAL [3]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glRasterPos3sv (VAL [3]INT16 v)
  C.glRasterPos3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4dv (VAL [4]REAL64 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLdouble
INLINE PROC glRasterPos4dv (VAL [4]REAL64 v)
  C.glRasterPos4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4fv (VAL [4]REAL32 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLfloat
INLINE PROC glRasterPos4fv (VAL [4]REAL32 v)
  C.glRasterPos4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4iv (VAL [4]INT v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLint
INLINE PROC glRasterPos4iv (VAL [4]INT v)
  C.glRasterPos4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4sv (VAL [4]INT16 v) = 0"

--* FFI interface to C function
--@param v pointer to a C array of q(const).GLshort
INLINE PROC glRasterPos4sv (VAL [4]INT16 v)
  C.glRasterPos4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRectd (VAL REAL64 x1, VAL REAL64 y1, VAL REAL64 x2, VAL REAL64 y2) = 0"

--* FFI interface to C function
-- @param x1 is a pointer to a GLdouble
-- @param y1 is a pointer to a GLdouble
-- @param x2 is a pointer to a GLdouble
-- @param y2 is a pointer to a GLdouble
INLINE PROC glRectd (VAL REAL64 x1, VAL REAL64 y1, VAL REAL64 x2, VAL REAL64 y2)
  C.glRectd (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRectf (VAL REAL32 x1, VAL REAL32 y1, VAL REAL32 x2, VAL REAL32 y2) = 0"

--* FFI interface to C function
-- @param x1 is a pointer to a GLfloat
-- @param y1 is a pointer to a GLfloat
-- @param x2 is a pointer to a GLfloat
-- @param y2 is a pointer to a GLfloat
INLINE PROC glRectf (VAL REAL32 x1, VAL REAL32 y1, VAL REAL32 x2, VAL REAL32 y2)
  C.glRectf (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRecti (VAL INT x1, VAL INT y1, VAL INT x2, VAL INT y2) = 0"

--* FFI interface to C function
-- @param x1 is a pointer to a GLint
-- @param y1 is a pointer to a GLint
-- @param x2 is a pointer to a GLint
-- @param y2 is a pointer to a GLint
INLINE PROC glRecti (VAL INT x1, VAL INT y1, VAL INT x2, VAL INT y2)
  C.glRecti (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRects (VAL INT16 x1, VAL INT16 y1, VAL INT16 x2, VAL INT16 y2) = 0"

--* FFI interface to C function
-- @param x1 is a pointer to a GLshort
-- @param y1 is a pointer to a GLshort
-- @param x2 is a pointer to a GLshort
-- @param y2 is a pointer to a GLshort
INLINE PROC glRects (VAL INT16 x1, VAL INT16 y1, VAL INT16 x2, VAL INT16 y2)
  C.glRects (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRectdv (VAL []REAL64 v1, VAL []REAL64 v2) = 0"

--* FFI interface to C function
--@param v1 pointer to a C array of q(const).GLdouble
--@param v2 pointer to a C array of q(const).GLdouble
INLINE PROC glRectdv (VAL []REAL64 v1, VAL []REAL64 v2)
  C.glRectdv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glRectfv (VAL []REAL32 v1, VAL []REAL32 v2) = 0"

--* FFI interface to C function
--@param v1 pointer to a C array of q(const).GLfloat
--@param v2 pointer to a C array of q(const).GLfloat
INLINE PROC glRectfv (VAL []REAL32 v1, VAL []REAL32 v2)
  C.glRectfv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glRectiv (VAL []INT v1, VAL []INT v2) = 0"

--* FFI interface to C function
--@param v1 pointer to a C array of q(const).GLint
--@param v2 pointer to a C array of q(const).GLint
INLINE PROC glRectiv (VAL []INT v1, VAL []INT v2)
  C.glRectiv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glRectsv (VAL []INT16 v1, VAL []INT16 v2) = 0"

--* FFI interface to C function
--@param v1 pointer to a C array of q(const).GLshort
--@param v2 pointer to a C array of q(const).GLshort
INLINE PROC glRectsv (VAL []INT16 v1, VAL []INT16 v2)
  C.glRectsv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glVertexPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* FFI interface to C function
-- @param size is a pointer to a GLint
-- @param type is a pointer to a GLenum
-- @param stride is a pointer to a GLsizei
--@param ptr pointer to a C array of q(const).GLvoid
INLINE PROC glVertexPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glVertexPointer (size, type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glNormalPointer (VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* FFI interface to C function
-- @param type is a pointer to a GLenum
-- @param stride is a pointer to a GLsizei
--@param ptr pointer to a C array of q(const).GLvoid
INLINE PROC glNormalPointer (VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glNormalPointer (type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glColorPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* FFI interface to C function
-- @param size is a pointer to a GLint
-- @param type is a pointer to a GLenum
-- @param stride is a pointer to a GLsizei
--@param ptr pointer to a C array of q(const).GLvoid
INLINE PROC glColorPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glColorPointer (size, type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glIndexPointer (VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* FFI interface to C function
-- @param type is a pointer to a GLenum
-- @param stride is a pointer to a GLsizei
--@param ptr pointer to a C array of q(const).GLvoid
INLINE PROC glIndexPointer (VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glIndexPointer (type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glTexCoordPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* FFI interface to C function
-- @param size is a pointer to a GLint
-- @param type is a pointer to a GLenum
-- @param stride is a pointer to a GLsizei
--@param ptr pointer to a C array of q(const).GLvoid
INLINE PROC glTexCoordPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glTexCoordPointer (size, type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glEdgeFlagPointer (VAL INT stride, VAL []INT ptr) = 0"

--* FFI interface to C function
-- @param stride is a pointer to a GLsizei
--@param ptr pointer to a C array of q(const).GLvoid
INLINE PROC glEdgeFlagPointer (VAL INT stride, VAL []INT ptr)
  C.glEdgeFlagPointer (stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glGetPointerv (VAL INT pname, []INT params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of GLvoid
INLINE PROC glGetPointerv (VAL INT pname, []INT params)
  C.glGetPointerv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glArrayElement (VAL INT i) = 0"

--* FFI interface to C function
-- @param i is a pointer to a GLint
INLINE PROC glArrayElement (VAL INT i)
  C.glArrayElement (i)
:

#PRAGMA EXTERNAL "PROC C.glDrawArrays (VAL INT mode, VAL INT first, VAL INT count) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
-- @param first is a pointer to a GLint
-- @param count is a pointer to a GLsizei
INLINE PROC glDrawArrays (VAL INT mode, VAL INT first, VAL INT count)
  C.glDrawArrays (mode, first, count)
:

#PRAGMA EXTERNAL "PROC C.glDrawElements (VAL INT mode, VAL INT count, VAL INT type, VAL []INT indices) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
-- @param count is a pointer to a GLsizei
-- @param type is a pointer to a GLenum
--@param indices pointer to a C array of q(const).GLvoid
INLINE PROC glDrawElements (VAL INT mode, VAL INT count, VAL INT type, VAL []INT indices)
  C.glDrawElements (mode, count, type, indices)
:

#PRAGMA EXTERNAL "PROC C.glInterleavedArrays (VAL INT format, VAL INT stride, VAL []INT pointer) = 0"

--* FFI interface to C function
-- @param format is a pointer to a GLenum
-- @param stride is a pointer to a GLsizei
--@param pointer pointer to a C array of q(const).GLvoid
INLINE PROC glInterleavedArrays (VAL INT format, VAL INT stride, VAL []INT pointer)
  C.glInterleavedArrays (format, stride, pointer)
:

#PRAGMA EXTERNAL "PROC C.glShadeModel (VAL INT mode) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
INLINE PROC glShadeModel (VAL INT mode)
  C.glShadeModel (mode)
:

#PRAGMA EXTERNAL "PROC C.glLightf (VAL INT light, VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param light is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glLightf (VAL INT light, VAL INT pname, VAL REAL32 param)
  C.glLightf (light, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLighti (VAL INT light, VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param light is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glLighti (VAL INT light, VAL INT pname, VAL INT param)
  C.glLighti (light, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLightfv (VAL INT light, VAL INT pname, VAL []REAL32 params) = 0"

--* FFI interface to C function
-- @param light is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of q(const).GLfloat
INLINE PROC glLightfv (VAL INT light, VAL INT pname, VAL []REAL32 params)
  C.glLightfv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glLightiv (VAL INT light, VAL INT pname, VAL []INT params) = 0"

--* FFI interface to C function
-- @param light is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of q(const).GLint
INLINE PROC glLightiv (VAL INT light, VAL INT pname, VAL []INT params)
  C.glLightiv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetLightfv (VAL INT light, VAL INT pname, []REAL32 params) = 0"

--* FFI interface to C function
-- @param light is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of GLfloat
INLINE PROC glGetLightfv (VAL INT light, VAL INT pname, []REAL32 params)
  C.glGetLightfv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetLightiv (VAL INT light, VAL INT pname, []INT params) = 0"

--* FFI interface to C function
-- @param light is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of GLint
INLINE PROC glGetLightiv (VAL INT light, VAL INT pname, []INT params)
  C.glGetLightiv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glLightModelf (VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glLightModelf (VAL INT pname, VAL REAL32 param)
  C.glLightModelf (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLightModeli (VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glLightModeli (VAL INT pname, VAL INT param)
  C.glLightModeli (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLightModelfv (VAL INT pname, []REAL32 params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of p.q(const).GLfloat
INLINE PROC glLightModelfv (VAL INT pname, []REAL32 params)
  C.glLightModelfv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glLightModeliv (VAL INT pname, []INT params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of p.q(const).GLint
INLINE PROC glLightModeliv (VAL INT pname, []INT params)
  C.glLightModeliv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glMaterialf (VAL INT face, VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glMaterialf (VAL INT face, VAL INT pname, VAL REAL32 param)
  C.glMaterialf (face, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glMateriali (VAL INT face, VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glMateriali (VAL INT face, VAL INT pname, VAL INT param)
  C.glMateriali (face, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glMaterialfv (VAL INT face, VAL INT pname, VAL []REAL32 params) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of q(const).GLfloat
INLINE PROC glMaterialfv (VAL INT face, VAL INT pname, VAL []REAL32 params)
  C.glMaterialfv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glMaterialiv (VAL INT face, VAL INT pname, VAL []INT params) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of q(const).GLint
INLINE PROC glMaterialiv (VAL INT face, VAL INT pname, VAL []INT params)
  C.glMaterialiv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetMaterialfv (VAL INT face, VAL INT pname, []REAL32 params) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of GLfloat
INLINE PROC glGetMaterialfv (VAL INT face, VAL INT pname, []REAL32 params)
  C.glGetMaterialfv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetMaterialiv (VAL INT face, VAL INT pname, []INT params) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
--@param params pointer to a C array of GLint
INLINE PROC glGetMaterialiv (VAL INT face, VAL INT pname, []INT params)
  C.glGetMaterialiv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glColorMaterial (VAL INT face, VAL INT mode) = 0"

--* FFI interface to C function
-- @param face is a pointer to a GLenum
-- @param mode is a pointer to a GLenum
INLINE PROC glColorMaterial (VAL INT face, VAL INT mode)
  C.glColorMaterial (face, mode)
:

#PRAGMA EXTERNAL "PROC C.glPixelZoom (VAL REAL32 xfactor, VAL REAL32 yfactor) = 0"

--* FFI interface to C function
-- @param xfactor is a pointer to a GLfloat
-- @param yfactor is a pointer to a GLfloat
INLINE PROC glPixelZoom (VAL REAL32 xfactor, VAL REAL32 yfactor)
  C.glPixelZoom (xfactor, yfactor)
:

#PRAGMA EXTERNAL "PROC C.glPixelStoref (VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glPixelStoref (VAL INT pname, VAL REAL32 param)
  C.glPixelStoref (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelStorei (VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glPixelStorei (VAL INT pname, VAL INT param)
  C.glPixelStorei (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelTransferf (VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glPixelTransferf (VAL INT pname, VAL REAL32 param)
  C.glPixelTransferf (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelTransferi (VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glPixelTransferi (VAL INT pname, VAL INT param)
  C.glPixelTransferi (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelMapfv (VAL INT map, VAL INT mapsize, VAL []REAL32 values) = 0"

--* FFI interface to C function
-- @param map is a pointer to a GLenum
-- @param mapsize is a pointer to a GLint
--@param values pointer to a C array of q(const).GLfloat
INLINE PROC glPixelMapfv (VAL INT map, VAL INT mapsize, VAL []REAL32 values)
  C.glPixelMapfv (map, mapsize, values)
:

#PRAGMA EXTERNAL "PROC C.glPixelMapuiv (VAL INT map, VAL INT mapsize, VAL []INT values) = 0"

--* FFI interface to C function
-- @param map is a pointer to a GLenum
-- @param mapsize is a pointer to a GLint
--@param values pointer to a C array of q(const).GLuint
INLINE PROC glPixelMapuiv (VAL INT map, VAL INT mapsize, VAL []INT values)
  C.glPixelMapuiv (map, mapsize, values)
:

#PRAGMA EXTERNAL "PROC C.glPixelMapusv (VAL INT map, VAL INT mapsize, VAL []INT16 values) = 0"

--* FFI interface to C function
-- @param map is a pointer to a GLenum
-- @param mapsize is a pointer to a GLint
--@param values pointer to a C array of q(const).GLushort
INLINE PROC glPixelMapusv (VAL INT map, VAL INT mapsize, VAL []INT16 values)
  C.glPixelMapusv (map, mapsize, values)
:

#PRAGMA EXTERNAL "PROC C.glGetPixelMapfv (VAL INT map, []REAL32 values) = 0"

--* FFI interface to C function
-- @param map is a pointer to a GLenum
--@param values pointer to a C array of GLfloat
INLINE PROC glGetPixelMapfv (VAL INT map, []REAL32 values)
  C.glGetPixelMapfv (map, values)
:

#PRAGMA EXTERNAL "PROC C.glGetPixelMapuiv (VAL INT map, []INT values) = 0"

--* FFI interface to C function
-- @param map is a pointer to a GLenum
--@param values pointer to a C array of GLuint
INLINE PROC glGetPixelMapuiv (VAL INT map, []INT values)
  C.glGetPixelMapuiv (map, values)
:

#PRAGMA EXTERNAL "PROC C.glGetPixelMapusv (VAL INT map, []INT16 values) = 0"

--* FFI interface to C function
-- @param map is a pointer to a GLenum
--@param values pointer to a C array of GLushort
INLINE PROC glGetPixelMapusv (VAL INT map, []INT16 values)
  C.glGetPixelMapusv (map, values)
:

#PRAGMA EXTERNAL "PROC C.glBitmap (VAL INT width, VAL INT height, VAL REAL32 xorig, VAL REAL32 yorig, VAL REAL32 xmove, VAL REAL32 ymove, VAL []BYTE bitmap) = 0"

--* FFI interface to C function
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
-- @param xorig is a pointer to a GLfloat
-- @param yorig is a pointer to a GLfloat
-- @param xmove is a pointer to a GLfloat
-- @param ymove is a pointer to a GLfloat
--@param bitmap pointer to a C array of q(const).GLubyte
INLINE PROC glBitmap (VAL INT width, VAL INT height, VAL REAL32 xorig, VAL REAL32 yorig, VAL REAL32 xmove, VAL REAL32 ymove, VAL []BYTE bitmap)
  C.glBitmap (width, height, xorig, yorig, xmove, ymove, bitmap)
:

#PRAGMA EXTERNAL "PROC C.glReadPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT format, VAL INT type, []INT pixels) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
-- @param format is a pointer to a GLenum
-- @param type is a pointer to a GLenum
--@param pixels pointer to a C array of GLvoid
INLINE PROC glReadPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT format, VAL INT type, []INT pixels)
  C.glReadPixels (x, y, width, height, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glDrawPixels (VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* FFI interface to C function
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
-- @param format is a pointer to a GLenum
-- @param type is a pointer to a GLenum
--@param pixels pointer to a C array of q(const).GLvoid
INLINE PROC glDrawPixels (VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glDrawPixels (width, height, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glCopyPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT type) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
-- @param type is a pointer to a GLenum
INLINE PROC glCopyPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT type)
  C.glCopyPixels (x, y, width, height, type)
:

#PRAGMA EXTERNAL "PROC C.glStencilFunc (VAL INT func, VAL INT ref, VAL INT mask) = 0"

--* FFI interface to C function
-- @param func is a pointer to a GLenum
-- @param ref is a pointer to a GLint
-- @param mask is a pointer to a GLuint
INLINE PROC glStencilFunc (VAL INT func, VAL INT ref, VAL INT mask)
  C.glStencilFunc (func, ref, mask)
:

#PRAGMA EXTERNAL "PROC C.glStencilMask (VAL INT mask) = 0"

--* FFI interface to C function
-- @param mask is a pointer to a GLuint
INLINE PROC glStencilMask (VAL INT mask)
  C.glStencilMask (mask)
:

#PRAGMA EXTERNAL "PROC C.glStencilOp (VAL INT fail, VAL INT zfail, VAL INT zpass) = 0"

--* FFI interface to C function
-- @param fail is a pointer to a GLenum
-- @param zfail is a pointer to a GLenum
-- @param zpass is a pointer to a GLenum
INLINE PROC glStencilOp (VAL INT fail, VAL INT zfail, VAL INT zpass)
  C.glStencilOp (fail, zfail, zpass)
:

#PRAGMA EXTERNAL "PROC C.glClearStencil (VAL INT s) = 0"

--* FFI interface to C function
-- @param s is a pointer to a GLint
INLINE PROC glClearStencil (VAL INT s)
  C.glClearStencil (s)
:

#PRAGMA EXTERNAL "PROC C.glTexGend (VAL INT coord, VAL INT pname, VAL REAL64 param) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLdouble
INLINE PROC glTexGend (VAL INT coord, VAL INT pname, VAL REAL64 param)
  C.glTexGend (coord, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexGenf (VAL INT coord, VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glTexGenf (VAL INT coord, VAL INT pname, VAL REAL32 param)
  C.glTexGenf (coord, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexGeni (VAL INT coord, VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glTexGeni (VAL INT coord, VAL INT pname, VAL INT param)
  C.glTexGeni (coord, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexGendv (VAL INT coord, VAL INT pname, REAL64 params) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLdouble
INLINE PROC glTexGendv (VAL INT coord, VAL INT pname, REAL64 params)
  C.glTexGendv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexGenfv (VAL INT coord, VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLfloat
INLINE PROC glTexGenfv (VAL INT coord, VAL INT pname, REAL32 params)
  C.glTexGenfv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexGeniv (VAL INT coord, VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLint
INLINE PROC glTexGeniv (VAL INT coord, VAL INT pname, INT params)
  C.glTexGeniv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexGendv (VAL INT coord, VAL INT pname, REAL64 params) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLdouble
INLINE PROC glGetTexGendv (VAL INT coord, VAL INT pname, REAL64 params)
  C.glGetTexGendv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexGenfv (VAL INT coord, VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLfloat
INLINE PROC glGetTexGenfv (VAL INT coord, VAL INT pname, REAL32 params)
  C.glGetTexGenfv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexGeniv (VAL INT coord, VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param coord is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLint
INLINE PROC glGetTexGeniv (VAL INT coord, VAL INT pname, INT params)
  C.glGetTexGeniv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexEnvf (VAL INT target, VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glTexEnvf (VAL INT target, VAL INT pname, VAL REAL32 param)
  C.glTexEnvf (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexEnvi (VAL INT target, VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glTexEnvi (VAL INT target, VAL INT pname, VAL INT param)
  C.glTexEnvi (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexEnvfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLfloat
INLINE PROC glTexEnvfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glTexEnvfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexEnviv (VAL INT target, VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLint
INLINE PROC glTexEnviv (VAL INT target, VAL INT pname, INT params)
  C.glTexEnviv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexEnvfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLfloat
INLINE PROC glGetTexEnvfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glGetTexEnvfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexEnviv (VAL INT target, VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLint
INLINE PROC glGetTexEnviv (VAL INT target, VAL INT pname, INT params)
  C.glGetTexEnviv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexParameterf (VAL INT target, VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glTexParameterf (VAL INT target, VAL INT pname, VAL REAL32 param)
  C.glTexParameterf (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexParameteri (VAL INT target, VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glTexParameteri (VAL INT target, VAL INT pname, VAL INT param)
  C.glTexParameteri (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexParameterfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLfloat
INLINE PROC glTexParameterfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glTexParameterfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexParameteriv (VAL INT target, VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLint
INLINE PROC glTexParameteriv (VAL INT target, VAL INT pname, INT params)
  C.glTexParameteriv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexParameterfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLfloat
INLINE PROC glGetTexParameterfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glGetTexParameterfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexParameteriv (VAL INT target, VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLint
INLINE PROC glGetTexParameteriv (VAL INT target, VAL INT pname, INT params)
  C.glGetTexParameteriv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexLevelParameterfv (VAL INT target, VAL INT level, VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLfloat
INLINE PROC glGetTexLevelParameterfv (VAL INT target, VAL INT level, VAL INT pname, REAL32 params)
  C.glGetTexLevelParameterfv (target, level, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexLevelParameteriv (VAL INT target, VAL INT level, VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.GLint
INLINE PROC glGetTexLevelParameteriv (VAL INT target, VAL INT level, VAL INT pname, INT params)
  C.glGetTexLevelParameteriv (target, level, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexImage1D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param internalFormat is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param border is a pointer to a GLint
-- @param format is a pointer to a GLenum
-- @param type is a pointer to a GLenum
--@param pixels pointer to a C array of q(const).GLvoid
INLINE PROC glTexImage1D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexImage1D (target, level, internalFormat, width, border, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glTexImage2D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT height, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param internalFormat is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
-- @param border is a pointer to a GLint
-- @param format is a pointer to a GLenum
-- @param type is a pointer to a GLenum
--@param pixels pointer to a C array of q(const).GLvoid
INLINE PROC glTexImage2D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT height, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexImage2D (target, level, internalFormat, width, height, border, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glGetTexImage (VAL INT target, VAL INT level, VAL INT format, VAL INT type, []INT pixels) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param format is a pointer to a GLenum
-- @param type is a pointer to a GLenum
--@param pixels pointer to a C array of GLvoid
INLINE PROC glGetTexImage (VAL INT target, VAL INT level, VAL INT format, VAL INT type, []INT pixels)
  C.glGetTexImage (target, level, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glGenTextures (VAL INT n, []INT textures) = 0"

--* FFI interface to C function
-- @param n is a pointer to a GLsizei
--@param textures pointer to a C array of GLuint
INLINE PROC glGenTextures (VAL INT n, []INT textures)
  C.glGenTextures (n, textures)
:

#PRAGMA EXTERNAL "PROC C.glDeleteTextures (VAL INT n, VAL []INT textures) = 0"

--* FFI interface to C function
-- @param n is a pointer to a GLsizei
--@param textures pointer to a C array of q(const).GLuint
INLINE PROC glDeleteTextures (VAL INT n, VAL []INT textures)
  C.glDeleteTextures (n, textures)
:

#PRAGMA EXTERNAL "PROC C.glBindTexture (VAL INT target, VAL INT texture) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param texture is a pointer to a GLuint
INLINE PROC glBindTexture (VAL INT target, VAL INT texture)
  C.glBindTexture (target, texture)
:

#PRAGMA EXTERNAL "PROC C.glPrioritizeTextures (VAL INT n, VAL []INT textures, REAL32 priorities) = 0"

--* FFI interface to C function
-- @param n is a pointer to a GLsizei
--@param textures pointer to a C array of q(const).GLuint
-- @param priorities is a pointer to a p.q(const).GLclampf
INLINE PROC glPrioritizeTextures (VAL INT n, VAL []INT textures, REAL32 priorities)
  C.glPrioritizeTextures (n, textures, priorities)
:

#PRAGMA EXTERNAL "PROC C.glAreTexturesResident (RESULT BYTE return.value, VAL INT n, VAL []INT textures, BYTE residences) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLboolean
-- @param n is a pointer to a GLsizei
--@param textures pointer to a C array of q(const).GLuint
-- @param residences is a pointer to a p.GLboolean
INLINE PROC glAreTexturesResident (RESULT BYTE return.value, VAL INT n, VAL []INT textures, BYTE residences)
  C.glAreTexturesResident (return.value, n, textures, residences)
:

#PRAGMA EXTERNAL "PROC C.glIsTexture (RESULT BYTE return.value, VAL INT texture) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLboolean
-- @param texture is a pointer to a GLuint
INLINE PROC glIsTexture (RESULT BYTE return.value, VAL INT texture)
  C.glIsTexture (return.value, texture)
:

#PRAGMA EXTERNAL "PROC C.glTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT width, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param xoffset is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param format is a pointer to a GLenum
-- @param type is a pointer to a GLenum
--@param pixels pointer to a C array of q(const).GLvoid
INLINE PROC glTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT width, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexSubImage1D (target, level, xoffset, width, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param xoffset is a pointer to a GLint
-- @param yoffset is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
-- @param format is a pointer to a GLenum
-- @param type is a pointer to a GLenum
--@param pixels pointer to a C array of q(const).GLvoid
INLINE PROC glTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexSubImage2D (target, level, xoffset, yoffset, width, height, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexImage1D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT border) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param internalformat is a pointer to a GLenum
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param border is a pointer to a GLint
INLINE PROC glCopyTexImage1D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT border)
  C.glCopyTexImage1D (target, level, internalformat, x, y, width, border)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexImage2D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT border) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param internalformat is a pointer to a GLenum
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
-- @param border is a pointer to a GLint
INLINE PROC glCopyTexImage2D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT border)
  C.glCopyTexImage2D (target, level, internalformat, x, y, width, height, border)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT x, VAL INT y, VAL INT width) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param xoffset is a pointer to a GLint
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
INLINE PROC glCopyTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT x, VAL INT y, VAL INT width)
  C.glCopyTexSubImage1D (target, level, xoffset, x, y, width)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT x, VAL INT y, VAL INT width, VAL INT height) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param level is a pointer to a GLint
-- @param xoffset is a pointer to a GLint
-- @param yoffset is a pointer to a GLint
-- @param x is a pointer to a GLint
-- @param y is a pointer to a GLint
-- @param width is a pointer to a GLsizei
-- @param height is a pointer to a GLsizei
INLINE PROC glCopyTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT x, VAL INT y, VAL INT width, VAL INT height)
  C.glCopyTexSubImage2D (target, level, xoffset, yoffset, x, y, width, height)
:

#PRAGMA EXTERNAL "PROC C.glMap1d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT stride, VAL INT order, REAL64 points) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param u1 is a pointer to a GLdouble
-- @param u2 is a pointer to a GLdouble
-- @param stride is a pointer to a GLint
-- @param order is a pointer to a GLint
-- @param points is a pointer to a p.q(const).GLdouble
INLINE PROC glMap1d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT stride, VAL INT order, REAL64 points)
  C.glMap1d (target, u1, u2, stride, order, points)
:

#PRAGMA EXTERNAL "PROC C.glMap1f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT stride, VAL INT order, REAL32 points) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param u1 is a pointer to a GLfloat
-- @param u2 is a pointer to a GLfloat
-- @param stride is a pointer to a GLint
-- @param order is a pointer to a GLint
-- @param points is a pointer to a p.q(const).GLfloat
INLINE PROC glMap1f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT stride, VAL INT order, REAL32 points)
  C.glMap1f (target, u1, u2, stride, order, points)
:

#PRAGMA EXTERNAL "PROC C.glMap2d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT ustride, VAL INT uorder, VAL REAL64 v1, VAL REAL64 v2, VAL INT vstride, VAL INT vorder, REAL64 points) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param u1 is a pointer to a GLdouble
-- @param u2 is a pointer to a GLdouble
-- @param ustride is a pointer to a GLint
-- @param uorder is a pointer to a GLint
-- @param v1 is a pointer to a GLdouble
-- @param v2 is a pointer to a GLdouble
-- @param vstride is a pointer to a GLint
-- @param vorder is a pointer to a GLint
-- @param points is a pointer to a p.q(const).GLdouble
INLINE PROC glMap2d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT ustride, VAL INT uorder, VAL REAL64 v1, VAL REAL64 v2, VAL INT vstride, VAL INT vorder, REAL64 points)
  C.glMap2d (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
:

#PRAGMA EXTERNAL "PROC C.glMap2f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT ustride, VAL INT uorder, VAL REAL32 v1, VAL REAL32 v2, VAL INT vstride, VAL INT vorder, REAL32 points) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param u1 is a pointer to a GLfloat
-- @param u2 is a pointer to a GLfloat
-- @param ustride is a pointer to a GLint
-- @param uorder is a pointer to a GLint
-- @param v1 is a pointer to a GLfloat
-- @param v2 is a pointer to a GLfloat
-- @param vstride is a pointer to a GLint
-- @param vorder is a pointer to a GLint
-- @param points is a pointer to a p.q(const).GLfloat
INLINE PROC glMap2f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT ustride, VAL INT uorder, VAL REAL32 v1, VAL REAL32 v2, VAL INT vstride, VAL INT vorder, REAL32 points)
  C.glMap2f (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
:

#PRAGMA EXTERNAL "PROC C.glGetMapdv (VAL INT target, VAL INT query, []REAL64 v) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param query is a pointer to a GLenum
--@param v pointer to a C array of GLdouble
INLINE PROC glGetMapdv (VAL INT target, VAL INT query, []REAL64 v)
  C.glGetMapdv (target, query, v)
:

#PRAGMA EXTERNAL "PROC C.glGetMapfv (VAL INT target, VAL INT query, []REAL32 v) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param query is a pointer to a GLenum
--@param v pointer to a C array of GLfloat
INLINE PROC glGetMapfv (VAL INT target, VAL INT query, []REAL32 v)
  C.glGetMapfv (target, query, v)
:

#PRAGMA EXTERNAL "PROC C.glGetMapiv (VAL INT target, VAL INT query, []INT v) = 0"

--* FFI interface to C function
-- @param target is a pointer to a GLenum
-- @param query is a pointer to a GLenum
--@param v pointer to a C array of GLint
INLINE PROC glGetMapiv (VAL INT target, VAL INT query, []INT v)
  C.glGetMapiv (target, query, v)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1d (VAL REAL64 u) = 0"

--* FFI interface to C function
-- @param u is a pointer to a GLdouble
INLINE PROC glEvalCoord1d (VAL REAL64 u)
  C.glEvalCoord1d (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1f (VAL REAL32 u) = 0"

--* FFI interface to C function
-- @param u is a pointer to a GLfloat
INLINE PROC glEvalCoord1f (VAL REAL32 u)
  C.glEvalCoord1f (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1dv (VAL [1]REAL64 u) = 0"

--* FFI interface to C function
--@param u pointer to a C array of q(const).GLdouble
INLINE PROC glEvalCoord1dv (VAL [1]REAL64 u)
  C.glEvalCoord1dv (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1fv (VAL [1]REAL32 u) = 0"

--* FFI interface to C function
--@param u pointer to a C array of q(const).GLfloat
INLINE PROC glEvalCoord1fv (VAL [1]REAL32 u)
  C.glEvalCoord1fv (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2d (VAL REAL64 u, VAL REAL64 v) = 0"

--* FFI interface to C function
-- @param u is a pointer to a GLdouble
-- @param v is a pointer to a GLdouble
INLINE PROC glEvalCoord2d (VAL REAL64 u, VAL REAL64 v)
  C.glEvalCoord2d (u, v)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2f (VAL REAL32 u, VAL REAL32 v) = 0"

--* FFI interface to C function
-- @param u is a pointer to a GLfloat
-- @param v is a pointer to a GLfloat
INLINE PROC glEvalCoord2f (VAL REAL32 u, VAL REAL32 v)
  C.glEvalCoord2f (u, v)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2dv (VAL [2]REAL64 u) = 0"

--* FFI interface to C function
--@param u pointer to a C array of q(const).GLdouble
INLINE PROC glEvalCoord2dv (VAL [2]REAL64 u)
  C.glEvalCoord2dv (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2fv (VAL [2]REAL32 u) = 0"

--* FFI interface to C function
--@param u pointer to a C array of q(const).GLfloat
INLINE PROC glEvalCoord2fv (VAL [2]REAL32 u)
  C.glEvalCoord2fv (u)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid1d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2) = 0"

--* FFI interface to C function
-- @param un is a pointer to a GLint
-- @param u1 is a pointer to a GLdouble
-- @param u2 is a pointer to a GLdouble
INLINE PROC glMapGrid1d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2)
  C.glMapGrid1d (un, u1, u2)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid1f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2) = 0"

--* FFI interface to C function
-- @param un is a pointer to a GLint
-- @param u1 is a pointer to a GLfloat
-- @param u2 is a pointer to a GLfloat
INLINE PROC glMapGrid1f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2)
  C.glMapGrid1f (un, u1, u2)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid2d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2, VAL INT vn, VAL REAL64 v1, VAL REAL64 v2) = 0"

--* FFI interface to C function
-- @param un is a pointer to a GLint
-- @param u1 is a pointer to a GLdouble
-- @param u2 is a pointer to a GLdouble
-- @param vn is a pointer to a GLint
-- @param v1 is a pointer to a GLdouble
-- @param v2 is a pointer to a GLdouble
INLINE PROC glMapGrid2d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2, VAL INT vn, VAL REAL64 v1, VAL REAL64 v2)
  C.glMapGrid2d (un, u1, u2, vn, v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid2f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2, VAL INT vn, VAL REAL32 v1, VAL REAL32 v2) = 0"

--* FFI interface to C function
-- @param un is a pointer to a GLint
-- @param u1 is a pointer to a GLfloat
-- @param u2 is a pointer to a GLfloat
-- @param vn is a pointer to a GLint
-- @param v1 is a pointer to a GLfloat
-- @param v2 is a pointer to a GLfloat
INLINE PROC glMapGrid2f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2, VAL INT vn, VAL REAL32 v1, VAL REAL32 v2)
  C.glMapGrid2f (un, u1, u2, vn, v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glEvalPoint1 (VAL INT i) = 0"

--* FFI interface to C function
-- @param i is a pointer to a GLint
INLINE PROC glEvalPoint1 (VAL INT i)
  C.glEvalPoint1 (i)
:

#PRAGMA EXTERNAL "PROC C.glEvalPoint2 (VAL INT i, VAL INT j) = 0"

--* FFI interface to C function
-- @param i is a pointer to a GLint
-- @param j is a pointer to a GLint
INLINE PROC glEvalPoint2 (VAL INT i, VAL INT j)
  C.glEvalPoint2 (i, j)
:

#PRAGMA EXTERNAL "PROC C.glEvalMesh1 (VAL INT mode, VAL INT i1, VAL INT i2) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
-- @param i1 is a pointer to a GLint
-- @param i2 is a pointer to a GLint
INLINE PROC glEvalMesh1 (VAL INT mode, VAL INT i1, VAL INT i2)
  C.glEvalMesh1 (mode, i1, i2)
:

#PRAGMA EXTERNAL "PROC C.glEvalMesh2 (VAL INT mode, VAL INT i1, VAL INT i2, VAL INT j1, VAL INT j2) = 0"

--* FFI interface to C function
-- @param mode is a pointer to a GLenum
-- @param i1 is a pointer to a GLint
-- @param i2 is a pointer to a GLint
-- @param j1 is a pointer to a GLint
-- @param j2 is a pointer to a GLint
INLINE PROC glEvalMesh2 (VAL INT mode, VAL INT i1, VAL INT i2, VAL INT j1, VAL INT j2)
  C.glEvalMesh2 (mode, i1, i2, j1, j2)
:

#PRAGMA EXTERNAL "PROC C.glFogf (VAL INT pname, VAL REAL32 param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLfloat
INLINE PROC glFogf (VAL INT pname, VAL REAL32 param)
  C.glFogf (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glFogi (VAL INT pname, VAL INT param) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param param is a pointer to a GLint
INLINE PROC glFogi (VAL INT pname, VAL INT param)
  C.glFogi (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glFogfv (VAL INT pname, REAL32 params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLfloat
INLINE PROC glFogfv (VAL INT pname, REAL32 params)
  C.glFogfv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glFogiv (VAL INT pname, INT params) = 0"

--* FFI interface to C function
-- @param pname is a pointer to a GLenum
-- @param params is a pointer to a p.q(const).GLint
INLINE PROC glFogiv (VAL INT pname, INT params)
  C.glFogiv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glFeedbackBuffer (VAL INT size, VAL INT type, REAL32 buffer) = 0"

--* FFI interface to C function
-- @param size is a pointer to a GLsizei
-- @param type is a pointer to a GLenum
-- @param buffer is a pointer to a p.GLfloat
INLINE PROC glFeedbackBuffer (VAL INT size, VAL INT type, REAL32 buffer)
  C.glFeedbackBuffer (size, type, buffer)
:

#PRAGMA EXTERNAL "PROC C.glPassThrough (VAL REAL32 token) = 0"

--* FFI interface to C function
-- @param token is a pointer to a GLfloat
INLINE PROC glPassThrough (VAL REAL32 token)
  C.glPassThrough (token)
:

#PRAGMA EXTERNAL "PROC C.glSelectBuffer (VAL INT size, INT buffer) = 0"

--* FFI interface to C function
-- @param size is a pointer to a GLsizei
-- @param buffer is a pointer to a p.GLuint
INLINE PROC glSelectBuffer (VAL INT size, INT buffer)
  C.glSelectBuffer (size, buffer)
:

#PRAGMA EXTERNAL "PROC C.glInitNames () = 0"

--* FFI interface to C function
INLINE PROC glInitNames ()
  C.glInitNames ()
:

#PRAGMA EXTERNAL "PROC C.glLoadName (VAL INT name) = 0"

--* FFI interface to C function
-- @param name is a pointer to a GLuint
INLINE PROC glLoadName (VAL INT name)
  C.glLoadName (name)
:

#PRAGMA EXTERNAL "PROC C.glPushName (VAL INT name) = 0"

--* FFI interface to C function
-- @param name is a pointer to a GLuint
INLINE PROC glPushName (VAL INT name)
  C.glPushName (name)
:

#PRAGMA EXTERNAL "PROC C.glPopName () = 0"

--* FFI interface to C function
INLINE PROC glPopName ()
  C.glPopName ()
:

--* C constant turned into a VAL INT
VAL INT GL.MESA.ycbcr.texture  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.YCBCR.MESA  IS #8757: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.8.8.MESA  IS #85BA: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.8.8.REV.MESA  IS #85BB: 
--* C constant turned into a VAL INT
VAL INT GL.MESA.pack.invert  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.PACK.INVERT.MESA  IS #8758: 
--* C constant turned into a VAL INT
VAL INT GL.APPLE.client.storage  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.UNPACK.CLIENT.STORAGE.APPLE  IS #85B2: 
--* C constant turned into a VAL INT
VAL INT GL.APPLE.ycbcr.422  IS 1: 
--* C constant turned into a VAL INT
VAL INT GL.YCBCR.422.APPLE  IS #85B9: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.8.8.APPLE  IS #85BA: 
--* C constant turned into a VAL INT
VAL INT GL.UNSIGNED.SHORT.8.8.REV.APPLE  IS #85BB: 
--* C constant turned into a VAL INT
VAL INT GLU.EXT.object.space.tess  IS 1: 
--* C constant turned into a VAL INT
VAL INT GLU.EXT.nurbs.tessellator  IS 1: 
--* C constant turned into a VAL INT
VAL INT GLU.FALSE  IS 0: 
--* C constant turned into a VAL INT
VAL INT GLU.TRUE  IS 1: 
--* C constant turned into a VAL INT
VAL INT GLU.VERSION.1.1  IS 1: 
--* C constant turned into a VAL INT
VAL INT GLU.VERSION.1.2  IS 1: 
--* C constant turned into a VAL INT
VAL INT GLU.VERSION.1.3  IS 1: 
--* C constant turned into a VAL INT
VAL INT GLU.VERSION  IS 100800: 
--* C constant turned into a VAL INT
VAL INT GLU.EXTENSIONS  IS 100801: 
--* C constant turned into a VAL INT
VAL INT GLU.INVALID.ENUM  IS 100900: 
--* C constant turned into a VAL INT
VAL INT GLU.INVALID.VALUE  IS 100901: 
--* C constant turned into a VAL INT
VAL INT GLU.OUT.OF.MEMORY  IS 100902: 
--* C constant turned into a VAL INT
VAL INT GLU.INVALID.OPERATION  IS 100904: 
--* C constant turned into a VAL INT
VAL INT GLU.OUTLINE.POLYGON  IS 100240: 
--* C constant turned into a VAL INT
VAL INT GLU.OUTLINE.PATCH  IS 100241: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR  IS 100103: 
--* C constant turned into a VAL INT
VAL INT GLU.ERROR  IS 100103: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.BEGIN  IS 100164: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.BEGIN.EXT  IS 100164: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.VERTEX  IS 100165: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.VERTEX.EXT  IS 100165: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.NORMAL  IS 100166: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.NORMAL.EXT  IS 100166: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.COLOR  IS 100167: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.COLOR.EXT  IS 100167: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.TEXTURE.COORD  IS 100168: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.TEX.COORD.EXT  IS 100168: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.END  IS 100169: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.END.EXT  IS 100169: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.BEGIN.DATA  IS 100170: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.BEGIN.DATA.EXT  IS 100170: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.VERTEX.DATA  IS 100171: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.VERTEX.DATA.EXT  IS 100171: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.NORMAL.DATA  IS 100172: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.NORMAL.DATA.EXT  IS 100172: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.COLOR.DATA  IS 100173: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.COLOR.DATA.EXT  IS 100173: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.TEXTURE.COORD.DATA  IS 100174: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.TEX.COORD.DATA.EXT  IS 100174: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.END.DATA  IS 100175: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.END.DATA.EXT  IS 100175: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR1  IS 100251: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR2  IS 100252: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR3  IS 100253: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR4  IS 100254: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR5  IS 100255: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR6  IS 100256: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR7  IS 100257: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR8  IS 100258: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR9  IS 100259: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR10  IS 100260: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR11  IS 100261: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR12  IS 100262: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR13  IS 100263: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR14  IS 100264: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR15  IS 100265: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR16  IS 100266: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR17  IS 100267: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR18  IS 100268: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR19  IS 100269: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR20  IS 100270: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR21  IS 100271: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR22  IS 100272: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR23  IS 100273: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR24  IS 100274: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR25  IS 100275: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR26  IS 100276: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR27  IS 100277: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR28  IS 100278: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR29  IS 100279: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR30  IS 100280: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR31  IS 100281: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR32  IS 100282: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR33  IS 100283: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR34  IS 100284: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR35  IS 100285: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR36  IS 100286: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.ERROR37  IS 100287: 
--* C constant turned into a VAL INT
VAL INT GLU.AUTO.LOAD.MATRIX  IS 100200: 
--* C constant turned into a VAL INT
VAL INT GLU.CULLING  IS 100201: 
--* C constant turned into a VAL INT
VAL INT GLU.SAMPLING.TOLERANCE  IS 100203: 
--* C constant turned into a VAL INT
VAL INT GLU.DISPLAY.MODE  IS 100204: 
--* C constant turned into a VAL INT
VAL INT GLU.PARAMETRIC.TOLERANCE  IS 100202: 
--* C constant turned into a VAL INT
VAL INT GLU.SAMPLING.METHOD  IS 100205: 
--* C constant turned into a VAL INT
VAL INT GLU.U.STEP  IS 100206: 
--* C constant turned into a VAL INT
VAL INT GLU.V.STEP  IS 100207: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.MODE  IS 100160: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.MODE.EXT  IS 100160: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.TESSELLATOR  IS 100161: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.TESSELLATOR.EXT  IS 100161: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.RENDERER  IS 100162: 
--* C constant turned into a VAL INT
VAL INT GLU.NURBS.RENDERER.EXT  IS 100162: 
--* C constant turned into a VAL INT
VAL INT GLU.OBJECT.PARAMETRIC.ERROR  IS 100208: 
--* C constant turned into a VAL INT
VAL INT GLU.OBJECT.PARAMETRIC.ERROR.EXT  IS 100208: 
--* C constant turned into a VAL INT
VAL INT GLU.OBJECT.PATH.LENGTH  IS 100209: 
--* C constant turned into a VAL INT
VAL INT GLU.OBJECT.PATH.LENGTH.EXT  IS 100209: 
--* C constant turned into a VAL INT
VAL INT GLU.PATH.LENGTH  IS 100215: 
--* C constant turned into a VAL INT
VAL INT GLU.PARAMETRIC.ERROR  IS 100216: 
--* C constant turned into a VAL INT
VAL INT GLU.DOMAIN.DISTANCE  IS 100217: 
--* C constant turned into a VAL INT
VAL INT GLU.MAP1.TRIM.2  IS 100210: 
--* C constant turned into a VAL INT
VAL INT GLU.MAP1.TRIM.3  IS 100211: 
--* C constant turned into a VAL INT
VAL INT GLU.POINT  IS 100010: 
--* C constant turned into a VAL INT
VAL INT GLU.LINE  IS 100011: 
--* C constant turned into a VAL INT
VAL INT GLU.FILL  IS 100012: 
--* C constant turned into a VAL INT
VAL INT GLU.SILHOUETTE  IS 100013: 
--* C constant turned into a VAL INT
VAL INT GLU.SMOOTH  IS 100000: 
--* C constant turned into a VAL INT
VAL INT GLU.FLAT  IS 100001: 
--* C constant turned into a VAL INT
VAL INT GLU.NONE  IS 100002: 
--* C constant turned into a VAL INT
VAL INT GLU.OUTSIDE  IS 100020: 
--* C constant turned into a VAL INT
VAL INT GLU.INSIDE  IS 100021: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.BEGIN  IS 100100: 
--* C constant turned into a VAL INT
VAL INT GLU.BEGIN  IS 100100: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.VERTEX  IS 100101: 
--* C constant turned into a VAL INT
VAL INT GLU.VERTEX  IS 100101: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.END  IS 100102: 
--* C constant turned into a VAL INT
VAL INT GLU.END  IS 100102: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR  IS 100103: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.EDGE.FLAG  IS 100104: 
--* C constant turned into a VAL INT
VAL INT GLU.EDGE.FLAG  IS 100104: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.COMBINE  IS 100105: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.BEGIN.DATA  IS 100106: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.VERTEX.DATA  IS 100107: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.END.DATA  IS 100108: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR.DATA  IS 100109: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.EDGE.FLAG.DATA  IS 100110: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.COMBINE.DATA  IS 100111: 
--* C constant turned into a VAL INT
VAL INT GLU.CW  IS 100120: 
--* C constant turned into a VAL INT
VAL INT GLU.CCW  IS 100121: 
--* C constant turned into a VAL INT
VAL INT GLU.INTERIOR  IS 100122: 
--* C constant turned into a VAL INT
VAL INT GLU.EXTERIOR  IS 100123: 
--* C constant turned into a VAL INT
VAL INT GLU.UNKNOWN  IS 100124: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.WINDING.RULE  IS 100140: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.BOUNDARY.ONLY  IS 100141: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.TOLERANCE  IS 100142: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR1  IS 100151: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR2  IS 100152: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR3  IS 100153: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR4  IS 100154: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR5  IS 100155: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR6  IS 100156: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR7  IS 100157: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.ERROR8  IS 100158: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.MISSING.BEGIN.POLYGON  IS 100151: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.MISSING.BEGIN.CONTOUR  IS 100152: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.MISSING.END.POLYGON  IS 100153: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.MISSING.END.CONTOUR  IS 100154: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.COORD.TOO.LARGE  IS 100155: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.NEED.COMBINE.CALLBACK  IS 100156: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.WINDING.ODD  IS 100130: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.WINDING.NONZERO  IS 100131: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.WINDING.POSITIVE  IS 100132: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.WINDING.NEGATIVE  IS 100133: 
--* C constant turned into a VAL INT
VAL INT GLU.TESS.WINDING.ABS.GEQ.TWO  IS 100134: 
--* This is a pointer to the C struct GLUnurbs
DATA TYPE GLUnurbs IS INT:

--* This is a pointer to the C struct GLUquadric
DATA TYPE GLUquadric IS INT:

--* This is a pointer to the C struct GLUtesselator
DATA TYPE GLUtesselator IS INT:

--* This is a pointer to the C struct GLUnurbsObj
DATA TYPE GLUnurbsObj IS INT:

--* This is a pointer to the C struct GLUquadricObj
DATA TYPE GLUquadricObj IS INT:

--* This is a pointer to the C struct GLUtesselatorObj
DATA TYPE GLUtesselatorObj IS INT:

--* This is a pointer to the C struct GLUtriangulatorObj
DATA TYPE GLUtriangulatorObj IS INT:

#PRAGMA EXTERNAL "PROC C.gluBeginCurve (GLUnurbs nurb) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
INLINE PROC gluBeginCurve (GLUnurbs nurb)
  C.gluBeginCurve (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluBeginPolygon (GLUtesselator tess) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
INLINE PROC gluBeginPolygon (GLUtesselator tess)
  C.gluBeginPolygon (tess)
:

#PRAGMA EXTERNAL "PROC C.gluBeginSurface (GLUnurbs nurb) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
INLINE PROC gluBeginSurface (GLUnurbs nurb)
  C.gluBeginSurface (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluBeginTrim (GLUnurbs nurb) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
INLINE PROC gluBeginTrim (GLUnurbs nurb)
  C.gluBeginTrim (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluCylinder (GLUquadric quad, VAL REAL64 base, VAL REAL64 top, VAL REAL64 height, VAL INT slices, VAL INT stacks) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param base is a pointer to a GLdouble
-- @param top is a pointer to a GLdouble
-- @param height is a pointer to a GLdouble
-- @param slices is a pointer to a GLint
-- @param stacks is a pointer to a GLint
INLINE PROC gluCylinder (GLUquadric quad, VAL REAL64 base, VAL REAL64 top, VAL REAL64 height, VAL INT slices, VAL INT stacks)
  C.gluCylinder (quad, base, top, height, slices, stacks)
:

#PRAGMA EXTERNAL "PROC C.gluDeleteNurbsRenderer (GLUnurbs nurb) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
INLINE PROC gluDeleteNurbsRenderer (GLUnurbs nurb)
  C.gluDeleteNurbsRenderer (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluDeleteQuadric (GLUquadric quad) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
INLINE PROC gluDeleteQuadric (GLUquadric quad)
  C.gluDeleteQuadric (quad)
:

#PRAGMA EXTERNAL "PROC C.gluDeleteTess (GLUtesselator tess) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
INLINE PROC gluDeleteTess (GLUtesselator tess)
  C.gluDeleteTess (tess)
:

#PRAGMA EXTERNAL "PROC C.gluDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param inner is a pointer to a GLdouble
-- @param outer is a pointer to a GLdouble
-- @param slices is a pointer to a GLint
-- @param loops is a pointer to a GLint
INLINE PROC gluDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops)
  C.gluDisk (quad, inner, outer, slices, loops)
:

#PRAGMA EXTERNAL "PROC C.gluEndCurve (GLUnurbs nurb) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
INLINE PROC gluEndCurve (GLUnurbs nurb)
  C.gluEndCurve (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluEndPolygon (GLUtesselator tess) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
INLINE PROC gluEndPolygon (GLUtesselator tess)
  C.gluEndPolygon (tess)
:

#PRAGMA EXTERNAL "PROC C.gluEndSurface (GLUnurbs nurb) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
INLINE PROC gluEndSurface (GLUnurbs nurb)
  C.gluEndSurface (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluEndTrim (GLUnurbs nurb) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
INLINE PROC gluEndTrim (GLUnurbs nurb)
  C.gluEndTrim (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluErrorString (RESULT BYTE return.value, VAL INT error) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type p.q(const).GLubyte
-- @param error is a pointer to a GLenum
INLINE PROC gluErrorString (RESULT BYTE return.value, VAL INT error)
  C.gluErrorString (return.value, error)
:

#PRAGMA EXTERNAL "PROC C.gluGetNurbsProperty (GLUnurbs nurb, VAL INT property, REAL32 data) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
-- @param property is a pointer to a GLenum
-- @param data is a pointer to a p.GLfloat
INLINE PROC gluGetNurbsProperty (GLUnurbs nurb, VAL INT property, REAL32 data)
  C.gluGetNurbsProperty (nurb, property, data)
:

#PRAGMA EXTERNAL "PROC C.gluGetString (RESULT BYTE return.value, VAL INT name) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type p.q(const).GLubyte
-- @param name is a pointer to a GLenum
INLINE PROC gluGetString (RESULT BYTE return.value, VAL INT name)
  C.gluGetString (return.value, name)
:

#PRAGMA EXTERNAL "PROC C.gluGetTessProperty (GLUtesselator tess, VAL INT which, REAL64 data) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
-- @param which is a pointer to a GLenum
-- @param data is a pointer to a p.GLdouble
INLINE PROC gluGetTessProperty (GLUtesselator tess, VAL INT which, REAL64 data)
  C.gluGetTessProperty (tess, which, data)
:

#PRAGMA EXTERNAL "PROC C.gluLoadSamplingMatrices (GLUnurbs nurb, REAL32 model, REAL32 perspective, INT view) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
-- @param model is a pointer to a p.q(const).GLfloat
-- @param perspective is a pointer to a p.q(const).GLfloat
-- @param view is a pointer to a p.q(const).GLint
INLINE PROC gluLoadSamplingMatrices (GLUnurbs nurb, REAL32 model, REAL32 perspective, INT view)
  C.gluLoadSamplingMatrices (nurb, model, perspective, view)
:

#PRAGMA EXTERNAL "PROC C.gluLookAt (VAL REAL64 eyeX, VAL REAL64 eyeY, VAL REAL64 eyeZ, VAL REAL64 centerX, VAL REAL64 centerY, VAL REAL64 centerZ, VAL REAL64 upX, VAL REAL64 upY, VAL REAL64 upZ) = 0"

--* FFI interface to C function
-- @param eyeX is a pointer to a GLdouble
-- @param eyeY is a pointer to a GLdouble
-- @param eyeZ is a pointer to a GLdouble
-- @param centerX is a pointer to a GLdouble
-- @param centerY is a pointer to a GLdouble
-- @param centerZ is a pointer to a GLdouble
-- @param upX is a pointer to a GLdouble
-- @param upY is a pointer to a GLdouble
-- @param upZ is a pointer to a GLdouble
INLINE PROC gluLookAt (VAL REAL64 eyeX, VAL REAL64 eyeY, VAL REAL64 eyeZ, VAL REAL64 centerX, VAL REAL64 centerY, VAL REAL64 centerZ, VAL REAL64 upX, VAL REAL64 upY, VAL REAL64 upZ)
  C.gluLookAt (eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ)
:

#PRAGMA EXTERNAL "PROC C.gluNewNurbsRenderer (GLUnurbs  return.value) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type p.GLUnurbs
INLINE PROC gluNewNurbsRenderer (GLUnurbs  return.value)
  C.gluNewNurbsRenderer (return.value)
:

#PRAGMA EXTERNAL "PROC C.gluNewQuadric (GLUquadric  return.value) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type p.GLUquadric
INLINE PROC gluNewQuadric (GLUquadric  return.value)
  C.gluNewQuadric (return.value)
:

#PRAGMA EXTERNAL "PROC C.gluNewTess (GLUtesselator  return.value) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type p.GLUtesselator
INLINE PROC gluNewTess (GLUtesselator  return.value)
  C.gluNewTess (return.value)
:

#PRAGMA EXTERNAL "PROC C.gluNextContour (GLUtesselator tess, VAL INT type) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
-- @param type is a pointer to a GLenum
INLINE PROC gluNextContour (GLUtesselator tess, VAL INT type)
  C.gluNextContour (tess, type)
:

#PRAGMA EXTERNAL "PROC C.gluNurbsCurve (GLUnurbs nurb, VAL INT knotCount, REAL32 knots, VAL INT stride, REAL32 control, VAL INT order, VAL INT type) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
-- @param knotCount is a pointer to a GLint
-- @param knots is a pointer to a p.GLfloat
-- @param stride is a pointer to a GLint
-- @param control is a pointer to a p.GLfloat
-- @param order is a pointer to a GLint
-- @param type is a pointer to a GLenum
INLINE PROC gluNurbsCurve (GLUnurbs nurb, VAL INT knotCount, REAL32 knots, VAL INT stride, REAL32 control, VAL INT order, VAL INT type)
  C.gluNurbsCurve (nurb, knotCount, knots, stride, control, order, type)
:

#PRAGMA EXTERNAL "PROC C.gluNurbsProperty (GLUnurbs nurb, VAL INT property, VAL REAL32 value) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
-- @param property is a pointer to a GLenum
-- @param value is a pointer to a GLfloat
INLINE PROC gluNurbsProperty (GLUnurbs nurb, VAL INT property, VAL REAL32 value)
  C.gluNurbsProperty (nurb, property, value)
:

#PRAGMA EXTERNAL "PROC C.gluNurbsSurface (GLUnurbs nurb, VAL INT sKnotCount, REAL32 sKnots, VAL INT tKnotCount, REAL32 tKnots, VAL INT sStride, VAL INT tStride, REAL32 control, VAL INT sOrder, VAL INT tOrder, VAL INT type) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
-- @param sKnotCount is a pointer to a GLint
-- @param sKnots is a pointer to a p.GLfloat
-- @param tKnotCount is a pointer to a GLint
-- @param tKnots is a pointer to a p.GLfloat
-- @param sStride is a pointer to a GLint
-- @param tStride is a pointer to a GLint
-- @param control is a pointer to a p.GLfloat
-- @param sOrder is a pointer to a GLint
-- @param tOrder is a pointer to a GLint
-- @param type is a pointer to a GLenum
INLINE PROC gluNurbsSurface (GLUnurbs nurb, VAL INT sKnotCount, REAL32 sKnots, VAL INT tKnotCount, REAL32 tKnots, VAL INT sStride, VAL INT tStride, REAL32 control, VAL INT sOrder, VAL INT tOrder, VAL INT type)
  C.gluNurbsSurface (nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type)
:

#PRAGMA EXTERNAL "PROC C.gluOrtho2D (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top) = 0"

--* FFI interface to C function
-- @param left is a pointer to a GLdouble
-- @param right is a pointer to a GLdouble
-- @param bottom is a pointer to a GLdouble
-- @param top is a pointer to a GLdouble
INLINE PROC gluOrtho2D (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top)
  C.gluOrtho2D (left, right, bottom, top)
:

#PRAGMA EXTERNAL "PROC C.gluPartialDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops, VAL REAL64 start, VAL REAL64 sweep) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param inner is a pointer to a GLdouble
-- @param outer is a pointer to a GLdouble
-- @param slices is a pointer to a GLint
-- @param loops is a pointer to a GLint
-- @param start is a pointer to a GLdouble
-- @param sweep is a pointer to a GLdouble
INLINE PROC gluPartialDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops, VAL REAL64 start, VAL REAL64 sweep)
  C.gluPartialDisk (quad, inner, outer, slices, loops, start, sweep)
:

#PRAGMA EXTERNAL "PROC C.gluPerspective (VAL REAL64 fovy, VAL REAL64 aspect, VAL REAL64 zNear, VAL REAL64 zFar) = 0"

--* FFI interface to C function
-- @param fovy is a pointer to a GLdouble
-- @param aspect is a pointer to a GLdouble
-- @param zNear is a pointer to a GLdouble
-- @param zFar is a pointer to a GLdouble
INLINE PROC gluPerspective (VAL REAL64 fovy, VAL REAL64 aspect, VAL REAL64 zNear, VAL REAL64 zFar)
  C.gluPerspective (fovy, aspect, zNear, zFar)
:

#PRAGMA EXTERNAL "PROC C.gluPickMatrix (VAL REAL64 x, VAL REAL64 y, VAL REAL64 delX, VAL REAL64 delY, INT viewport) = 0"

--* FFI interface to C function
-- @param x is a pointer to a GLdouble
-- @param y is a pointer to a GLdouble
-- @param delX is a pointer to a GLdouble
-- @param delY is a pointer to a GLdouble
-- @param viewport is a pointer to a p.GLint
INLINE PROC gluPickMatrix (VAL REAL64 x, VAL REAL64 y, VAL REAL64 delX, VAL REAL64 delY, INT viewport)
  C.gluPickMatrix (x, y, delX, delY, viewport)
:

#PRAGMA EXTERNAL "PROC C.gluProject (RESULT INT return.value, VAL REAL64 objX, VAL REAL64 objY, VAL REAL64 objZ, REAL64 model, REAL64 proj, INT view, REAL64 winX, REAL64 winY, REAL64 winZ) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLint
-- @param objX is a pointer to a GLdouble
-- @param objY is a pointer to a GLdouble
-- @param objZ is a pointer to a GLdouble
-- @param model is a pointer to a p.q(const).GLdouble
-- @param proj is a pointer to a p.q(const).GLdouble
-- @param view is a pointer to a p.q(const).GLint
-- @param winX is a pointer to a p.GLdouble
-- @param winY is a pointer to a p.GLdouble
-- @param winZ is a pointer to a p.GLdouble
INLINE PROC gluProject (RESULT INT return.value, VAL REAL64 objX, VAL REAL64 objY, VAL REAL64 objZ, REAL64 model, REAL64 proj, INT view, REAL64 winX, REAL64 winY, REAL64 winZ)
  C.gluProject (return.value, objX, objY, objZ, model, proj, view, winX, winY, winZ)
:

#PRAGMA EXTERNAL "PROC C.gluPwlCurve (GLUnurbs nurb, VAL INT count, REAL32 data, VAL INT stride, VAL INT type) = 0"

--* FFI interface to C function
-- @param nurb is a pointer to a p.GLUnurbs
-- @param count is a pointer to a GLint
-- @param data is a pointer to a p.GLfloat
-- @param stride is a pointer to a GLint
-- @param type is a pointer to a GLenum
INLINE PROC gluPwlCurve (GLUnurbs nurb, VAL INT count, REAL32 data, VAL INT stride, VAL INT type)
  C.gluPwlCurve (nurb, count, data, stride, type)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricDrawStyle (GLUquadric quad, VAL INT draw) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param draw is a pointer to a GLenum
INLINE PROC gluQuadricDrawStyle (GLUquadric quad, VAL INT draw)
  C.gluQuadricDrawStyle (quad, draw)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricNormals (GLUquadric quad, VAL INT normal) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param normal is a pointer to a GLenum
INLINE PROC gluQuadricNormals (GLUquadric quad, VAL INT normal)
  C.gluQuadricNormals (quad, normal)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricOrientation (GLUquadric quad, VAL INT orientation) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param orientation is a pointer to a GLenum
INLINE PROC gluQuadricOrientation (GLUquadric quad, VAL INT orientation)
  C.gluQuadricOrientation (quad, orientation)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricTexture (GLUquadric quad, VAL BYTE texture) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param texture is a pointer to a GLboolean
INLINE PROC gluQuadricTexture (GLUquadric quad, VAL BYTE texture)
  C.gluQuadricTexture (quad, texture)
:

#PRAGMA EXTERNAL "PROC C.gluScaleImage (RESULT INT return.value, VAL INT format, VAL INT wIn, VAL INT hIn, VAL INT typeIn, INT dataIn, VAL INT wOut, VAL INT hOut, VAL INT typeOut, INT dataOut) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLint
-- @param format is a pointer to a GLenum
-- @param wIn is a pointer to a GLsizei
-- @param hIn is a pointer to a GLsizei
-- @param typeIn is a pointer to a GLenum
-- @param dataIn is a pointer to a p.q(const).void
-- @param wOut is a pointer to a GLsizei
-- @param hOut is a pointer to a GLsizei
-- @param typeOut is a pointer to a GLenum
-- @param dataOut is a pointer to a p.GLvoid
INLINE PROC gluScaleImage (RESULT INT return.value, VAL INT format, VAL INT wIn, VAL INT hIn, VAL INT typeIn, INT dataIn, VAL INT wOut, VAL INT hOut, VAL INT typeOut, INT dataOut)
  C.gluScaleImage (return.value, format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut)
:

#PRAGMA EXTERNAL "PROC C.gluSphere (GLUquadric quad, VAL REAL64 radius, VAL INT slices, VAL INT stacks) = 0"

--* FFI interface to C function
-- @param quad is a pointer to a p.GLUquadric
-- @param radius is a pointer to a GLdouble
-- @param slices is a pointer to a GLint
-- @param stacks is a pointer to a GLint
INLINE PROC gluSphere (GLUquadric quad, VAL REAL64 radius, VAL INT slices, VAL INT stacks)
  C.gluSphere (quad, radius, slices, stacks)
:

#PRAGMA EXTERNAL "PROC C.gluTessBeginContour (GLUtesselator tess) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
INLINE PROC gluTessBeginContour (GLUtesselator tess)
  C.gluTessBeginContour (tess)
:

#PRAGMA EXTERNAL "PROC C.gluTessBeginPolygon (GLUtesselator tess, INT data) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
-- @param data is a pointer to a p.GLvoid
INLINE PROC gluTessBeginPolygon (GLUtesselator tess, INT data)
  C.gluTessBeginPolygon (tess, data)
:

#PRAGMA EXTERNAL "PROC C.gluTessEndContour (GLUtesselator tess) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
INLINE PROC gluTessEndContour (GLUtesselator tess)
  C.gluTessEndContour (tess)
:

#PRAGMA EXTERNAL "PROC C.gluTessEndPolygon (GLUtesselator tess) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
INLINE PROC gluTessEndPolygon (GLUtesselator tess)
  C.gluTessEndPolygon (tess)
:

#PRAGMA EXTERNAL "PROC C.gluTessNormal (GLUtesselator tess, VAL REAL64 valueX, VAL REAL64 valueY, VAL REAL64 valueZ) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
-- @param valueX is a pointer to a GLdouble
-- @param valueY is a pointer to a GLdouble
-- @param valueZ is a pointer to a GLdouble
INLINE PROC gluTessNormal (GLUtesselator tess, VAL REAL64 valueX, VAL REAL64 valueY, VAL REAL64 valueZ)
  C.gluTessNormal (tess, valueX, valueY, valueZ)
:

#PRAGMA EXTERNAL "PROC C.gluTessProperty (GLUtesselator tess, VAL INT which, VAL REAL64 data) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
-- @param which is a pointer to a GLenum
-- @param data is a pointer to a GLdouble
INLINE PROC gluTessProperty (GLUtesselator tess, VAL INT which, VAL REAL64 data)
  C.gluTessProperty (tess, which, data)
:

#PRAGMA EXTERNAL "PROC C.gluTessVertex (GLUtesselator tess, REAL64 location, INT data) = 0"

--* FFI interface to C function
-- @param tess is a pointer to a p.GLUtesselator
-- @param location is a pointer to a p.GLdouble
-- @param data is a pointer to a p.GLvoid
INLINE PROC gluTessVertex (GLUtesselator tess, REAL64 location, INT data)
  C.gluTessVertex (tess, location, data)
:

#PRAGMA EXTERNAL "PROC C.gluUnProject (RESULT INT return.value, VAL REAL64 winX, VAL REAL64 winY, VAL REAL64 winZ, REAL64 model, REAL64 proj, INT view, REAL64 objX, REAL64 objY, REAL64 objZ) = 0"

--* FFI interface to C function
-- @param return.value contains the return value of the function and is of type GLint
-- @param winX is a pointer to a GLdouble
-- @param winY is a pointer to a GLdouble
-- @param winZ is a pointer to a GLdouble
-- @param model is a pointer to a p.q(const).GLdouble
-- @param proj is a pointer to a p.q(const).GLdouble
-- @param view is a pointer to a p.q(const).GLint
-- @param objX is a pointer to a p.GLdouble
-- @param objY is a pointer to a p.GLdouble
-- @param objZ is a pointer to a p.GLdouble
INLINE PROC gluUnProject (RESULT INT return.value, VAL REAL64 winX, VAL REAL64 winY, VAL REAL64 winZ, REAL64 model, REAL64 proj, INT view, REAL64 objX, REAL64 objY, REAL64 objZ)
  C.gluUnProject (return.value, winX, winY, winZ, model, proj, view, objX, objY, objZ)
:

#ENDIF --GUARD.occGL
