--** Interface to foreign library [@text occGL].
-- Generated automatically using SWIG 1.3.31.
-- @module occGL

-- ----------------------------------------------------------------------------
-- This file was automatically generated by SWIG (http://www.swig.org).
-- Version 1.3.31
--
-- Do not make changes to this file unless you know what you are doing--modify
-- the SWIG interface file instead.
-- ----------------------------------------------------------------------------- 

-- This tells the slinker and the transterpreter which dynamic lib to load.
#PRAGMA COMMENT "(spragma (dynlib occGL))"

#IF NOT DEFINED (WRAPPERS.occGL.INC)
#DEFINE WRAPPERS.occGL.INC
--* Foreign [@text int] constant [@text GL_VERSION_1_1].
VAL INT GL.VERSION.1.1 IS 1:
--* Foreign [@text int] constant [@text GL_VERSION_1_2].
VAL INT GL.VERSION.1.2 IS 1:
--* Foreign [@text int] constant [@text GL_VERSION_1_3].
VAL INT GL.VERSION.1.3 IS 1:
--* Foreign [@text int] constant [@text GL_ARB_imaging].
VAL INT GL.ARB.imaging IS 1:
--* Foreign [@text int] constant [@text GL_FALSE].
VAL INT GL.FALSE IS #0:
--* Foreign [@text int] constant [@text GL_TRUE].
VAL INT GL.TRUE IS #1:
--* Foreign [@text int] constant [@text GL_BYTE].
VAL INT GL.BYTE IS #1400:
--* Foreign [@text int] constant [@text GL_UNSIGNED_BYTE].
VAL INT GL.UNSIGNED.BYTE IS #1401:
--* Foreign [@text int] constant [@text GL_SHORT].
VAL INT GL.SHORT IS #1402:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT].
VAL INT GL.UNSIGNED.SHORT IS #1403:
--* Foreign [@text int] constant [@text GL_INT].
VAL INT GL.INT IS #1404:
--* Foreign [@text int] constant [@text GL_UNSIGNED_INT].
VAL INT GL.UNSIGNED.INT IS #1405:
--* Foreign [@text int] constant [@text GL_FLOAT].
VAL INT GL.FLOAT IS #1406:
--* Foreign [@text int] constant [@text GL_DOUBLE].
VAL INT GL.DOUBLE IS #140A:
--* Foreign [@text int] constant [@text GL_2_BYTES].
VAL INT GL.2.BYTES IS #1407:
--* Foreign [@text int] constant [@text GL_3_BYTES].
VAL INT GL.3.BYTES IS #1408:
--* Foreign [@text int] constant [@text GL_4_BYTES].
VAL INT GL.4.BYTES IS #1409:
--* Foreign [@text int] constant [@text GL_POINTS].
VAL INT GL.POINTS IS #0000:
--* Foreign [@text int] constant [@text GL_LINES].
VAL INT GL.LINES IS #0001:
--* Foreign [@text int] constant [@text GL_LINE_LOOP].
VAL INT GL.LINE.LOOP IS #0002:
--* Foreign [@text int] constant [@text GL_LINE_STRIP].
VAL INT GL.LINE.STRIP IS #0003:
--* Foreign [@text int] constant [@text GL_TRIANGLES].
VAL INT GL.TRIANGLES IS #0004:
--* Foreign [@text int] constant [@text GL_TRIANGLE_STRIP].
VAL INT GL.TRIANGLE.STRIP IS #0005:
--* Foreign [@text int] constant [@text GL_TRIANGLE_FAN].
VAL INT GL.TRIANGLE.FAN IS #0006:
--* Foreign [@text int] constant [@text GL_QUADS].
VAL INT GL.QUADS IS #0007:
--* Foreign [@text int] constant [@text GL_QUAD_STRIP].
VAL INT GL.QUAD.STRIP IS #0008:
--* Foreign [@text int] constant [@text GL_POLYGON].
VAL INT GL.POLYGON IS #0009:
--* Foreign [@text int] constant [@text GL_VERTEX_ARRAY].
VAL INT GL.VERTEX.ARRAY IS #8074:
--* Foreign [@text int] constant [@text GL_NORMAL_ARRAY].
VAL INT GL.NORMAL.ARRAY IS #8075:
--* Foreign [@text int] constant [@text GL_COLOR_ARRAY].
VAL INT GL.COLOR.ARRAY IS #8076:
--* Foreign [@text int] constant [@text GL_INDEX_ARRAY].
VAL INT GL.INDEX.ARRAY IS #8077:
--* Foreign [@text int] constant [@text GL_TEXTURE_COORD_ARRAY].
VAL INT GL.TEXTURE.COORD.ARRAY IS #8078:
--* Foreign [@text int] constant [@text GL_EDGE_FLAG_ARRAY].
VAL INT GL.EDGE.FLAG.ARRAY IS #8079:
--* Foreign [@text int] constant [@text GL_VERTEX_ARRAY_SIZE].
VAL INT GL.VERTEX.ARRAY.SIZE IS #807A:
--* Foreign [@text int] constant [@text GL_VERTEX_ARRAY_TYPE].
VAL INT GL.VERTEX.ARRAY.TYPE IS #807B:
--* Foreign [@text int] constant [@text GL_VERTEX_ARRAY_STRIDE].
VAL INT GL.VERTEX.ARRAY.STRIDE IS #807C:
--* Foreign [@text int] constant [@text GL_NORMAL_ARRAY_TYPE].
VAL INT GL.NORMAL.ARRAY.TYPE IS #807E:
--* Foreign [@text int] constant [@text GL_NORMAL_ARRAY_STRIDE].
VAL INT GL.NORMAL.ARRAY.STRIDE IS #807F:
--* Foreign [@text int] constant [@text GL_COLOR_ARRAY_SIZE].
VAL INT GL.COLOR.ARRAY.SIZE IS #8081:
--* Foreign [@text int] constant [@text GL_COLOR_ARRAY_TYPE].
VAL INT GL.COLOR.ARRAY.TYPE IS #8082:
--* Foreign [@text int] constant [@text GL_COLOR_ARRAY_STRIDE].
VAL INT GL.COLOR.ARRAY.STRIDE IS #8083:
--* Foreign [@text int] constant [@text GL_INDEX_ARRAY_TYPE].
VAL INT GL.INDEX.ARRAY.TYPE IS #8085:
--* Foreign [@text int] constant [@text GL_INDEX_ARRAY_STRIDE].
VAL INT GL.INDEX.ARRAY.STRIDE IS #8086:
--* Foreign [@text int] constant [@text GL_TEXTURE_COORD_ARRAY_SIZE].
VAL INT GL.TEXTURE.COORD.ARRAY.SIZE IS #8088:
--* Foreign [@text int] constant [@text GL_TEXTURE_COORD_ARRAY_TYPE].
VAL INT GL.TEXTURE.COORD.ARRAY.TYPE IS #8089:
--* Foreign [@text int] constant [@text GL_TEXTURE_COORD_ARRAY_STRIDE].
VAL INT GL.TEXTURE.COORD.ARRAY.STRIDE IS #808A:
--* Foreign [@text int] constant [@text GL_EDGE_FLAG_ARRAY_STRIDE].
VAL INT GL.EDGE.FLAG.ARRAY.STRIDE IS #808C:
--* Foreign [@text int] constant [@text GL_VERTEX_ARRAY_POINTER].
VAL INT GL.VERTEX.ARRAY.POINTER IS #808E:
--* Foreign [@text int] constant [@text GL_NORMAL_ARRAY_POINTER].
VAL INT GL.NORMAL.ARRAY.POINTER IS #808F:
--* Foreign [@text int] constant [@text GL_COLOR_ARRAY_POINTER].
VAL INT GL.COLOR.ARRAY.POINTER IS #8090:
--* Foreign [@text int] constant [@text GL_INDEX_ARRAY_POINTER].
VAL INT GL.INDEX.ARRAY.POINTER IS #8091:
--* Foreign [@text int] constant [@text GL_TEXTURE_COORD_ARRAY_POINTER].
VAL INT GL.TEXTURE.COORD.ARRAY.POINTER IS #8092:
--* Foreign [@text int] constant [@text GL_EDGE_FLAG_ARRAY_POINTER].
VAL INT GL.EDGE.FLAG.ARRAY.POINTER IS #8093:
--* Foreign [@text int] constant [@text GL_V2F].
VAL INT GL.V2F IS #2A20:
--* Foreign [@text int] constant [@text GL_V3F].
VAL INT GL.V3F IS #2A21:
--* Foreign [@text int] constant [@text GL_C4UB_V2F].
VAL INT GL.C4UB.V2F IS #2A22:
--* Foreign [@text int] constant [@text GL_C4UB_V3F].
VAL INT GL.C4UB.V3F IS #2A23:
--* Foreign [@text int] constant [@text GL_C3F_V3F].
VAL INT GL.C3F.V3F IS #2A24:
--* Foreign [@text int] constant [@text GL_N3F_V3F].
VAL INT GL.N3F.V3F IS #2A25:
--* Foreign [@text int] constant [@text GL_C4F_N3F_V3F].
VAL INT GL.C4F.N3F.V3F IS #2A26:
--* Foreign [@text int] constant [@text GL_T2F_V3F].
VAL INT GL.T2F.V3F IS #2A27:
--* Foreign [@text int] constant [@text GL_T4F_V4F].
VAL INT GL.T4F.V4F IS #2A28:
--* Foreign [@text int] constant [@text GL_T2F_C4UB_V3F].
VAL INT GL.T2F.C4UB.V3F IS #2A29:
--* Foreign [@text int] constant [@text GL_T2F_C3F_V3F].
VAL INT GL.T2F.C3F.V3F IS #2A2A:
--* Foreign [@text int] constant [@text GL_T2F_N3F_V3F].
VAL INT GL.T2F.N3F.V3F IS #2A2B:
--* Foreign [@text int] constant [@text GL_T2F_C4F_N3F_V3F].
VAL INT GL.T2F.C4F.N3F.V3F IS #2A2C:
--* Foreign [@text int] constant [@text GL_T4F_C4F_N3F_V4F].
VAL INT GL.T4F.C4F.N3F.V4F IS #2A2D:
--* Foreign [@text int] constant [@text GL_MATRIX_MODE].
VAL INT GL.MATRIX.MODE IS #0BA0:
--* Foreign [@text int] constant [@text GL_MODELVIEW].
VAL INT GL.MODELVIEW IS #1700:
--* Foreign [@text int] constant [@text GL_PROJECTION].
VAL INT GL.PROJECTION IS #1701:
--* Foreign [@text int] constant [@text GL_TEXTURE].
VAL INT GL.TEXTURE IS #1702:
--* Foreign [@text int] constant [@text GL_POINT_SMOOTH].
VAL INT GL.POINT.SMOOTH IS #0B10:
--* Foreign [@text int] constant [@text GL_POINT_SIZE].
VAL INT GL.POINT.SIZE IS #0B11:
--* Foreign [@text int] constant [@text GL_POINT_SIZE_GRANULARITY].
VAL INT GL.POINT.SIZE.GRANULARITY IS #0B13:
--* Foreign [@text int] constant [@text GL_POINT_SIZE_RANGE].
VAL INT GL.POINT.SIZE.RANGE IS #0B12:
--* Foreign [@text int] constant [@text GL_LINE_SMOOTH].
VAL INT GL.LINE.SMOOTH IS #0B20:
--* Foreign [@text int] constant [@text GL_LINE_STIPPLE].
VAL INT GL.LINE.STIPPLE IS #0B24:
--* Foreign [@text int] constant [@text GL_LINE_STIPPLE_PATTERN].
VAL INT GL.LINE.STIPPLE.PATTERN IS #0B25:
--* Foreign [@text int] constant [@text GL_LINE_STIPPLE_REPEAT].
VAL INT GL.LINE.STIPPLE.REPEAT IS #0B26:
--* Foreign [@text int] constant [@text GL_LINE_WIDTH].
VAL INT GL.LINE.WIDTH IS #0B21:
--* Foreign [@text int] constant [@text GL_LINE_WIDTH_GRANULARITY].
VAL INT GL.LINE.WIDTH.GRANULARITY IS #0B23:
--* Foreign [@text int] constant [@text GL_LINE_WIDTH_RANGE].
VAL INT GL.LINE.WIDTH.RANGE IS #0B22:
--* Foreign [@text int] constant [@text GL_POINT].
VAL INT GL.POINT IS #1B00:
--* Foreign [@text int] constant [@text GL_LINE].
VAL INT GL.LINE IS #1B01:
--* Foreign [@text int] constant [@text GL_FILL].
VAL INT GL.FILL IS #1B02:
--* Foreign [@text int] constant [@text GL_CW].
VAL INT GL.CW IS #0900:
--* Foreign [@text int] constant [@text GL_CCW].
VAL INT GL.CCW IS #0901:
--* Foreign [@text int] constant [@text GL_FRONT].
VAL INT GL.FRONT IS #0404:
--* Foreign [@text int] constant [@text GL_BACK].
VAL INT GL.BACK IS #0405:
--* Foreign [@text int] constant [@text GL_POLYGON_MODE].
VAL INT GL.POLYGON.MODE IS #0B40:
--* Foreign [@text int] constant [@text GL_POLYGON_SMOOTH].
VAL INT GL.POLYGON.SMOOTH IS #0B41:
--* Foreign [@text int] constant [@text GL_POLYGON_STIPPLE].
VAL INT GL.POLYGON.STIPPLE IS #0B42:
--* Foreign [@text int] constant [@text GL_EDGE_FLAG].
VAL INT GL.EDGE.FLAG IS #0B43:
--* Foreign [@text int] constant [@text GL_CULL_FACE].
VAL INT GL.CULL.FACE IS #0B44:
--* Foreign [@text int] constant [@text GL_CULL_FACE_MODE].
VAL INT GL.CULL.FACE.MODE IS #0B45:
--* Foreign [@text int] constant [@text GL_FRONT_FACE].
VAL INT GL.FRONT.FACE IS #0B46:
--* Foreign [@text int] constant [@text GL_POLYGON_OFFSET_FACTOR].
VAL INT GL.POLYGON.OFFSET.FACTOR IS #8038:
--* Foreign [@text int] constant [@text GL_POLYGON_OFFSET_UNITS].
VAL INT GL.POLYGON.OFFSET.UNITS IS #2A00:
--* Foreign [@text int] constant [@text GL_POLYGON_OFFSET_POINT].
VAL INT GL.POLYGON.OFFSET.POINT IS #2A01:
--* Foreign [@text int] constant [@text GL_POLYGON_OFFSET_LINE].
VAL INT GL.POLYGON.OFFSET.LINE IS #2A02:
--* Foreign [@text int] constant [@text GL_POLYGON_OFFSET_FILL].
VAL INT GL.POLYGON.OFFSET.FILL IS #8037:
--* Foreign [@text int] constant [@text GL_COMPILE].
VAL INT GL.COMPILE IS #1300:
--* Foreign [@text int] constant [@text GL_COMPILE_AND_EXECUTE].
VAL INT GL.COMPILE.AND.EXECUTE IS #1301:
--* Foreign [@text int] constant [@text GL_LIST_BASE].
VAL INT GL.LIST.BASE IS #0B32:
--* Foreign [@text int] constant [@text GL_LIST_INDEX].
VAL INT GL.LIST.INDEX IS #0B33:
--* Foreign [@text int] constant [@text GL_LIST_MODE].
VAL INT GL.LIST.MODE IS #0B30:
--* Foreign [@text int] constant [@text GL_NEVER].
VAL INT GL.NEVER IS #0200:
--* Foreign [@text int] constant [@text GL_LESS].
VAL INT GL.LESS IS #0201:
--* Foreign [@text int] constant [@text GL_EQUAL].
VAL INT GL.EQUAL IS #0202:
--* Foreign [@text int] constant [@text GL_LEQUAL].
VAL INT GL.LEQUAL IS #0203:
--* Foreign [@text int] constant [@text GL_GREATER].
VAL INT GL.GREATER IS #0204:
--* Foreign [@text int] constant [@text GL_NOTEQUAL].
VAL INT GL.NOTEQUAL IS #0205:
--* Foreign [@text int] constant [@text GL_GEQUAL].
VAL INT GL.GEQUAL IS #0206:
--* Foreign [@text int] constant [@text GL_ALWAYS].
VAL INT GL.ALWAYS IS #0207:
--* Foreign [@text int] constant [@text GL_DEPTH_TEST].
VAL INT GL.DEPTH.TEST IS #0B71:
--* Foreign [@text int] constant [@text GL_DEPTH_BITS].
VAL INT GL.DEPTH.BITS IS #0D56:
--* Foreign [@text int] constant [@text GL_DEPTH_CLEAR_VALUE].
VAL INT GL.DEPTH.CLEAR.VALUE IS #0B73:
--* Foreign [@text int] constant [@text GL_DEPTH_FUNC].
VAL INT GL.DEPTH.FUNC IS #0B74:
--* Foreign [@text int] constant [@text GL_DEPTH_RANGE].
VAL INT GL.DEPTH.RANGE IS #0B70:
--* Foreign [@text int] constant [@text GL_DEPTH_WRITEMASK].
VAL INT GL.DEPTH.WRITEMASK IS #0B72:
--* Foreign [@text int] constant [@text GL_DEPTH_COMPONENT].
VAL INT GL.DEPTH.COMPONENT IS #1902:
--* Foreign [@text int] constant [@text GL_LIGHTING].
VAL INT GL.LIGHTING IS #0B50:
--* Foreign [@text int] constant [@text GL_LIGHT0].
VAL INT GL.LIGHT0 IS #4000:
--* Foreign [@text int] constant [@text GL_LIGHT1].
VAL INT GL.LIGHT1 IS #4001:
--* Foreign [@text int] constant [@text GL_LIGHT2].
VAL INT GL.LIGHT2 IS #4002:
--* Foreign [@text int] constant [@text GL_LIGHT3].
VAL INT GL.LIGHT3 IS #4003:
--* Foreign [@text int] constant [@text GL_LIGHT4].
VAL INT GL.LIGHT4 IS #4004:
--* Foreign [@text int] constant [@text GL_LIGHT5].
VAL INT GL.LIGHT5 IS #4005:
--* Foreign [@text int] constant [@text GL_LIGHT6].
VAL INT GL.LIGHT6 IS #4006:
--* Foreign [@text int] constant [@text GL_LIGHT7].
VAL INT GL.LIGHT7 IS #4007:
--* Foreign [@text int] constant [@text GL_SPOT_EXPONENT].
VAL INT GL.SPOT.EXPONENT IS #1205:
--* Foreign [@text int] constant [@text GL_SPOT_CUTOFF].
VAL INT GL.SPOT.CUTOFF IS #1206:
--* Foreign [@text int] constant [@text GL_CONSTANT_ATTENUATION].
VAL INT GL.CONSTANT.ATTENUATION IS #1207:
--* Foreign [@text int] constant [@text GL_LINEAR_ATTENUATION].
VAL INT GL.LINEAR.ATTENUATION IS #1208:
--* Foreign [@text int] constant [@text GL_QUADRATIC_ATTENUATION].
VAL INT GL.QUADRATIC.ATTENUATION IS #1209:
--* Foreign [@text int] constant [@text GL_AMBIENT].
VAL INT GL.AMBIENT IS #1200:
--* Foreign [@text int] constant [@text GL_DIFFUSE].
VAL INT GL.DIFFUSE IS #1201:
--* Foreign [@text int] constant [@text GL_SPECULAR].
VAL INT GL.SPECULAR IS #1202:
--* Foreign [@text int] constant [@text GL_SHININESS].
VAL INT GL.SHININESS IS #1601:
--* Foreign [@text int] constant [@text GL_EMISSION].
VAL INT GL.EMISSION IS #1600:
--* Foreign [@text int] constant [@text GL_POSITION].
VAL INT GL.POSITION IS #1203:
--* Foreign [@text int] constant [@text GL_SPOT_DIRECTION].
VAL INT GL.SPOT.DIRECTION IS #1204:
--* Foreign [@text int] constant [@text GL_AMBIENT_AND_DIFFUSE].
VAL INT GL.AMBIENT.AND.DIFFUSE IS #1602:
--* Foreign [@text int] constant [@text GL_COLOR_INDEXES].
VAL INT GL.COLOR.INDEXES IS #1603:
--* Foreign [@text int] constant [@text GL_LIGHT_MODEL_TWO_SIDE].
VAL INT GL.LIGHT.MODEL.TWO.SIDE IS #0B52:
--* Foreign [@text int] constant [@text GL_LIGHT_MODEL_LOCAL_VIEWER].
VAL INT GL.LIGHT.MODEL.LOCAL.VIEWER IS #0B51:
--* Foreign [@text int] constant [@text GL_LIGHT_MODEL_AMBIENT].
VAL INT GL.LIGHT.MODEL.AMBIENT IS #0B53:
--* Foreign [@text int] constant [@text GL_FRONT_AND_BACK].
VAL INT GL.FRONT.AND.BACK IS #0408:
--* Foreign [@text int] constant [@text GL_SHADE_MODEL].
VAL INT GL.SHADE.MODEL IS #0B54:
--* Foreign [@text int] constant [@text GL_FLAT].
VAL INT GL.FLAT IS #1D00:
--* Foreign [@text int] constant [@text GL_SMOOTH].
VAL INT GL.SMOOTH IS #1D01:
--* Foreign [@text int] constant [@text GL_COLOR_MATERIAL].
VAL INT GL.COLOR.MATERIAL IS #0B57:
--* Foreign [@text int] constant [@text GL_COLOR_MATERIAL_FACE].
VAL INT GL.COLOR.MATERIAL.FACE IS #0B55:
--* Foreign [@text int] constant [@text GL_COLOR_MATERIAL_PARAMETER].
VAL INT GL.COLOR.MATERIAL.PARAMETER IS #0B56:
--* Foreign [@text int] constant [@text GL_NORMALIZE].
VAL INT GL.NORMALIZE IS #0BA1:
--* Foreign [@text int] constant [@text GL_CLIP_PLANE0].
VAL INT GL.CLIP.PLANE0 IS #3000:
--* Foreign [@text int] constant [@text GL_CLIP_PLANE1].
VAL INT GL.CLIP.PLANE1 IS #3001:
--* Foreign [@text int] constant [@text GL_CLIP_PLANE2].
VAL INT GL.CLIP.PLANE2 IS #3002:
--* Foreign [@text int] constant [@text GL_CLIP_PLANE3].
VAL INT GL.CLIP.PLANE3 IS #3003:
--* Foreign [@text int] constant [@text GL_CLIP_PLANE4].
VAL INT GL.CLIP.PLANE4 IS #3004:
--* Foreign [@text int] constant [@text GL_CLIP_PLANE5].
VAL INT GL.CLIP.PLANE5 IS #3005:
--* Foreign [@text int] constant [@text GL_ACCUM_RED_BITS].
VAL INT GL.ACCUM.RED.BITS IS #0D58:
--* Foreign [@text int] constant [@text GL_ACCUM_GREEN_BITS].
VAL INT GL.ACCUM.GREEN.BITS IS #0D59:
--* Foreign [@text int] constant [@text GL_ACCUM_BLUE_BITS].
VAL INT GL.ACCUM.BLUE.BITS IS #0D5A:
--* Foreign [@text int] constant [@text GL_ACCUM_ALPHA_BITS].
VAL INT GL.ACCUM.ALPHA.BITS IS #0D5B:
--* Foreign [@text int] constant [@text GL_ACCUM_CLEAR_VALUE].
VAL INT GL.ACCUM.CLEAR.VALUE IS #0B80:
--* Foreign [@text int] constant [@text GL_ACCUM].
VAL INT GL.ACCUM IS #0100:
--* Foreign [@text int] constant [@text GL_ADD].
VAL INT GL.ADD IS #0104:
--* Foreign [@text int] constant [@text GL_LOAD].
VAL INT GL.LOAD IS #0101:
--* Foreign [@text int] constant [@text GL_MULT].
VAL INT GL.MULT IS #0103:
--* Foreign [@text int] constant [@text GL_RETURN].
VAL INT GL.RETURN IS #0102:
--* Foreign [@text int] constant [@text GL_ALPHA_TEST].
VAL INT GL.ALPHA.TEST IS #0BC0:
--* Foreign [@text int] constant [@text GL_ALPHA_TEST_REF].
VAL INT GL.ALPHA.TEST.REF IS #0BC2:
--* Foreign [@text int] constant [@text GL_ALPHA_TEST_FUNC].
VAL INT GL.ALPHA.TEST.FUNC IS #0BC1:
--* Foreign [@text int] constant [@text GL_BLEND].
VAL INT GL.BLEND IS #0BE2:
--* Foreign [@text int] constant [@text GL_BLEND_SRC].
VAL INT GL.BLEND.SRC IS #0BE1:
--* Foreign [@text int] constant [@text GL_BLEND_DST].
VAL INT GL.BLEND.DST IS #0BE0:
--* Foreign [@text int] constant [@text GL_ZERO].
VAL INT GL.ZERO IS #0:
--* Foreign [@text int] constant [@text GL_ONE].
VAL INT GL.ONE IS #1:
--* Foreign [@text int] constant [@text GL_SRC_COLOR].
VAL INT GL.SRC.COLOR IS #0300:
--* Foreign [@text int] constant [@text GL_ONE_MINUS_SRC_COLOR].
VAL INT GL.ONE.MINUS.SRC.COLOR IS #0301:
--* Foreign [@text int] constant [@text GL_SRC_ALPHA].
VAL INT GL.SRC.ALPHA IS #0302:
--* Foreign [@text int] constant [@text GL_ONE_MINUS_SRC_ALPHA].
VAL INT GL.ONE.MINUS.SRC.ALPHA IS #0303:
--* Foreign [@text int] constant [@text GL_DST_ALPHA].
VAL INT GL.DST.ALPHA IS #0304:
--* Foreign [@text int] constant [@text GL_ONE_MINUS_DST_ALPHA].
VAL INT GL.ONE.MINUS.DST.ALPHA IS #0305:
--* Foreign [@text int] constant [@text GL_DST_COLOR].
VAL INT GL.DST.COLOR IS #0306:
--* Foreign [@text int] constant [@text GL_ONE_MINUS_DST_COLOR].
VAL INT GL.ONE.MINUS.DST.COLOR IS #0307:
--* Foreign [@text int] constant [@text GL_SRC_ALPHA_SATURATE].
VAL INT GL.SRC.ALPHA.SATURATE IS #0308:
--* Foreign [@text int] constant [@text GL_CONSTANT_COLOR].
VAL INT GL.CONSTANT.COLOR IS #8001:
--* Foreign [@text int] constant [@text GL_ONE_MINUS_CONSTANT_COLOR].
VAL INT GL.ONE.MINUS.CONSTANT.COLOR IS #8002:
--* Foreign [@text int] constant [@text GL_CONSTANT_ALPHA].
VAL INT GL.CONSTANT.ALPHA IS #8003:
--* Foreign [@text int] constant [@text GL_ONE_MINUS_CONSTANT_ALPHA].
VAL INT GL.ONE.MINUS.CONSTANT.ALPHA IS #8004:
--* Foreign [@text int] constant [@text GL_FEEDBACK].
VAL INT GL.FEEDBACK IS #1C01:
--* Foreign [@text int] constant [@text GL_RENDER].
VAL INT GL.RENDER IS #1C00:
--* Foreign [@text int] constant [@text GL_SELECT].
VAL INT GL.SELECT IS #1C02:
--* Foreign [@text int] constant [@text GL_2D].
VAL INT GL.2D IS #0600:
--* Foreign [@text int] constant [@text GL_3D].
VAL INT GL.3D IS #0601:
--* Foreign [@text int] constant [@text GL_3D_COLOR].
VAL INT GL.3D.COLOR IS #0602:
--* Foreign [@text int] constant [@text GL_3D_COLOR_TEXTURE].
VAL INT GL.3D.COLOR.TEXTURE IS #0603:
--* Foreign [@text int] constant [@text GL_4D_COLOR_TEXTURE].
VAL INT GL.4D.COLOR.TEXTURE IS #0604:
--* Foreign [@text int] constant [@text GL_POINT_TOKEN].
VAL INT GL.POINT.TOKEN IS #0701:
--* Foreign [@text int] constant [@text GL_LINE_TOKEN].
VAL INT GL.LINE.TOKEN IS #0702:
--* Foreign [@text int] constant [@text GL_LINE_RESET_TOKEN].
VAL INT GL.LINE.RESET.TOKEN IS #0707:
--* Foreign [@text int] constant [@text GL_POLYGON_TOKEN].
VAL INT GL.POLYGON.TOKEN IS #0703:
--* Foreign [@text int] constant [@text GL_BITMAP_TOKEN].
VAL INT GL.BITMAP.TOKEN IS #0704:
--* Foreign [@text int] constant [@text GL_DRAW_PIXEL_TOKEN].
VAL INT GL.DRAW.PIXEL.TOKEN IS #0705:
--* Foreign [@text int] constant [@text GL_COPY_PIXEL_TOKEN].
VAL INT GL.COPY.PIXEL.TOKEN IS #0706:
--* Foreign [@text int] constant [@text GL_PASS_THROUGH_TOKEN].
VAL INT GL.PASS.THROUGH.TOKEN IS #0700:
--* Foreign [@text int] constant [@text GL_FEEDBACK_BUFFER_POINTER].
VAL INT GL.FEEDBACK.BUFFER.POINTER IS #0DF0:
--* Foreign [@text int] constant [@text GL_FEEDBACK_BUFFER_SIZE].
VAL INT GL.FEEDBACK.BUFFER.SIZE IS #0DF1:
--* Foreign [@text int] constant [@text GL_FEEDBACK_BUFFER_TYPE].
VAL INT GL.FEEDBACK.BUFFER.TYPE IS #0DF2:
--* Foreign [@text int] constant [@text GL_SELECTION_BUFFER_POINTER].
VAL INT GL.SELECTION.BUFFER.POINTER IS #0DF3:
--* Foreign [@text int] constant [@text GL_SELECTION_BUFFER_SIZE].
VAL INT GL.SELECTION.BUFFER.SIZE IS #0DF4:
--* Foreign [@text int] constant [@text GL_FOG].
VAL INT GL.FOG IS #0B60:
--* Foreign [@text int] constant [@text GL_FOG_MODE].
VAL INT GL.FOG.MODE IS #0B65:
--* Foreign [@text int] constant [@text GL_FOG_DENSITY].
VAL INT GL.FOG.DENSITY IS #0B62:
--* Foreign [@text int] constant [@text GL_FOG_COLOR].
VAL INT GL.FOG.COLOR IS #0B66:
--* Foreign [@text int] constant [@text GL_FOG_INDEX].
VAL INT GL.FOG.INDEX IS #0B61:
--* Foreign [@text int] constant [@text GL_FOG_START].
VAL INT GL.FOG.START IS #0B63:
--* Foreign [@text int] constant [@text GL_FOG_END].
VAL INT GL.FOG.END IS #0B64:
--* Foreign [@text int] constant [@text GL_LINEAR].
VAL INT GL.LINEAR IS #2601:
--* Foreign [@text int] constant [@text GL_EXP].
VAL INT GL.EXP IS #0800:
--* Foreign [@text int] constant [@text GL_EXP2].
VAL INT GL.EXP2 IS #0801:
--* Foreign [@text int] constant [@text GL_LOGIC_OP].
VAL INT GL.LOGIC.OP IS #0BF1:
--* Foreign [@text int] constant [@text GL_INDEX_LOGIC_OP].
VAL INT GL.INDEX.LOGIC.OP IS #0BF1:
--* Foreign [@text int] constant [@text GL_COLOR_LOGIC_OP].
VAL INT GL.COLOR.LOGIC.OP IS #0BF2:
--* Foreign [@text int] constant [@text GL_LOGIC_OP_MODE].
VAL INT GL.LOGIC.OP.MODE IS #0BF0:
--* Foreign [@text int] constant [@text GL_CLEAR].
VAL INT GL.CLEAR IS #1500:
--* Foreign [@text int] constant [@text GL_SET].
VAL INT GL.SET IS #150F:
--* Foreign [@text int] constant [@text GL_COPY].
VAL INT GL.COPY IS #1503:
--* Foreign [@text int] constant [@text GL_COPY_INVERTED].
VAL INT GL.COPY.INVERTED IS #150C:
--* Foreign [@text int] constant [@text GL_NOOP].
VAL INT GL.NOOP IS #1505:
--* Foreign [@text int] constant [@text GL_INVERT].
VAL INT GL.INVERT IS #150A:
--* Foreign [@text int] constant [@text GL_AND].
VAL INT GL.AND IS #1501:
--* Foreign [@text int] constant [@text GL_NAND].
VAL INT GL.NAND IS #150E:
--* Foreign [@text int] constant [@text GL_OR].
VAL INT GL.OR IS #1507:
--* Foreign [@text int] constant [@text GL_NOR].
VAL INT GL.NOR IS #1508:
--* Foreign [@text int] constant [@text GL_XOR].
VAL INT GL.XOR IS #1506:
--* Foreign [@text int] constant [@text GL_EQUIV].
VAL INT GL.EQUIV IS #1509:
--* Foreign [@text int] constant [@text GL_AND_REVERSE].
VAL INT GL.AND.REVERSE IS #1502:
--* Foreign [@text int] constant [@text GL_AND_INVERTED].
VAL INT GL.AND.INVERTED IS #1504:
--* Foreign [@text int] constant [@text GL_OR_REVERSE].
VAL INT GL.OR.REVERSE IS #150B:
--* Foreign [@text int] constant [@text GL_OR_INVERTED].
VAL INT GL.OR.INVERTED IS #150D:
--* Foreign [@text int] constant [@text GL_STENCIL_TEST].
VAL INT GL.STENCIL.TEST IS #0B90:
--* Foreign [@text int] constant [@text GL_STENCIL_WRITEMASK].
VAL INT GL.STENCIL.WRITEMASK IS #0B98:
--* Foreign [@text int] constant [@text GL_STENCIL_BITS].
VAL INT GL.STENCIL.BITS IS #0D57:
--* Foreign [@text int] constant [@text GL_STENCIL_FUNC].
VAL INT GL.STENCIL.FUNC IS #0B92:
--* Foreign [@text int] constant [@text GL_STENCIL_VALUE_MASK].
VAL INT GL.STENCIL.VALUE.MASK IS #0B93:
--* Foreign [@text int] constant [@text GL_STENCIL_REF].
VAL INT GL.STENCIL.REF IS #0B97:
--* Foreign [@text int] constant [@text GL_STENCIL_FAIL].
VAL INT GL.STENCIL.FAIL IS #0B94:
--* Foreign [@text int] constant [@text GL_STENCIL_PASS_DEPTH_PASS].
VAL INT GL.STENCIL.PASS.DEPTH.PASS IS #0B96:
--* Foreign [@text int] constant [@text GL_STENCIL_PASS_DEPTH_FAIL].
VAL INT GL.STENCIL.PASS.DEPTH.FAIL IS #0B95:
--* Foreign [@text int] constant [@text GL_STENCIL_CLEAR_VALUE].
VAL INT GL.STENCIL.CLEAR.VALUE IS #0B91:
--* Foreign [@text int] constant [@text GL_STENCIL_INDEX].
VAL INT GL.STENCIL.INDEX IS #1901:
--* Foreign [@text int] constant [@text GL_KEEP].
VAL INT GL.KEEP IS #1E00:
--* Foreign [@text int] constant [@text GL_REPLACE].
VAL INT GL.REPLACE IS #1E01:
--* Foreign [@text int] constant [@text GL_INCR].
VAL INT GL.INCR IS #1E02:
--* Foreign [@text int] constant [@text GL_DECR].
VAL INT GL.DECR IS #1E03:
--* Foreign [@text int] constant [@text GL_NONE].
VAL INT GL.NONE IS #0:
--* Foreign [@text int] constant [@text GL_LEFT].
VAL INT GL.LEFT IS #0406:
--* Foreign [@text int] constant [@text GL_RIGHT].
VAL INT GL.RIGHT IS #0407:
--* Foreign [@text int] constant [@text GL_FRONT_LEFT].
VAL INT GL.FRONT.LEFT IS #0400:
--* Foreign [@text int] constant [@text GL_FRONT_RIGHT].
VAL INT GL.FRONT.RIGHT IS #0401:
--* Foreign [@text int] constant [@text GL_BACK_LEFT].
VAL INT GL.BACK.LEFT IS #0402:
--* Foreign [@text int] constant [@text GL_BACK_RIGHT].
VAL INT GL.BACK.RIGHT IS #0403:
--* Foreign [@text int] constant [@text GL_AUX0].
VAL INT GL.AUX0 IS #0409:
--* Foreign [@text int] constant [@text GL_AUX1].
VAL INT GL.AUX1 IS #040A:
--* Foreign [@text int] constant [@text GL_AUX2].
VAL INT GL.AUX2 IS #040B:
--* Foreign [@text int] constant [@text GL_AUX3].
VAL INT GL.AUX3 IS #040C:
--* Foreign [@text int] constant [@text GL_COLOR_INDEX].
VAL INT GL.COLOR.INDEX IS #1900:
--* Foreign [@text int] constant [@text GL_RED].
VAL INT GL.RED IS #1903:
--* Foreign [@text int] constant [@text GL_GREEN].
VAL INT GL.GREEN IS #1904:
--* Foreign [@text int] constant [@text GL_BLUE].
VAL INT GL.BLUE IS #1905:
--* Foreign [@text int] constant [@text GL_ALPHA].
VAL INT GL.ALPHA IS #1906:
--* Foreign [@text int] constant [@text GL_LUMINANCE].
VAL INT GL.LUMINANCE IS #1909:
--* Foreign [@text int] constant [@text GL_LUMINANCE_ALPHA].
VAL INT GL.LUMINANCE.ALPHA IS #190A:
--* Foreign [@text int] constant [@text GL_ALPHA_BITS].
VAL INT GL.ALPHA.BITS IS #0D55:
--* Foreign [@text int] constant [@text GL_RED_BITS].
VAL INT GL.RED.BITS IS #0D52:
--* Foreign [@text int] constant [@text GL_GREEN_BITS].
VAL INT GL.GREEN.BITS IS #0D53:
--* Foreign [@text int] constant [@text GL_BLUE_BITS].
VAL INT GL.BLUE.BITS IS #0D54:
--* Foreign [@text int] constant [@text GL_INDEX_BITS].
VAL INT GL.INDEX.BITS IS #0D51:
--* Foreign [@text int] constant [@text GL_SUBPIXEL_BITS].
VAL INT GL.SUBPIXEL.BITS IS #0D50:
--* Foreign [@text int] constant [@text GL_AUX_BUFFERS].
VAL INT GL.AUX.BUFFERS IS #0C00:
--* Foreign [@text int] constant [@text GL_READ_BUFFER].
VAL INT GL.READ.BUFFER IS #0C02:
--* Foreign [@text int] constant [@text GL_DRAW_BUFFER].
VAL INT GL.DRAW.BUFFER IS #0C01:
--* Foreign [@text int] constant [@text GL_DOUBLEBUFFER].
VAL INT GL.DOUBLEBUFFER IS #0C32:
--* Foreign [@text int] constant [@text GL_STEREO].
VAL INT GL.STEREO IS #0C33:
--* Foreign [@text int] constant [@text GL_BITMAP].
VAL INT GL.BITMAP IS #1A00:
--* Foreign [@text int] constant [@text GL_COLOR].
VAL INT GL.COLOR IS #1800:
--* Foreign [@text int] constant [@text GL_DEPTH].
VAL INT GL.DEPTH IS #1801:
--* Foreign [@text int] constant [@text GL_STENCIL].
VAL INT GL.STENCIL IS #1802:
--* Foreign [@text int] constant [@text GL_DITHER].
VAL INT GL.DITHER IS #0BD0:
--* Foreign [@text int] constant [@text GL_RGB].
VAL INT GL.RGB IS #1907:
--* Foreign [@text int] constant [@text GL_RGBA].
VAL INT GL.RGBA IS #1908:
--* Foreign [@text int] constant [@text GL_MAX_LIST_NESTING].
VAL INT GL.MAX.LIST.NESTING IS #0B31:
--* Foreign [@text int] constant [@text GL_MAX_ATTRIB_STACK_DEPTH].
VAL INT GL.MAX.ATTRIB.STACK.DEPTH IS #0D35:
--* Foreign [@text int] constant [@text GL_MAX_MODELVIEW_STACK_DEPTH].
VAL INT GL.MAX.MODELVIEW.STACK.DEPTH IS #0D36:
--* Foreign [@text int] constant [@text GL_MAX_NAME_STACK_DEPTH].
VAL INT GL.MAX.NAME.STACK.DEPTH IS #0D37:
--* Foreign [@text int] constant [@text GL_MAX_PROJECTION_STACK_DEPTH].
VAL INT GL.MAX.PROJECTION.STACK.DEPTH IS #0D38:
--* Foreign [@text int] constant [@text GL_MAX_TEXTURE_STACK_DEPTH].
VAL INT GL.MAX.TEXTURE.STACK.DEPTH IS #0D39:
--* Foreign [@text int] constant [@text GL_MAX_EVAL_ORDER].
VAL INT GL.MAX.EVAL.ORDER IS #0D30:
--* Foreign [@text int] constant [@text GL_MAX_LIGHTS].
VAL INT GL.MAX.LIGHTS IS #0D31:
--* Foreign [@text int] constant [@text GL_MAX_CLIP_PLANES].
VAL INT GL.MAX.CLIP.PLANES IS #0D32:
--* Foreign [@text int] constant [@text GL_MAX_TEXTURE_SIZE].
VAL INT GL.MAX.TEXTURE.SIZE IS #0D33:
--* Foreign [@text int] constant [@text GL_MAX_PIXEL_MAP_TABLE].
VAL INT GL.MAX.PIXEL.MAP.TABLE IS #0D34:
--* Foreign [@text int] constant [@text GL_MAX_VIEWPORT_DIMS].
VAL INT GL.MAX.VIEWPORT.DIMS IS #0D3A:
--* Foreign [@text int] constant [@text GL_MAX_CLIENT_ATTRIB_STACK_DEPTH].
VAL INT GL.MAX.CLIENT.ATTRIB.STACK.DEPTH IS #0D3B:
--* Foreign [@text int] constant [@text GL_ATTRIB_STACK_DEPTH].
VAL INT GL.ATTRIB.STACK.DEPTH IS #0BB0:
--* Foreign [@text int] constant [@text GL_CLIENT_ATTRIB_STACK_DEPTH].
VAL INT GL.CLIENT.ATTRIB.STACK.DEPTH IS #0BB1:
--* Foreign [@text int] constant [@text GL_COLOR_CLEAR_VALUE].
VAL INT GL.COLOR.CLEAR.VALUE IS #0C22:
--* Foreign [@text int] constant [@text GL_COLOR_WRITEMASK].
VAL INT GL.COLOR.WRITEMASK IS #0C23:
--* Foreign [@text int] constant [@text GL_CURRENT_INDEX].
VAL INT GL.CURRENT.INDEX IS #0B01:
--* Foreign [@text int] constant [@text GL_CURRENT_COLOR].
VAL INT GL.CURRENT.COLOR IS #0B00:
--* Foreign [@text int] constant [@text GL_CURRENT_NORMAL].
VAL INT GL.CURRENT.NORMAL IS #0B02:
--* Foreign [@text int] constant [@text GL_CURRENT_RASTER_COLOR].
VAL INT GL.CURRENT.RASTER.COLOR IS #0B04:
--* Foreign [@text int] constant [@text GL_CURRENT_RASTER_DISTANCE].
VAL INT GL.CURRENT.RASTER.DISTANCE IS #0B09:
--* Foreign [@text int] constant [@text GL_CURRENT_RASTER_INDEX].
VAL INT GL.CURRENT.RASTER.INDEX IS #0B05:
--* Foreign [@text int] constant [@text GL_CURRENT_RASTER_POSITION].
VAL INT GL.CURRENT.RASTER.POSITION IS #0B07:
--* Foreign [@text int] constant [@text GL_CURRENT_RASTER_TEXTURE_COORDS].
VAL INT GL.CURRENT.RASTER.TEXTURE.COORDS IS #0B06:
--* Foreign [@text int] constant [@text GL_CURRENT_RASTER_POSITION_VALID].
VAL INT GL.CURRENT.RASTER.POSITION.VALID IS #0B08:
--* Foreign [@text int] constant [@text GL_CURRENT_TEXTURE_COORDS].
VAL INT GL.CURRENT.TEXTURE.COORDS IS #0B03:
--* Foreign [@text int] constant [@text GL_INDEX_CLEAR_VALUE].
VAL INT GL.INDEX.CLEAR.VALUE IS #0C20:
--* Foreign [@text int] constant [@text GL_INDEX_MODE].
VAL INT GL.INDEX.MODE IS #0C30:
--* Foreign [@text int] constant [@text GL_INDEX_WRITEMASK].
VAL INT GL.INDEX.WRITEMASK IS #0C21:
--* Foreign [@text int] constant [@text GL_MODELVIEW_MATRIX].
VAL INT GL.MODELVIEW.MATRIX IS #0BA6:
--* Foreign [@text int] constant [@text GL_MODELVIEW_STACK_DEPTH].
VAL INT GL.MODELVIEW.STACK.DEPTH IS #0BA3:
--* Foreign [@text int] constant [@text GL_NAME_STACK_DEPTH].
VAL INT GL.NAME.STACK.DEPTH IS #0D70:
--* Foreign [@text int] constant [@text GL_PROJECTION_MATRIX].
VAL INT GL.PROJECTION.MATRIX IS #0BA7:
--* Foreign [@text int] constant [@text GL_PROJECTION_STACK_DEPTH].
VAL INT GL.PROJECTION.STACK.DEPTH IS #0BA4:
--* Foreign [@text int] constant [@text GL_RENDER_MODE].
VAL INT GL.RENDER.MODE IS #0C40:
--* Foreign [@text int] constant [@text GL_RGBA_MODE].
VAL INT GL.RGBA.MODE IS #0C31:
--* Foreign [@text int] constant [@text GL_TEXTURE_MATRIX].
VAL INT GL.TEXTURE.MATRIX IS #0BA8:
--* Foreign [@text int] constant [@text GL_TEXTURE_STACK_DEPTH].
VAL INT GL.TEXTURE.STACK.DEPTH IS #0BA5:
--* Foreign [@text int] constant [@text GL_VIEWPORT].
VAL INT GL.VIEWPORT IS #0BA2:
--* Foreign [@text int] constant [@text GL_AUTO_NORMAL].
VAL INT GL.AUTO.NORMAL IS #0D80:
--* Foreign [@text int] constant [@text GL_MAP1_COLOR_4].
VAL INT GL.MAP1.COLOR.4 IS #0D90:
--* Foreign [@text int] constant [@text GL_MAP1_GRID_DOMAIN].
VAL INT GL.MAP1.GRID.DOMAIN IS #0DD0:
--* Foreign [@text int] constant [@text GL_MAP1_GRID_SEGMENTS].
VAL INT GL.MAP1.GRID.SEGMENTS IS #0DD1:
--* Foreign [@text int] constant [@text GL_MAP1_INDEX].
VAL INT GL.MAP1.INDEX IS #0D91:
--* Foreign [@text int] constant [@text GL_MAP1_NORMAL].
VAL INT GL.MAP1.NORMAL IS #0D92:
--* Foreign [@text int] constant [@text GL_MAP1_TEXTURE_COORD_1].
VAL INT GL.MAP1.TEXTURE.COORD.1 IS #0D93:
--* Foreign [@text int] constant [@text GL_MAP1_TEXTURE_COORD_2].
VAL INT GL.MAP1.TEXTURE.COORD.2 IS #0D94:
--* Foreign [@text int] constant [@text GL_MAP1_TEXTURE_COORD_3].
VAL INT GL.MAP1.TEXTURE.COORD.3 IS #0D95:
--* Foreign [@text int] constant [@text GL_MAP1_TEXTURE_COORD_4].
VAL INT GL.MAP1.TEXTURE.COORD.4 IS #0D96:
--* Foreign [@text int] constant [@text GL_MAP1_VERTEX_3].
VAL INT GL.MAP1.VERTEX.3 IS #0D97:
--* Foreign [@text int] constant [@text GL_MAP1_VERTEX_4].
VAL INT GL.MAP1.VERTEX.4 IS #0D98:
--* Foreign [@text int] constant [@text GL_MAP2_COLOR_4].
VAL INT GL.MAP2.COLOR.4 IS #0DB0:
--* Foreign [@text int] constant [@text GL_MAP2_GRID_DOMAIN].
VAL INT GL.MAP2.GRID.DOMAIN IS #0DD2:
--* Foreign [@text int] constant [@text GL_MAP2_GRID_SEGMENTS].
VAL INT GL.MAP2.GRID.SEGMENTS IS #0DD3:
--* Foreign [@text int] constant [@text GL_MAP2_INDEX].
VAL INT GL.MAP2.INDEX IS #0DB1:
--* Foreign [@text int] constant [@text GL_MAP2_NORMAL].
VAL INT GL.MAP2.NORMAL IS #0DB2:
--* Foreign [@text int] constant [@text GL_MAP2_TEXTURE_COORD_1].
VAL INT GL.MAP2.TEXTURE.COORD.1 IS #0DB3:
--* Foreign [@text int] constant [@text GL_MAP2_TEXTURE_COORD_2].
VAL INT GL.MAP2.TEXTURE.COORD.2 IS #0DB4:
--* Foreign [@text int] constant [@text GL_MAP2_TEXTURE_COORD_3].
VAL INT GL.MAP2.TEXTURE.COORD.3 IS #0DB5:
--* Foreign [@text int] constant [@text GL_MAP2_TEXTURE_COORD_4].
VAL INT GL.MAP2.TEXTURE.COORD.4 IS #0DB6:
--* Foreign [@text int] constant [@text GL_MAP2_VERTEX_3].
VAL INT GL.MAP2.VERTEX.3 IS #0DB7:
--* Foreign [@text int] constant [@text GL_MAP2_VERTEX_4].
VAL INT GL.MAP2.VERTEX.4 IS #0DB8:
--* Foreign [@text int] constant [@text GL_COEFF].
VAL INT GL.COEFF IS #0A00:
--* Foreign [@text int] constant [@text GL_DOMAIN].
VAL INT GL.DOMAIN IS #0A02:
--* Foreign [@text int] constant [@text GL_ORDER].
VAL INT GL.ORDER IS #0A01:
--* Foreign [@text int] constant [@text GL_FOG_HINT].
VAL INT GL.FOG.HINT IS #0C54:
--* Foreign [@text int] constant [@text GL_LINE_SMOOTH_HINT].
VAL INT GL.LINE.SMOOTH.HINT IS #0C52:
--* Foreign [@text int] constant [@text GL_PERSPECTIVE_CORRECTION_HINT].
VAL INT GL.PERSPECTIVE.CORRECTION.HINT IS #0C50:
--* Foreign [@text int] constant [@text GL_POINT_SMOOTH_HINT].
VAL INT GL.POINT.SMOOTH.HINT IS #0C51:
--* Foreign [@text int] constant [@text GL_POLYGON_SMOOTH_HINT].
VAL INT GL.POLYGON.SMOOTH.HINT IS #0C53:
--* Foreign [@text int] constant [@text GL_DONT_CARE].
VAL INT GL.DONT.CARE IS #1100:
--* Foreign [@text int] constant [@text GL_FASTEST].
VAL INT GL.FASTEST IS #1101:
--* Foreign [@text int] constant [@text GL_NICEST].
VAL INT GL.NICEST IS #1102:
--* Foreign [@text int] constant [@text GL_SCISSOR_TEST].
VAL INT GL.SCISSOR.TEST IS #0C11:
--* Foreign [@text int] constant [@text GL_SCISSOR_BOX].
VAL INT GL.SCISSOR.BOX IS #0C10:
--* Foreign [@text int] constant [@text GL_MAP_COLOR].
VAL INT GL.MAP.COLOR IS #0D10:
--* Foreign [@text int] constant [@text GL_MAP_STENCIL].
VAL INT GL.MAP.STENCIL IS #0D11:
--* Foreign [@text int] constant [@text GL_INDEX_SHIFT].
VAL INT GL.INDEX.SHIFT IS #0D12:
--* Foreign [@text int] constant [@text GL_INDEX_OFFSET].
VAL INT GL.INDEX.OFFSET IS #0D13:
--* Foreign [@text int] constant [@text GL_RED_SCALE].
VAL INT GL.RED.SCALE IS #0D14:
--* Foreign [@text int] constant [@text GL_RED_BIAS].
VAL INT GL.RED.BIAS IS #0D15:
--* Foreign [@text int] constant [@text GL_GREEN_SCALE].
VAL INT GL.GREEN.SCALE IS #0D18:
--* Foreign [@text int] constant [@text GL_GREEN_BIAS].
VAL INT GL.GREEN.BIAS IS #0D19:
--* Foreign [@text int] constant [@text GL_BLUE_SCALE].
VAL INT GL.BLUE.SCALE IS #0D1A:
--* Foreign [@text int] constant [@text GL_BLUE_BIAS].
VAL INT GL.BLUE.BIAS IS #0D1B:
--* Foreign [@text int] constant [@text GL_ALPHA_SCALE].
VAL INT GL.ALPHA.SCALE IS #0D1C:
--* Foreign [@text int] constant [@text GL_ALPHA_BIAS].
VAL INT GL.ALPHA.BIAS IS #0D1D:
--* Foreign [@text int] constant [@text GL_DEPTH_SCALE].
VAL INT GL.DEPTH.SCALE IS #0D1E:
--* Foreign [@text int] constant [@text GL_DEPTH_BIAS].
VAL INT GL.DEPTH.BIAS IS #0D1F:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_S_TO_S_SIZE].
VAL INT GL.PIXEL.MAP.S.TO.S.SIZE IS #0CB1:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_I_SIZE].
VAL INT GL.PIXEL.MAP.I.TO.I.SIZE IS #0CB0:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_R_SIZE].
VAL INT GL.PIXEL.MAP.I.TO.R.SIZE IS #0CB2:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_G_SIZE].
VAL INT GL.PIXEL.MAP.I.TO.G.SIZE IS #0CB3:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_B_SIZE].
VAL INT GL.PIXEL.MAP.I.TO.B.SIZE IS #0CB4:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_A_SIZE].
VAL INT GL.PIXEL.MAP.I.TO.A.SIZE IS #0CB5:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_R_TO_R_SIZE].
VAL INT GL.PIXEL.MAP.R.TO.R.SIZE IS #0CB6:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_G_TO_G_SIZE].
VAL INT GL.PIXEL.MAP.G.TO.G.SIZE IS #0CB7:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_B_TO_B_SIZE].
VAL INT GL.PIXEL.MAP.B.TO.B.SIZE IS #0CB8:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_A_TO_A_SIZE].
VAL INT GL.PIXEL.MAP.A.TO.A.SIZE IS #0CB9:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_S_TO_S].
VAL INT GL.PIXEL.MAP.S.TO.S IS #0C71:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_I].
VAL INT GL.PIXEL.MAP.I.TO.I IS #0C70:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_R].
VAL INT GL.PIXEL.MAP.I.TO.R IS #0C72:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_G].
VAL INT GL.PIXEL.MAP.I.TO.G IS #0C73:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_B].
VAL INT GL.PIXEL.MAP.I.TO.B IS #0C74:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_I_TO_A].
VAL INT GL.PIXEL.MAP.I.TO.A IS #0C75:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_R_TO_R].
VAL INT GL.PIXEL.MAP.R.TO.R IS #0C76:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_G_TO_G].
VAL INT GL.PIXEL.MAP.G.TO.G IS #0C77:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_B_TO_B].
VAL INT GL.PIXEL.MAP.B.TO.B IS #0C78:
--* Foreign [@text int] constant [@text GL_PIXEL_MAP_A_TO_A].
VAL INT GL.PIXEL.MAP.A.TO.A IS #0C79:
--* Foreign [@text int] constant [@text GL_PACK_ALIGNMENT].
VAL INT GL.PACK.ALIGNMENT IS #0D05:
--* Foreign [@text int] constant [@text GL_PACK_LSB_FIRST].
VAL INT GL.PACK.LSB.FIRST IS #0D01:
--* Foreign [@text int] constant [@text GL_PACK_ROW_LENGTH].
VAL INT GL.PACK.ROW.LENGTH IS #0D02:
--* Foreign [@text int] constant [@text GL_PACK_SKIP_PIXELS].
VAL INT GL.PACK.SKIP.PIXELS IS #0D04:
--* Foreign [@text int] constant [@text GL_PACK_SKIP_ROWS].
VAL INT GL.PACK.SKIP.ROWS IS #0D03:
--* Foreign [@text int] constant [@text GL_PACK_SWAP_BYTES].
VAL INT GL.PACK.SWAP.BYTES IS #0D00:
--* Foreign [@text int] constant [@text GL_UNPACK_ALIGNMENT].
VAL INT GL.UNPACK.ALIGNMENT IS #0CF5:
--* Foreign [@text int] constant [@text GL_UNPACK_LSB_FIRST].
VAL INT GL.UNPACK.LSB.FIRST IS #0CF1:
--* Foreign [@text int] constant [@text GL_UNPACK_ROW_LENGTH].
VAL INT GL.UNPACK.ROW.LENGTH IS #0CF2:
--* Foreign [@text int] constant [@text GL_UNPACK_SKIP_PIXELS].
VAL INT GL.UNPACK.SKIP.PIXELS IS #0CF4:
--* Foreign [@text int] constant [@text GL_UNPACK_SKIP_ROWS].
VAL INT GL.UNPACK.SKIP.ROWS IS #0CF3:
--* Foreign [@text int] constant [@text GL_UNPACK_SWAP_BYTES].
VAL INT GL.UNPACK.SWAP.BYTES IS #0CF0:
--* Foreign [@text int] constant [@text GL_ZOOM_X].
VAL INT GL.ZOOM.X IS #0D16:
--* Foreign [@text int] constant [@text GL_ZOOM_Y].
VAL INT GL.ZOOM.Y IS #0D17:
--* Foreign [@text int] constant [@text GL_TEXTURE_ENV].
VAL INT GL.TEXTURE.ENV IS #2300:
--* Foreign [@text int] constant [@text GL_TEXTURE_ENV_MODE].
VAL INT GL.TEXTURE.ENV.MODE IS #2200:
--* Foreign [@text int] constant [@text GL_TEXTURE_1D].
VAL INT GL.TEXTURE.1D IS #0DE0:
--* Foreign [@text int] constant [@text GL_TEXTURE_2D].
VAL INT GL.TEXTURE.2D IS #0DE1:
--* Foreign [@text int] constant [@text GL_TEXTURE_WRAP_S].
VAL INT GL.TEXTURE.WRAP.S IS #2802:
--* Foreign [@text int] constant [@text GL_TEXTURE_WRAP_T].
VAL INT GL.TEXTURE.WRAP.T IS #2803:
--* Foreign [@text int] constant [@text GL_TEXTURE_MAG_FILTER].
VAL INT GL.TEXTURE.MAG.FILTER IS #2800:
--* Foreign [@text int] constant [@text GL_TEXTURE_MIN_FILTER].
VAL INT GL.TEXTURE.MIN.FILTER IS #2801:
--* Foreign [@text int] constant [@text GL_TEXTURE_ENV_COLOR].
VAL INT GL.TEXTURE.ENV.COLOR IS #2201:
--* Foreign [@text int] constant [@text GL_TEXTURE_GEN_S].
VAL INT GL.TEXTURE.GEN.S IS #0C60:
--* Foreign [@text int] constant [@text GL_TEXTURE_GEN_T].
VAL INT GL.TEXTURE.GEN.T IS #0C61:
--* Foreign [@text int] constant [@text GL_TEXTURE_GEN_MODE].
VAL INT GL.TEXTURE.GEN.MODE IS #2500:
--* Foreign [@text int] constant [@text GL_TEXTURE_BORDER_COLOR].
VAL INT GL.TEXTURE.BORDER.COLOR IS #1004:
--* Foreign [@text int] constant [@text GL_TEXTURE_WIDTH].
VAL INT GL.TEXTURE.WIDTH IS #1000:
--* Foreign [@text int] constant [@text GL_TEXTURE_HEIGHT].
VAL INT GL.TEXTURE.HEIGHT IS #1001:
--* Foreign [@text int] constant [@text GL_TEXTURE_BORDER].
VAL INT GL.TEXTURE.BORDER IS #1005:
--* Foreign [@text int] constant [@text GL_TEXTURE_COMPONENTS].
VAL INT GL.TEXTURE.COMPONENTS IS #1003:
--* Foreign [@text int] constant [@text GL_TEXTURE_RED_SIZE].
VAL INT GL.TEXTURE.RED.SIZE IS #805C:
--* Foreign [@text int] constant [@text GL_TEXTURE_GREEN_SIZE].
VAL INT GL.TEXTURE.GREEN.SIZE IS #805D:
--* Foreign [@text int] constant [@text GL_TEXTURE_BLUE_SIZE].
VAL INT GL.TEXTURE.BLUE.SIZE IS #805E:
--* Foreign [@text int] constant [@text GL_TEXTURE_ALPHA_SIZE].
VAL INT GL.TEXTURE.ALPHA.SIZE IS #805F:
--* Foreign [@text int] constant [@text GL_TEXTURE_LUMINANCE_SIZE].
VAL INT GL.TEXTURE.LUMINANCE.SIZE IS #8060:
--* Foreign [@text int] constant [@text GL_TEXTURE_INTENSITY_SIZE].
VAL INT GL.TEXTURE.INTENSITY.SIZE IS #8061:
--* Foreign [@text int] constant [@text GL_NEAREST_MIPMAP_NEAREST].
VAL INT GL.NEAREST.MIPMAP.NEAREST IS #2700:
--* Foreign [@text int] constant [@text GL_NEAREST_MIPMAP_LINEAR].
VAL INT GL.NEAREST.MIPMAP.LINEAR IS #2702:
--* Foreign [@text int] constant [@text GL_LINEAR_MIPMAP_NEAREST].
VAL INT GL.LINEAR.MIPMAP.NEAREST IS #2701:
--* Foreign [@text int] constant [@text GL_LINEAR_MIPMAP_LINEAR].
VAL INT GL.LINEAR.MIPMAP.LINEAR IS #2703:
--* Foreign [@text int] constant [@text GL_OBJECT_LINEAR].
VAL INT GL.OBJECT.LINEAR IS #2401:
--* Foreign [@text int] constant [@text GL_OBJECT_PLANE].
VAL INT GL.OBJECT.PLANE IS #2501:
--* Foreign [@text int] constant [@text GL_EYE_LINEAR].
VAL INT GL.EYE.LINEAR IS #2400:
--* Foreign [@text int] constant [@text GL_EYE_PLANE].
VAL INT GL.EYE.PLANE IS #2502:
--* Foreign [@text int] constant [@text GL_SPHERE_MAP].
VAL INT GL.SPHERE.MAP IS #2402:
--* Foreign [@text int] constant [@text GL_DECAL].
VAL INT GL.DECAL IS #2101:
--* Foreign [@text int] constant [@text GL_MODULATE].
VAL INT GL.MODULATE IS #2100:
--* Foreign [@text int] constant [@text GL_NEAREST].
VAL INT GL.NEAREST IS #2600:
--* Foreign [@text int] constant [@text GL_REPEAT].
VAL INT GL.REPEAT IS #2901:
--* Foreign [@text int] constant [@text GL_CLAMP].
VAL INT GL.CLAMP IS #2900:
--* Foreign [@text int] constant [@text GL_S].
VAL INT GL.S IS #2000:
--* Foreign [@text int] constant [@text GL_T].
VAL INT GL.T IS #2001:
--* Foreign [@text int] constant [@text GL_R].
VAL INT GL.R IS #2002:
--* Foreign [@text int] constant [@text GL_Q].
VAL INT GL.Q IS #2003:
--* Foreign [@text int] constant [@text GL_TEXTURE_GEN_R].
VAL INT GL.TEXTURE.GEN.R IS #0C62:
--* Foreign [@text int] constant [@text GL_TEXTURE_GEN_Q].
VAL INT GL.TEXTURE.GEN.Q IS #0C63:
--* Foreign [@text int] constant [@text GL_VENDOR].
VAL INT GL.VENDOR IS #1F00:
--* Foreign [@text int] constant [@text GL_RENDERER].
VAL INT GL.RENDERER IS #1F01:
--* Foreign [@text int] constant [@text GL_VERSION].
VAL INT GL.VERSION IS #1F02:
--* Foreign [@text int] constant [@text GL_EXTENSIONS].
VAL INT GL.EXTENSIONS IS #1F03:
--* Foreign [@text int] constant [@text GL_NO_ERROR].
VAL INT GL.NO.ERROR IS #0:
--* Foreign [@text int] constant [@text GL_INVALID_VALUE].
VAL INT GL.INVALID.VALUE IS #0501:
--* Foreign [@text int] constant [@text GL_INVALID_ENUM].
VAL INT GL.INVALID.ENUM IS #0500:
--* Foreign [@text int] constant [@text GL_INVALID_OPERATION].
VAL INT GL.INVALID.OPERATION IS #0502:
--* Foreign [@text int] constant [@text GL_STACK_OVERFLOW].
VAL INT GL.STACK.OVERFLOW IS #0503:
--* Foreign [@text int] constant [@text GL_STACK_UNDERFLOW].
VAL INT GL.STACK.UNDERFLOW IS #0504:
--* Foreign [@text int] constant [@text GL_OUT_OF_MEMORY].
VAL INT GL.OUT.OF.MEMORY IS #0505:
--* Foreign [@text int] constant [@text GL_CURRENT_BIT].
VAL INT GL.CURRENT.BIT IS #00000001:
--* Foreign [@text int] constant [@text GL_POINT_BIT].
VAL INT GL.POINT.BIT IS #00000002:
--* Foreign [@text int] constant [@text GL_LINE_BIT].
VAL INT GL.LINE.BIT IS #00000004:
--* Foreign [@text int] constant [@text GL_POLYGON_BIT].
VAL INT GL.POLYGON.BIT IS #00000008:
--* Foreign [@text int] constant [@text GL_POLYGON_STIPPLE_BIT].
VAL INT GL.POLYGON.STIPPLE.BIT IS #00000010:
--* Foreign [@text int] constant [@text GL_PIXEL_MODE_BIT].
VAL INT GL.PIXEL.MODE.BIT IS #00000020:
--* Foreign [@text int] constant [@text GL_LIGHTING_BIT].
VAL INT GL.LIGHTING.BIT IS #00000040:
--* Foreign [@text int] constant [@text GL_FOG_BIT].
VAL INT GL.FOG.BIT IS #00000080:
--* Foreign [@text int] constant [@text GL_DEPTH_BUFFER_BIT].
VAL INT GL.DEPTH.BUFFER.BIT IS #00000100:
--* Foreign [@text int] constant [@text GL_ACCUM_BUFFER_BIT].
VAL INT GL.ACCUM.BUFFER.BIT IS #00000200:
--* Foreign [@text int] constant [@text GL_STENCIL_BUFFER_BIT].
VAL INT GL.STENCIL.BUFFER.BIT IS #00000400:
--* Foreign [@text int] constant [@text GL_VIEWPORT_BIT].
VAL INT GL.VIEWPORT.BIT IS #00000800:
--* Foreign [@text int] constant [@text GL_TRANSFORM_BIT].
VAL INT GL.TRANSFORM.BIT IS #00001000:
--* Foreign [@text int] constant [@text GL_ENABLE_BIT].
VAL INT GL.ENABLE.BIT IS #00002000:
--* Foreign [@text int] constant [@text GL_COLOR_BUFFER_BIT].
VAL INT GL.COLOR.BUFFER.BIT IS #00004000:
--* Foreign [@text int] constant [@text GL_HINT_BIT].
VAL INT GL.HINT.BIT IS #00008000:
--* Foreign [@text int] constant [@text GL_EVAL_BIT].
VAL INT GL.EVAL.BIT IS #00010000:
--* Foreign [@text int] constant [@text GL_LIST_BIT].
VAL INT GL.LIST.BIT IS #00020000:
--* Foreign [@text int] constant [@text GL_TEXTURE_BIT].
VAL INT GL.TEXTURE.BIT IS #00040000:
--* Foreign [@text int] constant [@text GL_SCISSOR_BIT].
VAL INT GL.SCISSOR.BIT IS #00080000:
--* Foreign [@text int] constant [@text GL_ALL_ATTRIB_BITS].
VAL INT GL.ALL.ATTRIB.BITS IS #000FFFFF:
--* Foreign [@text int] constant [@text GL_PROXY_TEXTURE_1D].
VAL INT GL.PROXY.TEXTURE.1D IS #8063:
--* Foreign [@text int] constant [@text GL_PROXY_TEXTURE_2D].
VAL INT GL.PROXY.TEXTURE.2D IS #8064:
--* Foreign [@text int] constant [@text GL_TEXTURE_PRIORITY].
VAL INT GL.TEXTURE.PRIORITY IS #8066:
--* Foreign [@text int] constant [@text GL_TEXTURE_RESIDENT].
VAL INT GL.TEXTURE.RESIDENT IS #8067:
--* Foreign [@text int] constant [@text GL_TEXTURE_BINDING_1D].
VAL INT GL.TEXTURE.BINDING.1D IS #8068:
--* Foreign [@text int] constant [@text GL_TEXTURE_BINDING_2D].
VAL INT GL.TEXTURE.BINDING.2D IS #8069:
--* Foreign [@text int] constant [@text GL_TEXTURE_INTERNAL_FORMAT].
VAL INT GL.TEXTURE.INTERNAL.FORMAT IS #1003:
--* Foreign [@text int] constant [@text GL_ALPHA4].
VAL INT GL.ALPHA4 IS #803B:
--* Foreign [@text int] constant [@text GL_ALPHA8].
VAL INT GL.ALPHA8 IS #803C:
--* Foreign [@text int] constant [@text GL_ALPHA12].
VAL INT GL.ALPHA12 IS #803D:
--* Foreign [@text int] constant [@text GL_ALPHA16].
VAL INT GL.ALPHA16 IS #803E:
--* Foreign [@text int] constant [@text GL_LUMINANCE4].
VAL INT GL.LUMINANCE4 IS #803F:
--* Foreign [@text int] constant [@text GL_LUMINANCE8].
VAL INT GL.LUMINANCE8 IS #8040:
--* Foreign [@text int] constant [@text GL_LUMINANCE12].
VAL INT GL.LUMINANCE12 IS #8041:
--* Foreign [@text int] constant [@text GL_LUMINANCE16].
VAL INT GL.LUMINANCE16 IS #8042:
--* Foreign [@text int] constant [@text GL_LUMINANCE4_ALPHA4].
VAL INT GL.LUMINANCE4.ALPHA4 IS #8043:
--* Foreign [@text int] constant [@text GL_LUMINANCE6_ALPHA2].
VAL INT GL.LUMINANCE6.ALPHA2 IS #8044:
--* Foreign [@text int] constant [@text GL_LUMINANCE8_ALPHA8].
VAL INT GL.LUMINANCE8.ALPHA8 IS #8045:
--* Foreign [@text int] constant [@text GL_LUMINANCE12_ALPHA4].
VAL INT GL.LUMINANCE12.ALPHA4 IS #8046:
--* Foreign [@text int] constant [@text GL_LUMINANCE12_ALPHA12].
VAL INT GL.LUMINANCE12.ALPHA12 IS #8047:
--* Foreign [@text int] constant [@text GL_LUMINANCE16_ALPHA16].
VAL INT GL.LUMINANCE16.ALPHA16 IS #8048:
--* Foreign [@text int] constant [@text GL_INTENSITY].
VAL INT GL.INTENSITY IS #8049:
--* Foreign [@text int] constant [@text GL_INTENSITY4].
VAL INT GL.INTENSITY4 IS #804A:
--* Foreign [@text int] constant [@text GL_INTENSITY8].
VAL INT GL.INTENSITY8 IS #804B:
--* Foreign [@text int] constant [@text GL_INTENSITY12].
VAL INT GL.INTENSITY12 IS #804C:
--* Foreign [@text int] constant [@text GL_INTENSITY16].
VAL INT GL.INTENSITY16 IS #804D:
--* Foreign [@text int] constant [@text GL_R3_G3_B2].
VAL INT GL.R3.G3.B2 IS #2A10:
--* Foreign [@text int] constant [@text GL_RGB4].
VAL INT GL.RGB4 IS #804F:
--* Foreign [@text int] constant [@text GL_RGB5].
VAL INT GL.RGB5 IS #8050:
--* Foreign [@text int] constant [@text GL_RGB8].
VAL INT GL.RGB8 IS #8051:
--* Foreign [@text int] constant [@text GL_RGB10].
VAL INT GL.RGB10 IS #8052:
--* Foreign [@text int] constant [@text GL_RGB12].
VAL INT GL.RGB12 IS #8053:
--* Foreign [@text int] constant [@text GL_RGB16].
VAL INT GL.RGB16 IS #8054:
--* Foreign [@text int] constant [@text GL_RGBA2].
VAL INT GL.RGBA2 IS #8055:
--* Foreign [@text int] constant [@text GL_RGBA4].
VAL INT GL.RGBA4 IS #8056:
--* Foreign [@text int] constant [@text GL_RGB5_A1].
VAL INT GL.RGB5.A1 IS #8057:
--* Foreign [@text int] constant [@text GL_RGBA8].
VAL INT GL.RGBA8 IS #8058:
--* Foreign [@text int] constant [@text GL_RGB10_A2].
VAL INT GL.RGB10.A2 IS #8059:
--* Foreign [@text int] constant [@text GL_RGBA12].
VAL INT GL.RGBA12 IS #805A:
--* Foreign [@text int] constant [@text GL_RGBA16].
VAL INT GL.RGBA16 IS #805B:
--* Foreign [@text int] constant [@text GL_CLIENT_PIXEL_STORE_BIT].
VAL INT GL.CLIENT.PIXEL.STORE.BIT IS #00000001:
--* Foreign [@text int] constant [@text GL_CLIENT_VERTEX_ARRAY_BIT].
VAL INT GL.CLIENT.VERTEX.ARRAY.BIT IS #00000002:
--* Foreign [@text int] constant [@text GL_ALL_CLIENT_ATTRIB_BITS].
VAL INT GL.ALL.CLIENT.ATTRIB.BITS IS #FFFFFFFF:
--* Foreign [@text int] constant [@text GL_CLIENT_ALL_ATTRIB_BITS].
VAL INT GL.CLIENT.ALL.ATTRIB.BITS IS #FFFFFFFF:
--* Foreign [@text int] constant [@text GL_RESCALE_NORMAL].
VAL INT GL.RESCALE.NORMAL IS #803A:
--* Foreign [@text int] constant [@text GL_CLAMP_TO_EDGE].
VAL INT GL.CLAMP.TO.EDGE IS #812F:
--* Foreign [@text int] constant [@text GL_MAX_ELEMENTS_VERTICES].
VAL INT GL.MAX.ELEMENTS.VERTICES IS #80E8:
--* Foreign [@text int] constant [@text GL_MAX_ELEMENTS_INDICES].
VAL INT GL.MAX.ELEMENTS.INDICES IS #80E9:
--* Foreign [@text int] constant [@text GL_BGR].
VAL INT GL.BGR IS #80E0:
--* Foreign [@text int] constant [@text GL_BGRA].
VAL INT GL.BGRA IS #80E1:
--* Foreign [@text int] constant [@text GL_UNSIGNED_BYTE_3_3_2].
VAL INT GL.UNSIGNED.BYTE.3.3.2 IS #8032:
--* Foreign [@text int] constant [@text GL_UNSIGNED_BYTE_2_3_3_REV].
VAL INT GL.UNSIGNED.BYTE.2.3.3.REV IS #8362:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_5_6_5].
VAL INT GL.UNSIGNED.SHORT.5.6.5 IS #8363:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_5_6_5_REV].
VAL INT GL.UNSIGNED.SHORT.5.6.5.REV IS #8364:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_4_4_4_4].
VAL INT GL.UNSIGNED.SHORT.4.4.4.4 IS #8033:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_4_4_4_4_REV].
VAL INT GL.UNSIGNED.SHORT.4.4.4.4.REV IS #8365:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_5_5_5_1].
VAL INT GL.UNSIGNED.SHORT.5.5.5.1 IS #8034:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_1_5_5_5_REV].
VAL INT GL.UNSIGNED.SHORT.1.5.5.5.REV IS #8366:
--* Foreign [@text int] constant [@text GL_UNSIGNED_INT_8_8_8_8].
VAL INT GL.UNSIGNED.INT.8.8.8.8 IS #8035:
--* Foreign [@text int] constant [@text GL_UNSIGNED_INT_8_8_8_8_REV].
VAL INT GL.UNSIGNED.INT.8.8.8.8.REV IS #8367:
--* Foreign [@text int] constant [@text GL_UNSIGNED_INT_10_10_10_2].
VAL INT GL.UNSIGNED.INT.10.10.10.2 IS #8036:
--* Foreign [@text int] constant [@text GL_UNSIGNED_INT_2_10_10_10_REV].
VAL INT GL.UNSIGNED.INT.2.10.10.10.REV IS #8368:
--* Foreign [@text int] constant [@text GL_LIGHT_MODEL_COLOR_CONTROL].
VAL INT GL.LIGHT.MODEL.COLOR.CONTROL IS #81F8:
--* Foreign [@text int] constant [@text GL_SINGLE_COLOR].
VAL INT GL.SINGLE.COLOR IS #81F9:
--* Foreign [@text int] constant [@text GL_SEPARATE_SPECULAR_COLOR].
VAL INT GL.SEPARATE.SPECULAR.COLOR IS #81FA:
--* Foreign [@text int] constant [@text GL_TEXTURE_MIN_LOD].
VAL INT GL.TEXTURE.MIN.LOD IS #813A:
--* Foreign [@text int] constant [@text GL_TEXTURE_MAX_LOD].
VAL INT GL.TEXTURE.MAX.LOD IS #813B:
--* Foreign [@text int] constant [@text GL_TEXTURE_BASE_LEVEL].
VAL INT GL.TEXTURE.BASE.LEVEL IS #813C:
--* Foreign [@text int] constant [@text GL_TEXTURE_MAX_LEVEL].
VAL INT GL.TEXTURE.MAX.LEVEL IS #813D:
--* Foreign [@text int] constant [@text GL_SMOOTH_POINT_SIZE_RANGE].
VAL INT GL.SMOOTH.POINT.SIZE.RANGE IS #0B12:
--* Foreign [@text int] constant [@text GL_SMOOTH_POINT_SIZE_GRANULARITY].
VAL INT GL.SMOOTH.POINT.SIZE.GRANULARITY IS #0B13:
--* Foreign [@text int] constant [@text GL_SMOOTH_LINE_WIDTH_RANGE].
VAL INT GL.SMOOTH.LINE.WIDTH.RANGE IS #0B22:
--* Foreign [@text int] constant [@text GL_SMOOTH_LINE_WIDTH_GRANULARITY].
VAL INT GL.SMOOTH.LINE.WIDTH.GRANULARITY IS #0B23:
--* Foreign [@text int] constant [@text GL_ALIASED_POINT_SIZE_RANGE].
VAL INT GL.ALIASED.POINT.SIZE.RANGE IS #846D:
--* Foreign [@text int] constant [@text GL_ALIASED_LINE_WIDTH_RANGE].
VAL INT GL.ALIASED.LINE.WIDTH.RANGE IS #846E:
--* Foreign [@text int] constant [@text GL_PACK_SKIP_IMAGES].
VAL INT GL.PACK.SKIP.IMAGES IS #806B:
--* Foreign [@text int] constant [@text GL_PACK_IMAGE_HEIGHT].
VAL INT GL.PACK.IMAGE.HEIGHT IS #806C:
--* Foreign [@text int] constant [@text GL_UNPACK_SKIP_IMAGES].
VAL INT GL.UNPACK.SKIP.IMAGES IS #806D:
--* Foreign [@text int] constant [@text GL_UNPACK_IMAGE_HEIGHT].
VAL INT GL.UNPACK.IMAGE.HEIGHT IS #806E:
--* Foreign [@text int] constant [@text GL_TEXTURE_3D].
VAL INT GL.TEXTURE.3D IS #806F:
--* Foreign [@text int] constant [@text GL_PROXY_TEXTURE_3D].
VAL INT GL.PROXY.TEXTURE.3D IS #8070:
--* Foreign [@text int] constant [@text GL_TEXTURE_DEPTH].
VAL INT GL.TEXTURE.DEPTH IS #8071:
--* Foreign [@text int] constant [@text GL_TEXTURE_WRAP_R].
VAL INT GL.TEXTURE.WRAP.R IS #8072:
--* Foreign [@text int] constant [@text GL_MAX_3D_TEXTURE_SIZE].
VAL INT GL.MAX.3D.TEXTURE.SIZE IS #8073:
--* Foreign [@text int] constant [@text GL_TEXTURE_BINDING_3D].
VAL INT GL.TEXTURE.BINDING.3D IS #806A:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE].
VAL INT GL.COLOR.TABLE IS #80D0:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_COLOR_TABLE].
VAL INT GL.POST.CONVOLUTION.COLOR.TABLE IS #80D1:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_COLOR_TABLE].
VAL INT GL.POST.COLOR.MATRIX.COLOR.TABLE IS #80D2:
--* Foreign [@text int] constant [@text GL_PROXY_COLOR_TABLE].
VAL INT GL.PROXY.COLOR.TABLE IS #80D3:
--* Foreign [@text int] constant [@text GL_PROXY_POST_CONVOLUTION_COLOR_TABLE].
VAL INT GL.PROXY.POST.CONVOLUTION.COLOR.TABLE IS #80D4:
--* Foreign [@text int] constant [@text GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE].
VAL INT GL.PROXY.POST.COLOR.MATRIX.COLOR.TABLE IS #80D5:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_SCALE].
VAL INT GL.COLOR.TABLE.SCALE IS #80D6:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_BIAS].
VAL INT GL.COLOR.TABLE.BIAS IS #80D7:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_FORMAT].
VAL INT GL.COLOR.TABLE.FORMAT IS #80D8:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_WIDTH].
VAL INT GL.COLOR.TABLE.WIDTH IS #80D9:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_RED_SIZE].
VAL INT GL.COLOR.TABLE.RED.SIZE IS #80DA:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_GREEN_SIZE].
VAL INT GL.COLOR.TABLE.GREEN.SIZE IS #80DB:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_BLUE_SIZE].
VAL INT GL.COLOR.TABLE.BLUE.SIZE IS #80DC:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_ALPHA_SIZE].
VAL INT GL.COLOR.TABLE.ALPHA.SIZE IS #80DD:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_LUMINANCE_SIZE].
VAL INT GL.COLOR.TABLE.LUMINANCE.SIZE IS #80DE:
--* Foreign [@text int] constant [@text GL_COLOR_TABLE_INTENSITY_SIZE].
VAL INT GL.COLOR.TABLE.INTENSITY.SIZE IS #80DF:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_1D].
VAL INT GL.CONVOLUTION.1D IS #8010:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_2D].
VAL INT GL.CONVOLUTION.2D IS #8011:
--* Foreign [@text int] constant [@text GL_SEPARABLE_2D].
VAL INT GL.SEPARABLE.2D IS #8012:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_BORDER_MODE].
VAL INT GL.CONVOLUTION.BORDER.MODE IS #8013:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_FILTER_SCALE].
VAL INT GL.CONVOLUTION.FILTER.SCALE IS #8014:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_FILTER_BIAS].
VAL INT GL.CONVOLUTION.FILTER.BIAS IS #8015:
--* Foreign [@text int] constant [@text GL_REDUCE].
VAL INT GL.REDUCE IS #8016:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_FORMAT].
VAL INT GL.CONVOLUTION.FORMAT IS #8017:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_WIDTH].
VAL INT GL.CONVOLUTION.WIDTH IS #8018:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_HEIGHT].
VAL INT GL.CONVOLUTION.HEIGHT IS #8019:
--* Foreign [@text int] constant [@text GL_MAX_CONVOLUTION_WIDTH].
VAL INT GL.MAX.CONVOLUTION.WIDTH IS #801A:
--* Foreign [@text int] constant [@text GL_MAX_CONVOLUTION_HEIGHT].
VAL INT GL.MAX.CONVOLUTION.HEIGHT IS #801B:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_RED_SCALE].
VAL INT GL.POST.CONVOLUTION.RED.SCALE IS #801C:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_GREEN_SCALE].
VAL INT GL.POST.CONVOLUTION.GREEN.SCALE IS #801D:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_BLUE_SCALE].
VAL INT GL.POST.CONVOLUTION.BLUE.SCALE IS #801E:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_ALPHA_SCALE].
VAL INT GL.POST.CONVOLUTION.ALPHA.SCALE IS #801F:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_RED_BIAS].
VAL INT GL.POST.CONVOLUTION.RED.BIAS IS #8020:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_GREEN_BIAS].
VAL INT GL.POST.CONVOLUTION.GREEN.BIAS IS #8021:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_BLUE_BIAS].
VAL INT GL.POST.CONVOLUTION.BLUE.BIAS IS #8022:
--* Foreign [@text int] constant [@text GL_POST_CONVOLUTION_ALPHA_BIAS].
VAL INT GL.POST.CONVOLUTION.ALPHA.BIAS IS #8023:
--* Foreign [@text int] constant [@text GL_CONSTANT_BORDER].
VAL INT GL.CONSTANT.BORDER IS #8151:
--* Foreign [@text int] constant [@text GL_REPLICATE_BORDER].
VAL INT GL.REPLICATE.BORDER IS #8153:
--* Foreign [@text int] constant [@text GL_CONVOLUTION_BORDER_COLOR].
VAL INT GL.CONVOLUTION.BORDER.COLOR IS #8154:
--* Foreign [@text int] constant [@text GL_COLOR_MATRIX].
VAL INT GL.COLOR.MATRIX IS #80B1:
--* Foreign [@text int] constant [@text GL_COLOR_MATRIX_STACK_DEPTH].
VAL INT GL.COLOR.MATRIX.STACK.DEPTH IS #80B2:
--* Foreign [@text int] constant [@text GL_MAX_COLOR_MATRIX_STACK_DEPTH].
VAL INT GL.MAX.COLOR.MATRIX.STACK.DEPTH IS #80B3:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_RED_SCALE].
VAL INT GL.POST.COLOR.MATRIX.RED.SCALE IS #80B4:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_GREEN_SCALE].
VAL INT GL.POST.COLOR.MATRIX.GREEN.SCALE IS #80B5:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_BLUE_SCALE].
VAL INT GL.POST.COLOR.MATRIX.BLUE.SCALE IS #80B6:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_ALPHA_SCALE].
VAL INT GL.POST.COLOR.MATRIX.ALPHA.SCALE IS #80B7:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_RED_BIAS].
VAL INT GL.POST.COLOR.MATRIX.RED.BIAS IS #80B8:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_GREEN_BIAS].
VAL INT GL.POST.COLOR.MATRIX.GREEN.BIAS IS #80B9:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_BLUE_BIAS].
VAL INT GL.POST.COLOR.MATRIX.BLUE.BIAS IS #80BA:
--* Foreign [@text int] constant [@text GL_POST_COLOR_MATRIX_ALPHA_BIAS].
VAL INT GL.POST.COLOR.MATRIX.ALPHA.BIAS IS #80BB:
--* Foreign [@text int] constant [@text GL_HISTOGRAM].
VAL INT GL.HISTOGRAM IS #8024:
--* Foreign [@text int] constant [@text GL_PROXY_HISTOGRAM].
VAL INT GL.PROXY.HISTOGRAM IS #8025:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_WIDTH].
VAL INT GL.HISTOGRAM.WIDTH IS #8026:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_FORMAT].
VAL INT GL.HISTOGRAM.FORMAT IS #8027:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_RED_SIZE].
VAL INT GL.HISTOGRAM.RED.SIZE IS #8028:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_GREEN_SIZE].
VAL INT GL.HISTOGRAM.GREEN.SIZE IS #8029:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_BLUE_SIZE].
VAL INT GL.HISTOGRAM.BLUE.SIZE IS #802A:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_ALPHA_SIZE].
VAL INT GL.HISTOGRAM.ALPHA.SIZE IS #802B:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_LUMINANCE_SIZE].
VAL INT GL.HISTOGRAM.LUMINANCE.SIZE IS #802C:
--* Foreign [@text int] constant [@text GL_HISTOGRAM_SINK].
VAL INT GL.HISTOGRAM.SINK IS #802D:
--* Foreign [@text int] constant [@text GL_MINMAX].
VAL INT GL.MINMAX IS #802E:
--* Foreign [@text int] constant [@text GL_MINMAX_FORMAT].
VAL INT GL.MINMAX.FORMAT IS #802F:
--* Foreign [@text int] constant [@text GL_MINMAX_SINK].
VAL INT GL.MINMAX.SINK IS #8030:
--* Foreign [@text int] constant [@text GL_TABLE_TOO_LARGE].
VAL INT GL.TABLE.TOO.LARGE IS #8031:
--* Foreign [@text int] constant [@text GL_BLEND_EQUATION].
VAL INT GL.BLEND.EQUATION IS #8009:
--* Foreign [@text int] constant [@text GL_MIN].
VAL INT GL.MIN IS #8007:
--* Foreign [@text int] constant [@text GL_MAX].
VAL INT GL.MAX IS #8008:
--* Foreign [@text int] constant [@text GL_FUNC_ADD].
VAL INT GL.FUNC.ADD IS #8006:
--* Foreign [@text int] constant [@text GL_FUNC_SUBTRACT].
VAL INT GL.FUNC.SUBTRACT IS #800A:
--* Foreign [@text int] constant [@text GL_FUNC_REVERSE_SUBTRACT].
VAL INT GL.FUNC.REVERSE.SUBTRACT IS #800B:
--* Foreign [@text int] constant [@text GL_BLEND_COLOR].
VAL INT GL.BLEND.COLOR IS #8005:
--* Foreign [@text int] constant [@text GL_TEXTURE0].
VAL INT GL.TEXTURE0 IS #84C0:
--* Foreign [@text int] constant [@text GL_TEXTURE1].
VAL INT GL.TEXTURE1 IS #84C1:
--* Foreign [@text int] constant [@text GL_TEXTURE2].
VAL INT GL.TEXTURE2 IS #84C2:
--* Foreign [@text int] constant [@text GL_TEXTURE3].
VAL INT GL.TEXTURE3 IS #84C3:
--* Foreign [@text int] constant [@text GL_TEXTURE4].
VAL INT GL.TEXTURE4 IS #84C4:
--* Foreign [@text int] constant [@text GL_TEXTURE5].
VAL INT GL.TEXTURE5 IS #84C5:
--* Foreign [@text int] constant [@text GL_TEXTURE6].
VAL INT GL.TEXTURE6 IS #84C6:
--* Foreign [@text int] constant [@text GL_TEXTURE7].
VAL INT GL.TEXTURE7 IS #84C7:
--* Foreign [@text int] constant [@text GL_TEXTURE8].
VAL INT GL.TEXTURE8 IS #84C8:
--* Foreign [@text int] constant [@text GL_TEXTURE9].
VAL INT GL.TEXTURE9 IS #84C9:
--* Foreign [@text int] constant [@text GL_TEXTURE10].
VAL INT GL.TEXTURE10 IS #84CA:
--* Foreign [@text int] constant [@text GL_TEXTURE11].
VAL INT GL.TEXTURE11 IS #84CB:
--* Foreign [@text int] constant [@text GL_TEXTURE12].
VAL INT GL.TEXTURE12 IS #84CC:
--* Foreign [@text int] constant [@text GL_TEXTURE13].
VAL INT GL.TEXTURE13 IS #84CD:
--* Foreign [@text int] constant [@text GL_TEXTURE14].
VAL INT GL.TEXTURE14 IS #84CE:
--* Foreign [@text int] constant [@text GL_TEXTURE15].
VAL INT GL.TEXTURE15 IS #84CF:
--* Foreign [@text int] constant [@text GL_TEXTURE16].
VAL INT GL.TEXTURE16 IS #84D0:
--* Foreign [@text int] constant [@text GL_TEXTURE17].
VAL INT GL.TEXTURE17 IS #84D1:
--* Foreign [@text int] constant [@text GL_TEXTURE18].
VAL INT GL.TEXTURE18 IS #84D2:
--* Foreign [@text int] constant [@text GL_TEXTURE19].
VAL INT GL.TEXTURE19 IS #84D3:
--* Foreign [@text int] constant [@text GL_TEXTURE20].
VAL INT GL.TEXTURE20 IS #84D4:
--* Foreign [@text int] constant [@text GL_TEXTURE21].
VAL INT GL.TEXTURE21 IS #84D5:
--* Foreign [@text int] constant [@text GL_TEXTURE22].
VAL INT GL.TEXTURE22 IS #84D6:
--* Foreign [@text int] constant [@text GL_TEXTURE23].
VAL INT GL.TEXTURE23 IS #84D7:
--* Foreign [@text int] constant [@text GL_TEXTURE24].
VAL INT GL.TEXTURE24 IS #84D8:
--* Foreign [@text int] constant [@text GL_TEXTURE25].
VAL INT GL.TEXTURE25 IS #84D9:
--* Foreign [@text int] constant [@text GL_TEXTURE26].
VAL INT GL.TEXTURE26 IS #84DA:
--* Foreign [@text int] constant [@text GL_TEXTURE27].
VAL INT GL.TEXTURE27 IS #84DB:
--* Foreign [@text int] constant [@text GL_TEXTURE28].
VAL INT GL.TEXTURE28 IS #84DC:
--* Foreign [@text int] constant [@text GL_TEXTURE29].
VAL INT GL.TEXTURE29 IS #84DD:
--* Foreign [@text int] constant [@text GL_TEXTURE30].
VAL INT GL.TEXTURE30 IS #84DE:
--* Foreign [@text int] constant [@text GL_TEXTURE31].
VAL INT GL.TEXTURE31 IS #84DF:
--* Foreign [@text int] constant [@text GL_ACTIVE_TEXTURE].
VAL INT GL.ACTIVE.TEXTURE IS #84E0:
--* Foreign [@text int] constant [@text GL_CLIENT_ACTIVE_TEXTURE].
VAL INT GL.CLIENT.ACTIVE.TEXTURE IS #84E1:
--* Foreign [@text int] constant [@text GL_MAX_TEXTURE_UNITS].
VAL INT GL.MAX.TEXTURE.UNITS IS #84E2:
--* Foreign [@text int] constant [@text GL_NORMAL_MAP].
VAL INT GL.NORMAL.MAP IS #8511:
--* Foreign [@text int] constant [@text GL_REFLECTION_MAP].
VAL INT GL.REFLECTION.MAP IS #8512:
--* Foreign [@text int] constant [@text GL_TEXTURE_CUBE_MAP].
VAL INT GL.TEXTURE.CUBE.MAP IS #8513:
--* Foreign [@text int] constant [@text GL_TEXTURE_BINDING_CUBE_MAP].
VAL INT GL.TEXTURE.BINDING.CUBE.MAP IS #8514:
--* Foreign [@text int] constant [@text GL_TEXTURE_CUBE_MAP_POSITIVE_X].
VAL INT GL.TEXTURE.CUBE.MAP.POSITIVE.X IS #8515:
--* Foreign [@text int] constant [@text GL_TEXTURE_CUBE_MAP_NEGATIVE_X].
VAL INT GL.TEXTURE.CUBE.MAP.NEGATIVE.X IS #8516:
--* Foreign [@text int] constant [@text GL_TEXTURE_CUBE_MAP_POSITIVE_Y].
VAL INT GL.TEXTURE.CUBE.MAP.POSITIVE.Y IS #8517:
--* Foreign [@text int] constant [@text GL_TEXTURE_CUBE_MAP_NEGATIVE_Y].
VAL INT GL.TEXTURE.CUBE.MAP.NEGATIVE.Y IS #8518:
--* Foreign [@text int] constant [@text GL_TEXTURE_CUBE_MAP_POSITIVE_Z].
VAL INT GL.TEXTURE.CUBE.MAP.POSITIVE.Z IS #8519:
--* Foreign [@text int] constant [@text GL_TEXTURE_CUBE_MAP_NEGATIVE_Z].
VAL INT GL.TEXTURE.CUBE.MAP.NEGATIVE.Z IS #851A:
--* Foreign [@text int] constant [@text GL_PROXY_TEXTURE_CUBE_MAP].
VAL INT GL.PROXY.TEXTURE.CUBE.MAP IS #851B:
--* Foreign [@text int] constant [@text GL_MAX_CUBE_MAP_TEXTURE_SIZE].
VAL INT GL.MAX.CUBE.MAP.TEXTURE.SIZE IS #851C:
--* Foreign [@text int] constant [@text GL_COMPRESSED_ALPHA].
VAL INT GL.COMPRESSED.ALPHA IS #84E9:
--* Foreign [@text int] constant [@text GL_COMPRESSED_LUMINANCE].
VAL INT GL.COMPRESSED.LUMINANCE IS #84EA:
--* Foreign [@text int] constant [@text GL_COMPRESSED_LUMINANCE_ALPHA].
VAL INT GL.COMPRESSED.LUMINANCE.ALPHA IS #84EB:
--* Foreign [@text int] constant [@text GL_COMPRESSED_INTENSITY].
VAL INT GL.COMPRESSED.INTENSITY IS #84EC:
--* Foreign [@text int] constant [@text GL_COMPRESSED_RGB].
VAL INT GL.COMPRESSED.RGB IS #84ED:
--* Foreign [@text int] constant [@text GL_COMPRESSED_RGBA].
VAL INT GL.COMPRESSED.RGBA IS #84EE:
--* Foreign [@text int] constant [@text GL_TEXTURE_COMPRESSION_HINT].
VAL INT GL.TEXTURE.COMPRESSION.HINT IS #84EF:
--* Foreign [@text int] constant [@text GL_TEXTURE_COMPRESSED_IMAGE_SIZE].
VAL INT GL.TEXTURE.COMPRESSED.IMAGE.SIZE IS #86A0:
--* Foreign [@text int] constant [@text GL_TEXTURE_COMPRESSED].
VAL INT GL.TEXTURE.COMPRESSED IS #86A1:
--* Foreign [@text int] constant [@text GL_NUM_COMPRESSED_TEXTURE_FORMATS].
VAL INT GL.NUM.COMPRESSED.TEXTURE.FORMATS IS #86A2:
--* Foreign [@text int] constant [@text GL_COMPRESSED_TEXTURE_FORMATS].
VAL INT GL.COMPRESSED.TEXTURE.FORMATS IS #86A3:
--* Foreign [@text int] constant [@text GL_MULTISAMPLE].
VAL INT GL.MULTISAMPLE IS #809D:
--* Foreign [@text int] constant [@text GL_SAMPLE_ALPHA_TO_COVERAGE].
VAL INT GL.SAMPLE.ALPHA.TO.COVERAGE IS #809E:
--* Foreign [@text int] constant [@text GL_SAMPLE_ALPHA_TO_ONE].
VAL INT GL.SAMPLE.ALPHA.TO.ONE IS #809F:
--* Foreign [@text int] constant [@text GL_SAMPLE_COVERAGE].
VAL INT GL.SAMPLE.COVERAGE IS #80A0:
--* Foreign [@text int] constant [@text GL_SAMPLE_BUFFERS].
VAL INT GL.SAMPLE.BUFFERS IS #80A8:
--* Foreign [@text int] constant [@text GL_SAMPLES].
VAL INT GL.SAMPLES IS #80A9:
--* Foreign [@text int] constant [@text GL_SAMPLE_COVERAGE_VALUE].
VAL INT GL.SAMPLE.COVERAGE.VALUE IS #80AA:
--* Foreign [@text int] constant [@text GL_SAMPLE_COVERAGE_INVERT].
VAL INT GL.SAMPLE.COVERAGE.INVERT IS #80AB:
--* Foreign [@text int] constant [@text GL_MULTISAMPLE_BIT].
VAL INT GL.MULTISAMPLE.BIT IS #20000000:
--* Foreign [@text int] constant [@text GL_TRANSPOSE_MODELVIEW_MATRIX].
VAL INT GL.TRANSPOSE.MODELVIEW.MATRIX IS #84E3:
--* Foreign [@text int] constant [@text GL_TRANSPOSE_PROJECTION_MATRIX].
VAL INT GL.TRANSPOSE.PROJECTION.MATRIX IS #84E4:
--* Foreign [@text int] constant [@text GL_TRANSPOSE_TEXTURE_MATRIX].
VAL INT GL.TRANSPOSE.TEXTURE.MATRIX IS #84E5:
--* Foreign [@text int] constant [@text GL_TRANSPOSE_COLOR_MATRIX].
VAL INT GL.TRANSPOSE.COLOR.MATRIX IS #84E6:
--* Foreign [@text int] constant [@text GL_COMBINE].
VAL INT GL.COMBINE IS #8570:
--* Foreign [@text int] constant [@text GL_COMBINE_RGB].
VAL INT GL.COMBINE.RGB IS #8571:
--* Foreign [@text int] constant [@text GL_COMBINE_ALPHA].
VAL INT GL.COMBINE.ALPHA IS #8572:
--* Foreign [@text int] constant [@text GL_SOURCE0_RGB].
VAL INT GL.SOURCE0.RGB IS #8580:
--* Foreign [@text int] constant [@text GL_SOURCE1_RGB].
VAL INT GL.SOURCE1.RGB IS #8581:
--* Foreign [@text int] constant [@text GL_SOURCE2_RGB].
VAL INT GL.SOURCE2.RGB IS #8582:
--* Foreign [@text int] constant [@text GL_SOURCE0_ALPHA].
VAL INT GL.SOURCE0.ALPHA IS #8588:
--* Foreign [@text int] constant [@text GL_SOURCE1_ALPHA].
VAL INT GL.SOURCE1.ALPHA IS #8589:
--* Foreign [@text int] constant [@text GL_SOURCE2_ALPHA].
VAL INT GL.SOURCE2.ALPHA IS #858A:
--* Foreign [@text int] constant [@text GL_OPERAND0_RGB].
VAL INT GL.OPERAND0.RGB IS #8590:
--* Foreign [@text int] constant [@text GL_OPERAND1_RGB].
VAL INT GL.OPERAND1.RGB IS #8591:
--* Foreign [@text int] constant [@text GL_OPERAND2_RGB].
VAL INT GL.OPERAND2.RGB IS #8592:
--* Foreign [@text int] constant [@text GL_OPERAND0_ALPHA].
VAL INT GL.OPERAND0.ALPHA IS #8598:
--* Foreign [@text int] constant [@text GL_OPERAND1_ALPHA].
VAL INT GL.OPERAND1.ALPHA IS #8599:
--* Foreign [@text int] constant [@text GL_OPERAND2_ALPHA].
VAL INT GL.OPERAND2.ALPHA IS #859A:
--* Foreign [@text int] constant [@text GL_RGB_SCALE].
VAL INT GL.RGB.SCALE IS #8573:
--* Foreign [@text int] constant [@text GL_ADD_SIGNED].
VAL INT GL.ADD.SIGNED IS #8574:
--* Foreign [@text int] constant [@text GL_INTERPOLATE].
VAL INT GL.INTERPOLATE IS #8575:
--* Foreign [@text int] constant [@text GL_SUBTRACT].
VAL INT GL.SUBTRACT IS #84E7:
--* Foreign [@text int] constant [@text GL_CONSTANT].
VAL INT GL.CONSTANT IS #8576:
--* Foreign [@text int] constant [@text GL_PRIMARY_COLOR].
VAL INT GL.PRIMARY.COLOR IS #8577:
--* Foreign [@text int] constant [@text GL_PREVIOUS].
VAL INT GL.PREVIOUS IS #8578:
--* Foreign [@text int] constant [@text GL_DOT3_RGB].
VAL INT GL.DOT3.RGB IS #86AE:
--* Foreign [@text int] constant [@text GL_DOT3_RGBA].
VAL INT GL.DOT3.RGBA IS #86AF:
--* Foreign [@text int] constant [@text GL_CLAMP_TO_BORDER].
VAL INT GL.CLAMP.TO.BORDER IS #812D:
#PRAGMA EXTERNAL "PROC C.glClearIndex (VAL REAL32 c) = 0"

--* Foreign function [@text glClearIndex].
-- @param c Argument with type [@text GLfloat].
INLINE PROC glClearIndex (VAL REAL32 c)
  C.glClearIndex (c)
:

#PRAGMA EXTERNAL "PROC C.glClearColor (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha) = 0"

--* Foreign function [@text glClearColor].
-- @param red Argument with type [@text GLclampf].
-- @param green Argument with type [@text GLclampf].
-- @param blue Argument with type [@text GLclampf].
-- @param alpha Argument with type [@text GLclampf].
INLINE PROC glClearColor (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha)
  C.glClearColor (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glClear (VAL INT mask) = 0"

--* Foreign function [@text glClear].
-- @param mask Argument with type [@text GLbitfield].
INLINE PROC glClear (VAL INT mask)
  C.glClear (mask)
:

#PRAGMA EXTERNAL "PROC C.glIndexMask (VAL INT mask) = 0"

--* Foreign function [@text glIndexMask].
-- @param mask Argument with type [@text GLuint].
INLINE PROC glIndexMask (VAL INT mask)
  C.glIndexMask (mask)
:

#PRAGMA EXTERNAL "PROC C.glColorMask (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha) = 0"

--* Foreign function [@text glColorMask].
-- @param red Argument with type [@text GLboolean].
-- @param green Argument with type [@text GLboolean].
-- @param blue Argument with type [@text GLboolean].
-- @param alpha Argument with type [@text GLboolean].
INLINE PROC glColorMask (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha)
  C.glColorMask (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glAlphaFunc (VAL INT func, VAL REAL32 ref) = 0"

--* Foreign function [@text glAlphaFunc].
-- @param func Argument with type [@text GLenum].
-- @param ref Argument with type [@text GLclampf].
INLINE PROC glAlphaFunc (VAL INT func, VAL REAL32 ref)
  C.glAlphaFunc (func, ref)
:

#PRAGMA EXTERNAL "PROC C.glBlendFunc (VAL INT sfactor, VAL INT dfactor) = 0"

--* Foreign function [@text glBlendFunc].
-- @param sfactor Argument with type [@text GLenum].
-- @param dfactor Argument with type [@text GLenum].
INLINE PROC glBlendFunc (VAL INT sfactor, VAL INT dfactor)
  C.glBlendFunc (sfactor, dfactor)
:

#PRAGMA EXTERNAL "PROC C.glLogicOp (VAL INT opcode) = 0"

--* Foreign function [@text glLogicOp].
-- @param opcode Argument with type [@text GLenum].
INLINE PROC glLogicOp (VAL INT opcode)
  C.glLogicOp (opcode)
:

#PRAGMA EXTERNAL "PROC C.glCullFace (VAL INT mode) = 0"

--* Foreign function [@text glCullFace].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glCullFace (VAL INT mode)
  C.glCullFace (mode)
:

#PRAGMA EXTERNAL "PROC C.glFrontFace (VAL INT mode) = 0"

--* Foreign function [@text glFrontFace].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glFrontFace (VAL INT mode)
  C.glFrontFace (mode)
:

#PRAGMA EXTERNAL "PROC C.glPointSize (VAL REAL32 size) = 0"

--* Foreign function [@text glPointSize].
-- @param size Argument with type [@text GLfloat].
INLINE PROC glPointSize (VAL REAL32 size)
  C.glPointSize (size)
:

#PRAGMA EXTERNAL "PROC C.glLineWidth (VAL REAL32 width) = 0"

--* Foreign function [@text glLineWidth].
-- @param width Argument with type [@text GLfloat].
INLINE PROC glLineWidth (VAL REAL32 width)
  C.glLineWidth (width)
:

#PRAGMA EXTERNAL "PROC C.glLineStipple (VAL INT factor, VAL INT16 pattern) = 0"

--* Foreign function [@text glLineStipple].
-- @param factor Argument with type [@text GLint].
-- @param pattern Argument with type [@text GLushort].
INLINE PROC glLineStipple (VAL INT factor, VAL INT16 pattern)
  C.glLineStipple (factor, pattern)
:

#PRAGMA EXTERNAL "PROC C.glPolygonMode (VAL INT face, VAL INT mode) = 0"

--* Foreign function [@text glPolygonMode].
-- @param face Argument with type [@text GLenum].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glPolygonMode (VAL INT face, VAL INT mode)
  C.glPolygonMode (face, mode)
:

#PRAGMA EXTERNAL "PROC C.glPolygonOffset (VAL REAL32 factor, VAL REAL32 units) = 0"

--* Foreign function [@text glPolygonOffset].
-- @param factor Argument with type [@text GLfloat].
-- @param units Argument with type [@text GLfloat].
INLINE PROC glPolygonOffset (VAL REAL32 factor, VAL REAL32 units)
  C.glPolygonOffset (factor, units)
:

#PRAGMA EXTERNAL "PROC C.glPolygonStipple (BYTE mask) = 0"

--* Foreign function [@text glPolygonStipple].
-- @param mask Argument with type [@text GLubyte const *].
INLINE PROC glPolygonStipple (BYTE mask)
  C.glPolygonStipple (mask)
:

#PRAGMA EXTERNAL "PROC C.glGetPolygonStipple (BYTE mask) = 0"

--* Foreign function [@text glGetPolygonStipple].
-- @param mask Argument with type [@text GLubyte *].
INLINE PROC glGetPolygonStipple (BYTE mask)
  C.glGetPolygonStipple (mask)
:

#PRAGMA EXTERNAL "PROC C.glEdgeFlag (VAL BYTE flag) = 0"

--* Foreign function [@text glEdgeFlag].
-- @param flag Argument with type [@text GLboolean].
INLINE PROC glEdgeFlag (VAL BYTE flag)
  C.glEdgeFlag (flag)
:

#PRAGMA EXTERNAL "PROC C.glEdgeFlagv (BYTE flag) = 0"

--* Foreign function [@text glEdgeFlagv].
-- @param flag Argument with type [@text GLboolean const *].
INLINE PROC glEdgeFlagv (BYTE flag)
  C.glEdgeFlagv (flag)
:

#PRAGMA EXTERNAL "PROC C.glScissor (VAL INT x, VAL INT y, VAL INT width, VAL INT height) = 0"

--* Foreign function [@text glScissor].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
INLINE PROC glScissor (VAL INT x, VAL INT y, VAL INT width, VAL INT height)
  C.glScissor (x, y, width, height)
:

#PRAGMA EXTERNAL "PROC C.glClipPlane (VAL INT plane, REAL64 equation) = 0"

--* Foreign function [@text glClipPlane].
-- @param plane Argument with type [@text GLenum].
-- @param equation Argument with type [@text GLdouble const *].
INLINE PROC glClipPlane (VAL INT plane, REAL64 equation)
  C.glClipPlane (plane, equation)
:

#PRAGMA EXTERNAL "PROC C.glGetClipPlane (VAL INT plane, REAL64 equation) = 0"

--* Foreign function [@text glGetClipPlane].
-- @param plane Argument with type [@text GLenum].
-- @param equation Argument with type [@text GLdouble *].
INLINE PROC glGetClipPlane (VAL INT plane, REAL64 equation)
  C.glGetClipPlane (plane, equation)
:

#PRAGMA EXTERNAL "PROC C.glDrawBuffer (VAL INT mode) = 0"

--* Foreign function [@text glDrawBuffer].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glDrawBuffer (VAL INT mode)
  C.glDrawBuffer (mode)
:

#PRAGMA EXTERNAL "PROC C.glReadBuffer (VAL INT mode) = 0"

--* Foreign function [@text glReadBuffer].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glReadBuffer (VAL INT mode)
  C.glReadBuffer (mode)
:

#PRAGMA EXTERNAL "PROC C.glEnable (VAL INT cap) = 0"

--* Foreign function [@text glEnable].
-- @param cap Argument with type [@text GLenum].
INLINE PROC glEnable (VAL INT cap)
  C.glEnable (cap)
:

#PRAGMA EXTERNAL "PROC C.glDisable (VAL INT cap) = 0"

--* Foreign function [@text glDisable].
-- @param cap Argument with type [@text GLenum].
INLINE PROC glDisable (VAL INT cap)
  C.glDisable (cap)
:

#PRAGMA EXTERNAL "PROC C.glIsEnabled (RESULT BYTE return.value, VAL INT cap) = 0"

--* Foreign function [@text glIsEnabled].
-- @param return.value Function return value with type [@text GLboolean].
-- @param cap Argument with type [@text GLenum].
INLINE PROC glIsEnabled (RESULT BYTE return.value, VAL INT cap)
  C.glIsEnabled (return.value, cap)
:

#PRAGMA EXTERNAL "PROC C.glEnableClientState (VAL INT cap) = 0"

--* Foreign function [@text glEnableClientState].
-- @param cap Argument with type [@text GLenum].
INLINE PROC glEnableClientState (VAL INT cap)
  C.glEnableClientState (cap)
:

#PRAGMA EXTERNAL "PROC C.glDisableClientState (VAL INT cap) = 0"

--* Foreign function [@text glDisableClientState].
-- @param cap Argument with type [@text GLenum].
INLINE PROC glDisableClientState (VAL INT cap)
  C.glDisableClientState (cap)
:

#PRAGMA EXTERNAL "PROC C.glGetBooleanv (VAL INT pname, BYTE params) = 0"

--* Foreign function [@text glGetBooleanv].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLboolean *].
INLINE PROC glGetBooleanv (VAL INT pname, BYTE params)
  C.glGetBooleanv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetDoublev (VAL INT pname, REAL64 params) = 0"

--* Foreign function [@text glGetDoublev].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLdouble *].
INLINE PROC glGetDoublev (VAL INT pname, REAL64 params)
  C.glGetDoublev (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetFloatv (VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glGetFloatv].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat *].
INLINE PROC glGetFloatv (VAL INT pname, REAL32 params)
  C.glGetFloatv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetIntegerv (VAL INT pname, INT params) = 0"

--* Foreign function [@text glGetIntegerv].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint *].
INLINE PROC glGetIntegerv (VAL INT pname, INT params)
  C.glGetIntegerv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glPushAttrib (VAL INT mask) = 0"

--* Foreign function [@text glPushAttrib].
-- @param mask Argument with type [@text GLbitfield].
INLINE PROC glPushAttrib (VAL INT mask)
  C.glPushAttrib (mask)
:

#PRAGMA EXTERNAL "PROC C.glPopAttrib () = 0"

--* Foreign function [@text glPopAttrib].
INLINE PROC glPopAttrib ()
  C.glPopAttrib ()
:

#PRAGMA EXTERNAL "PROC C.glPushClientAttrib (VAL INT mask) = 0"

--* Foreign function [@text glPushClientAttrib].
-- @param mask Argument with type [@text GLbitfield].
INLINE PROC glPushClientAttrib (VAL INT mask)
  C.glPushClientAttrib (mask)
:

#PRAGMA EXTERNAL "PROC C.glPopClientAttrib () = 0"

--* Foreign function [@text glPopClientAttrib].
INLINE PROC glPopClientAttrib ()
  C.glPopClientAttrib ()
:

#PRAGMA EXTERNAL "PROC C.glRenderMode (RESULT INT return.value, VAL INT mode) = 0"

--* Foreign function [@text glRenderMode].
-- @param return.value Function return value with type [@text GLint].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glRenderMode (RESULT INT return.value, VAL INT mode)
  C.glRenderMode (return.value, mode)
:

#PRAGMA EXTERNAL "PROC C.glGetError (RESULT INT return.value) = 0"

--* Foreign function [@text glGetError].
-- @param return.value Function return value with type [@text GLenum].
INLINE PROC glGetError (RESULT INT return.value)
  C.glGetError (return.value)
:

#PRAGMA EXTERNAL "PROC C.glGetString (RESULT BYTE return.value, VAL INT name) = 0"

--* Foreign function [@text glGetString].
-- @param return.value Function return value with type [@text GLubyte const *].
-- @param name Argument with type [@text GLenum].
INLINE PROC glGetString (RESULT BYTE return.value, VAL INT name)
  C.glGetString (return.value, name)
:

#PRAGMA EXTERNAL "PROC C.glFinish () = 0"

--* Foreign function [@text glFinish].
INLINE PROC glFinish ()
  C.glFinish ()
:

#PRAGMA EXTERNAL "PROC C.glFlush () = 0"

--* Foreign function [@text glFlush].
INLINE PROC glFlush ()
  C.glFlush ()
:

#PRAGMA EXTERNAL "PROC C.glHint (VAL INT target, VAL INT mode) = 0"

--* Foreign function [@text glHint].
-- @param target Argument with type [@text GLenum].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glHint (VAL INT target, VAL INT mode)
  C.glHint (target, mode)
:

#PRAGMA EXTERNAL "PROC C.glClearDepth (VAL REAL64 depth) = 0"

--* Foreign function [@text glClearDepth].
-- @param depth Argument with type [@text GLclampd].
INLINE PROC glClearDepth (VAL REAL64 depth)
  C.glClearDepth (depth)
:

#PRAGMA EXTERNAL "PROC C.glDepthFunc (VAL INT func) = 0"

--* Foreign function [@text glDepthFunc].
-- @param func Argument with type [@text GLenum].
INLINE PROC glDepthFunc (VAL INT func)
  C.glDepthFunc (func)
:

#PRAGMA EXTERNAL "PROC C.glDepthMask (VAL BYTE flag) = 0"

--* Foreign function [@text glDepthMask].
-- @param flag Argument with type [@text GLboolean].
INLINE PROC glDepthMask (VAL BYTE flag)
  C.glDepthMask (flag)
:

#PRAGMA EXTERNAL "PROC C.glDepthRange (VAL REAL64 near.val, VAL REAL64 far.val) = 0"

--* Foreign function [@text glDepthRange].
-- @param near.val Argument with type [@text GLclampd].
-- @param far.val Argument with type [@text GLclampd].
INLINE PROC glDepthRange (VAL REAL64 near.val, VAL REAL64 far.val)
  C.glDepthRange (near.val, far.val)
:

#PRAGMA EXTERNAL "PROC C.glClearAccum (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha) = 0"

--* Foreign function [@text glClearAccum].
-- @param red Argument with type [@text GLfloat].
-- @param green Argument with type [@text GLfloat].
-- @param blue Argument with type [@text GLfloat].
-- @param alpha Argument with type [@text GLfloat].
INLINE PROC glClearAccum (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha)
  C.glClearAccum (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glAccum (VAL INT op, VAL REAL32 value) = 0"

--* Foreign function [@text glAccum].
-- @param op Argument with type [@text GLenum].
-- @param value Argument with type [@text GLfloat].
INLINE PROC glAccum (VAL INT op, VAL REAL32 value)
  C.glAccum (op, value)
:

#PRAGMA EXTERNAL "PROC C.glMatrixMode (VAL INT mode) = 0"

--* Foreign function [@text glMatrixMode].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glMatrixMode (VAL INT mode)
  C.glMatrixMode (mode)
:

#PRAGMA EXTERNAL "PROC C.glOrtho (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val) = 0"

--* Foreign function [@text glOrtho].
-- @param left Argument with type [@text GLdouble].
-- @param right Argument with type [@text GLdouble].
-- @param bottom Argument with type [@text GLdouble].
-- @param top Argument with type [@text GLdouble].
-- @param near.val Argument with type [@text GLdouble].
-- @param far.val Argument with type [@text GLdouble].
INLINE PROC glOrtho (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val)
  C.glOrtho (left, right, bottom, top, near.val, far.val)
:

#PRAGMA EXTERNAL "PROC C.glFrustum (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val) = 0"

--* Foreign function [@text glFrustum].
-- @param left Argument with type [@text GLdouble].
-- @param right Argument with type [@text GLdouble].
-- @param bottom Argument with type [@text GLdouble].
-- @param top Argument with type [@text GLdouble].
-- @param near.val Argument with type [@text GLdouble].
-- @param far.val Argument with type [@text GLdouble].
INLINE PROC glFrustum (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top, VAL REAL64 near.val, VAL REAL64 far.val)
  C.glFrustum (left, right, bottom, top, near.val, far.val)
:

#PRAGMA EXTERNAL "PROC C.glViewport (VAL INT x, VAL INT y, VAL INT width, VAL INT height) = 0"

--* Foreign function [@text glViewport].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
INLINE PROC glViewport (VAL INT x, VAL INT y, VAL INT width, VAL INT height)
  C.glViewport (x, y, width, height)
:

#PRAGMA EXTERNAL "PROC C.glPushMatrix () = 0"

--* Foreign function [@text glPushMatrix].
INLINE PROC glPushMatrix ()
  C.glPushMatrix ()
:

#PRAGMA EXTERNAL "PROC C.glPopMatrix () = 0"

--* Foreign function [@text glPopMatrix].
INLINE PROC glPopMatrix ()
  C.glPopMatrix ()
:

#PRAGMA EXTERNAL "PROC C.glLoadIdentity () = 0"

--* Foreign function [@text glLoadIdentity].
INLINE PROC glLoadIdentity ()
  C.glLoadIdentity ()
:

#PRAGMA EXTERNAL "PROC C.glLoadMatrixd (REAL64 m) = 0"

--* Foreign function [@text glLoadMatrixd].
-- @param m Argument with type [@text GLdouble const *].
INLINE PROC glLoadMatrixd (REAL64 m)
  C.glLoadMatrixd (m)
:

#PRAGMA EXTERNAL "PROC C.glLoadMatrixf (REAL32 m) = 0"

--* Foreign function [@text glLoadMatrixf].
-- @param m Argument with type [@text GLfloat const *].
INLINE PROC glLoadMatrixf (REAL32 m)
  C.glLoadMatrixf (m)
:

#PRAGMA EXTERNAL "PROC C.glMultMatrixd (REAL64 m) = 0"

--* Foreign function [@text glMultMatrixd].
-- @param m Argument with type [@text GLdouble const *].
INLINE PROC glMultMatrixd (REAL64 m)
  C.glMultMatrixd (m)
:

#PRAGMA EXTERNAL "PROC C.glMultMatrixf (REAL32 m) = 0"

--* Foreign function [@text glMultMatrixf].
-- @param m Argument with type [@text GLfloat const *].
INLINE PROC glMultMatrixf (REAL32 m)
  C.glMultMatrixf (m)
:

#PRAGMA EXTERNAL "PROC C.glRotated (VAL REAL64 angle, VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* Foreign function [@text glRotated].
-- @param angle Argument with type [@text GLdouble].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param z Argument with type [@text GLdouble].
INLINE PROC glRotated (VAL REAL64 angle, VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glRotated (angle, x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRotatef (VAL REAL32 angle, VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* Foreign function [@text glRotatef].
-- @param angle Argument with type [@text GLfloat].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
-- @param z Argument with type [@text GLfloat].
INLINE PROC glRotatef (VAL REAL32 angle, VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glRotatef (angle, x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glScaled (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* Foreign function [@text glScaled].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param z Argument with type [@text GLdouble].
INLINE PROC glScaled (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glScaled (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glScalef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* Foreign function [@text glScalef].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
-- @param z Argument with type [@text GLfloat].
INLINE PROC glScalef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glScalef (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glTranslated (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* Foreign function [@text glTranslated].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param z Argument with type [@text GLdouble].
INLINE PROC glTranslated (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glTranslated (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glTranslatef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* Foreign function [@text glTranslatef].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
-- @param z Argument with type [@text GLfloat].
INLINE PROC glTranslatef (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glTranslatef (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glIsList (RESULT BYTE return.value, VAL INT list) = 0"

--* Foreign function [@text glIsList].
-- @param return.value Function return value with type [@text GLboolean].
-- @param list Argument with type [@text GLuint].
INLINE PROC glIsList (RESULT BYTE return.value, VAL INT list)
  C.glIsList (return.value, list)
:

#PRAGMA EXTERNAL "PROC C.glDeleteLists (VAL INT list, VAL INT range) = 0"

--* Foreign function [@text glDeleteLists].
-- @param list Argument with type [@text GLuint].
-- @param range Argument with type [@text GLsizei].
INLINE PROC glDeleteLists (VAL INT list, VAL INT range)
  C.glDeleteLists (list, range)
:

#PRAGMA EXTERNAL "PROC C.glGenLists (RESULT INT return.value, VAL INT range) = 0"

--* Foreign function [@text glGenLists].
-- @param return.value Function return value with type [@text GLuint].
-- @param range Argument with type [@text GLsizei].
INLINE PROC glGenLists (RESULT INT return.value, VAL INT range)
  C.glGenLists (return.value, range)
:

#PRAGMA EXTERNAL "PROC C.glNewList (VAL INT list, VAL INT mode) = 0"

--* Foreign function [@text glNewList].
-- @param list Argument with type [@text GLuint].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glNewList (VAL INT list, VAL INT mode)
  C.glNewList (list, mode)
:

#PRAGMA EXTERNAL "PROC C.glEndList () = 0"

--* Foreign function [@text glEndList].
INLINE PROC glEndList ()
  C.glEndList ()
:

#PRAGMA EXTERNAL "PROC C.glCallList (VAL INT list) = 0"

--* Foreign function [@text glCallList].
-- @param list Argument with type [@text GLuint].
INLINE PROC glCallList (VAL INT list)
  C.glCallList (list)
:

#PRAGMA EXTERNAL "PROC C.glCallLists (VAL INT n, VAL INT type, []INT lists) = 0"

--* Foreign function [@text glCallLists].
-- @param n Argument with type [@text GLsizei].
-- @param type Argument with type [@text GLenum].
-- @param lists Array pointer argument with element type [@text GLvoid const *].
INLINE PROC glCallLists (VAL INT n, VAL INT type, []INT lists)
  C.glCallLists (n, type, lists)
:

#PRAGMA EXTERNAL "PROC C.glListBase (VAL INT base) = 0"

--* Foreign function [@text glListBase].
-- @param base Argument with type [@text GLuint].
INLINE PROC glListBase (VAL INT base)
  C.glListBase (base)
:

#PRAGMA EXTERNAL "PROC C.glBegin (VAL INT mode) = 0"

--* Foreign function [@text glBegin].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glBegin (VAL INT mode)
  C.glBegin (mode)
:

#PRAGMA EXTERNAL "PROC C.glEnd () = 0"

--* Foreign function [@text glEnd].
INLINE PROC glEnd ()
  C.glEnd ()
:

#PRAGMA EXTERNAL "PROC C.glVertex2d (VAL REAL64 x, VAL REAL64 y) = 0"

--* Foreign function [@text glVertex2d].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
INLINE PROC glVertex2d (VAL REAL64 x, VAL REAL64 y)
  C.glVertex2d (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex2f (VAL REAL32 x, VAL REAL32 y) = 0"

--* Foreign function [@text glVertex2f].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
INLINE PROC glVertex2f (VAL REAL32 x, VAL REAL32 y)
  C.glVertex2f (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex2i (VAL INT x, VAL INT y) = 0"

--* Foreign function [@text glVertex2i].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
INLINE PROC glVertex2i (VAL INT x, VAL INT y)
  C.glVertex2i (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex2s (VAL INT16 x, VAL INT16 y) = 0"

--* Foreign function [@text glVertex2s].
-- @param x Argument with type [@text GLshort].
-- @param y Argument with type [@text GLshort].
INLINE PROC glVertex2s (VAL INT16 x, VAL INT16 y)
  C.glVertex2s (x, y)
:

#PRAGMA EXTERNAL "PROC C.glVertex3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* Foreign function [@text glVertex3d].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param z Argument with type [@text GLdouble].
INLINE PROC glVertex3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glVertex3d (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* Foreign function [@text glVertex3f].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
-- @param z Argument with type [@text GLfloat].
INLINE PROC glVertex3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glVertex3f (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex3i (VAL INT x, VAL INT y, VAL INT z) = 0"

--* Foreign function [@text glVertex3i].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param z Argument with type [@text GLint].
INLINE PROC glVertex3i (VAL INT x, VAL INT y, VAL INT z)
  C.glVertex3i (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex3s (VAL INT16 x, VAL INT16 y, VAL INT16 z) = 0"

--* Foreign function [@text glVertex3s].
-- @param x Argument with type [@text GLshort].
-- @param y Argument with type [@text GLshort].
-- @param z Argument with type [@text GLshort].
INLINE PROC glVertex3s (VAL INT16 x, VAL INT16 y, VAL INT16 z)
  C.glVertex3s (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glVertex4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w) = 0"

--* Foreign function [@text glVertex4d].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param z Argument with type [@text GLdouble].
-- @param w Argument with type [@text GLdouble].
INLINE PROC glVertex4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w)
  C.glVertex4d (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w) = 0"

--* Foreign function [@text glVertex4f].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
-- @param z Argument with type [@text GLfloat].
-- @param w Argument with type [@text GLfloat].
INLINE PROC glVertex4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w)
  C.glVertex4f (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w) = 0"

--* Foreign function [@text glVertex4i].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param z Argument with type [@text GLint].
-- @param w Argument with type [@text GLint].
INLINE PROC glVertex4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w)
  C.glVertex4i (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w) = 0"

--* Foreign function [@text glVertex4s].
-- @param x Argument with type [@text GLshort].
-- @param y Argument with type [@text GLshort].
-- @param z Argument with type [@text GLshort].
-- @param w Argument with type [@text GLshort].
INLINE PROC glVertex4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w)
  C.glVertex4s (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glVertex2dv (VAL [2]REAL64 v) = 0"

--* Foreign function [@text glVertex2dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glVertex2dv (VAL [2]REAL64 v)
  C.glVertex2dv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex2fv (VAL [2]REAL32 v) = 0"

--* Foreign function [@text glVertex2fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glVertex2fv (VAL [2]REAL32 v)
  C.glVertex2fv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex2iv (VAL [2]INT v) = 0"

--* Foreign function [@text glVertex2iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glVertex2iv (VAL [2]INT v)
  C.glVertex2iv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex2sv (VAL [2]INT16 v) = 0"

--* Foreign function [@text glVertex2sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glVertex2sv (VAL [2]INT16 v)
  C.glVertex2sv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3dv (VAL [3]REAL64 v) = 0"

--* Foreign function [@text glVertex3dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glVertex3dv (VAL [3]REAL64 v)
  C.glVertex3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3fv (VAL [3]REAL32 v) = 0"

--* Foreign function [@text glVertex3fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glVertex3fv (VAL [3]REAL32 v)
  C.glVertex3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3iv (VAL [3]INT v) = 0"

--* Foreign function [@text glVertex3iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glVertex3iv (VAL [3]INT v)
  C.glVertex3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex3sv (VAL [3]INT16 v) = 0"

--* Foreign function [@text glVertex3sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glVertex3sv (VAL [3]INT16 v)
  C.glVertex3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4dv (VAL [4]REAL64 v) = 0"

--* Foreign function [@text glVertex4dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glVertex4dv (VAL [4]REAL64 v)
  C.glVertex4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4fv (VAL [4]REAL32 v) = 0"

--* Foreign function [@text glVertex4fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glVertex4fv (VAL [4]REAL32 v)
  C.glVertex4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4iv (VAL [4]INT v) = 0"

--* Foreign function [@text glVertex4iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glVertex4iv (VAL [4]INT v)
  C.glVertex4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glVertex4sv (VAL [4]INT16 v) = 0"

--* Foreign function [@text glVertex4sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glVertex4sv (VAL [4]INT16 v)
  C.glVertex4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3b (VAL BYTE nx, VAL BYTE ny, VAL BYTE nz) = 0"

--* Foreign function [@text glNormal3b].
-- @param nx Argument with type [@text GLbyte].
-- @param ny Argument with type [@text GLbyte].
-- @param nz Argument with type [@text GLbyte].
INLINE PROC glNormal3b (VAL BYTE nx, VAL BYTE ny, VAL BYTE nz)
  C.glNormal3b (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3d (VAL REAL64 nx, VAL REAL64 ny, VAL REAL64 nz) = 0"

--* Foreign function [@text glNormal3d].
-- @param nx Argument with type [@text GLdouble].
-- @param ny Argument with type [@text GLdouble].
-- @param nz Argument with type [@text GLdouble].
INLINE PROC glNormal3d (VAL REAL64 nx, VAL REAL64 ny, VAL REAL64 nz)
  C.glNormal3d (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3f (VAL REAL32 nx, VAL REAL32 ny, VAL REAL32 nz) = 0"

--* Foreign function [@text glNormal3f].
-- @param nx Argument with type [@text GLfloat].
-- @param ny Argument with type [@text GLfloat].
-- @param nz Argument with type [@text GLfloat].
INLINE PROC glNormal3f (VAL REAL32 nx, VAL REAL32 ny, VAL REAL32 nz)
  C.glNormal3f (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3i (VAL INT nx, VAL INT ny, VAL INT nz) = 0"

--* Foreign function [@text glNormal3i].
-- @param nx Argument with type [@text GLint].
-- @param ny Argument with type [@text GLint].
-- @param nz Argument with type [@text GLint].
INLINE PROC glNormal3i (VAL INT nx, VAL INT ny, VAL INT nz)
  C.glNormal3i (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3s (VAL INT16 nx, VAL INT16 ny, VAL INT16 nz) = 0"

--* Foreign function [@text glNormal3s].
-- @param nx Argument with type [@text GLshort].
-- @param ny Argument with type [@text GLshort].
-- @param nz Argument with type [@text GLshort].
INLINE PROC glNormal3s (VAL INT16 nx, VAL INT16 ny, VAL INT16 nz)
  C.glNormal3s (nx, ny, nz)
:

#PRAGMA EXTERNAL "PROC C.glNormal3bv (VAL [3]BYTE v) = 0"

--* Foreign function [@text glNormal3bv].
-- @param v Array pointer argument with element type [@text GLbyte const].
INLINE PROC glNormal3bv (VAL [3]BYTE v)
  C.glNormal3bv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3dv (VAL [3]REAL64 v) = 0"

--* Foreign function [@text glNormal3dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glNormal3dv (VAL [3]REAL64 v)
  C.glNormal3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3fv (VAL [3]REAL32 v) = 0"

--* Foreign function [@text glNormal3fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glNormal3fv (VAL [3]REAL32 v)
  C.glNormal3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3iv (VAL [3]INT v) = 0"

--* Foreign function [@text glNormal3iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glNormal3iv (VAL [3]INT v)
  C.glNormal3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glNormal3sv (VAL [3]INT16 v) = 0"

--* Foreign function [@text glNormal3sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glNormal3sv (VAL [3]INT16 v)
  C.glNormal3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glIndexd (VAL REAL64 c) = 0"

--* Foreign function [@text glIndexd].
-- @param c Argument with type [@text GLdouble].
INLINE PROC glIndexd (VAL REAL64 c)
  C.glIndexd (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexf (VAL REAL32 c) = 0"

--* Foreign function [@text glIndexf].
-- @param c Argument with type [@text GLfloat].
INLINE PROC glIndexf (VAL REAL32 c)
  C.glIndexf (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexi (VAL INT c) = 0"

--* Foreign function [@text glIndexi].
-- @param c Argument with type [@text GLint].
INLINE PROC glIndexi (VAL INT c)
  C.glIndexi (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexs (VAL INT16 c) = 0"

--* Foreign function [@text glIndexs].
-- @param c Argument with type [@text GLshort].
INLINE PROC glIndexs (VAL INT16 c)
  C.glIndexs (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexub (VAL BYTE c) = 0"

--* Foreign function [@text glIndexub].
-- @param c Argument with type [@text GLubyte].
INLINE PROC glIndexub (VAL BYTE c)
  C.glIndexub (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexdv (VAL []REAL64 c) = 0"

--* Foreign function [@text glIndexdv].
-- @param c Array pointer argument with element type [@text GLdouble const].
INLINE PROC glIndexdv (VAL []REAL64 c)
  C.glIndexdv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexfv (VAL []REAL32 c) = 0"

--* Foreign function [@text glIndexfv].
-- @param c Array pointer argument with element type [@text GLfloat const].
INLINE PROC glIndexfv (VAL []REAL32 c)
  C.glIndexfv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexiv (VAL []INT c) = 0"

--* Foreign function [@text glIndexiv].
-- @param c Array pointer argument with element type [@text GLint const].
INLINE PROC glIndexiv (VAL []INT c)
  C.glIndexiv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexsv (VAL []INT16 c) = 0"

--* Foreign function [@text glIndexsv].
-- @param c Array pointer argument with element type [@text GLshort const].
INLINE PROC glIndexsv (VAL []INT16 c)
  C.glIndexsv (c)
:

#PRAGMA EXTERNAL "PROC C.glIndexubv (VAL []BYTE c) = 0"

--* Foreign function [@text glIndexubv].
-- @param c Array pointer argument with element type [@text GLubyte const].
INLINE PROC glIndexubv (VAL []BYTE c)
  C.glIndexubv (c)
:

#PRAGMA EXTERNAL "PROC C.glColor3b (VAL BYTE red, VAL BYTE green, VAL BYTE blue) = 0"

--* Foreign function [@text glColor3b].
-- @param red Argument with type [@text GLbyte].
-- @param green Argument with type [@text GLbyte].
-- @param blue Argument with type [@text GLbyte].
INLINE PROC glColor3b (VAL BYTE red, VAL BYTE green, VAL BYTE blue)
  C.glColor3b (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue) = 0"

--* Foreign function [@text glColor3d].
-- @param red Argument with type [@text GLdouble].
-- @param green Argument with type [@text GLdouble].
-- @param blue Argument with type [@text GLdouble].
INLINE PROC glColor3d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue)
  C.glColor3d (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue) = 0"

--* Foreign function [@text glColor3f].
-- @param red Argument with type [@text GLfloat].
-- @param green Argument with type [@text GLfloat].
-- @param blue Argument with type [@text GLfloat].
INLINE PROC glColor3f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue)
  C.glColor3f (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3i (VAL INT red, VAL INT green, VAL INT blue) = 0"

--* Foreign function [@text glColor3i].
-- @param red Argument with type [@text GLint].
-- @param green Argument with type [@text GLint].
-- @param blue Argument with type [@text GLint].
INLINE PROC glColor3i (VAL INT red, VAL INT green, VAL INT blue)
  C.glColor3i (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3s (VAL INT16 red, VAL INT16 green, VAL INT16 blue) = 0"

--* Foreign function [@text glColor3s].
-- @param red Argument with type [@text GLshort].
-- @param green Argument with type [@text GLshort].
-- @param blue Argument with type [@text GLshort].
INLINE PROC glColor3s (VAL INT16 red, VAL INT16 green, VAL INT16 blue)
  C.glColor3s (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue) = 0"

--* Foreign function [@text glColor3ub].
-- @param red Argument with type [@text GLubyte].
-- @param green Argument with type [@text GLubyte].
-- @param blue Argument with type [@text GLubyte].
INLINE PROC glColor3ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue)
  C.glColor3ub (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3ui (VAL INT red, VAL INT green, VAL INT blue) = 0"

--* Foreign function [@text glColor3ui].
-- @param red Argument with type [@text GLuint].
-- @param green Argument with type [@text GLuint].
-- @param blue Argument with type [@text GLuint].
INLINE PROC glColor3ui (VAL INT red, VAL INT green, VAL INT blue)
  C.glColor3ui (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor3us (VAL INT16 red, VAL INT16 green, VAL INT16 blue) = 0"

--* Foreign function [@text glColor3us].
-- @param red Argument with type [@text GLushort].
-- @param green Argument with type [@text GLushort].
-- @param blue Argument with type [@text GLushort].
INLINE PROC glColor3us (VAL INT16 red, VAL INT16 green, VAL INT16 blue)
  C.glColor3us (red, green, blue)
:

#PRAGMA EXTERNAL "PROC C.glColor4b (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha) = 0"

--* Foreign function [@text glColor4b].
-- @param red Argument with type [@text GLbyte].
-- @param green Argument with type [@text GLbyte].
-- @param blue Argument with type [@text GLbyte].
-- @param alpha Argument with type [@text GLbyte].
INLINE PROC glColor4b (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha)
  C.glColor4b (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue, VAL REAL64 alpha) = 0"

--* Foreign function [@text glColor4d].
-- @param red Argument with type [@text GLdouble].
-- @param green Argument with type [@text GLdouble].
-- @param blue Argument with type [@text GLdouble].
-- @param alpha Argument with type [@text GLdouble].
INLINE PROC glColor4d (VAL REAL64 red, VAL REAL64 green, VAL REAL64 blue, VAL REAL64 alpha)
  C.glColor4d (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha) = 0"

--* Foreign function [@text glColor4f].
-- @param red Argument with type [@text GLfloat].
-- @param green Argument with type [@text GLfloat].
-- @param blue Argument with type [@text GLfloat].
-- @param alpha Argument with type [@text GLfloat].
INLINE PROC glColor4f (VAL REAL32 red, VAL REAL32 green, VAL REAL32 blue, VAL REAL32 alpha)
  C.glColor4f (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4i (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha) = 0"

--* Foreign function [@text glColor4i].
-- @param red Argument with type [@text GLint].
-- @param green Argument with type [@text GLint].
-- @param blue Argument with type [@text GLint].
-- @param alpha Argument with type [@text GLint].
INLINE PROC glColor4i (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha)
  C.glColor4i (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4s (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha) = 0"

--* Foreign function [@text glColor4s].
-- @param red Argument with type [@text GLshort].
-- @param green Argument with type [@text GLshort].
-- @param blue Argument with type [@text GLshort].
-- @param alpha Argument with type [@text GLshort].
INLINE PROC glColor4s (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha)
  C.glColor4s (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha) = 0"

--* Foreign function [@text glColor4ub].
-- @param red Argument with type [@text GLubyte].
-- @param green Argument with type [@text GLubyte].
-- @param blue Argument with type [@text GLubyte].
-- @param alpha Argument with type [@text GLubyte].
INLINE PROC glColor4ub (VAL BYTE red, VAL BYTE green, VAL BYTE blue, VAL BYTE alpha)
  C.glColor4ub (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4ui (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha) = 0"

--* Foreign function [@text glColor4ui].
-- @param red Argument with type [@text GLuint].
-- @param green Argument with type [@text GLuint].
-- @param blue Argument with type [@text GLuint].
-- @param alpha Argument with type [@text GLuint].
INLINE PROC glColor4ui (VAL INT red, VAL INT green, VAL INT blue, VAL INT alpha)
  C.glColor4ui (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor4us (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha) = 0"

--* Foreign function [@text glColor4us].
-- @param red Argument with type [@text GLushort].
-- @param green Argument with type [@text GLushort].
-- @param blue Argument with type [@text GLushort].
-- @param alpha Argument with type [@text GLushort].
INLINE PROC glColor4us (VAL INT16 red, VAL INT16 green, VAL INT16 blue, VAL INT16 alpha)
  C.glColor4us (red, green, blue, alpha)
:

#PRAGMA EXTERNAL "PROC C.glColor3bv (VAL [3]BYTE v) = 0"

--* Foreign function [@text glColor3bv].
-- @param v Array pointer argument with element type [@text GLbyte const].
INLINE PROC glColor3bv (VAL [3]BYTE v)
  C.glColor3bv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3dv (VAL [3]REAL64 v) = 0"

--* Foreign function [@text glColor3dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glColor3dv (VAL [3]REAL64 v)
  C.glColor3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3fv (VAL [3]REAL32 v) = 0"

--* Foreign function [@text glColor3fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glColor3fv (VAL [3]REAL32 v)
  C.glColor3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3iv (VAL [3]INT v) = 0"

--* Foreign function [@text glColor3iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glColor3iv (VAL [3]INT v)
  C.glColor3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3sv (VAL [3]INT16 v) = 0"

--* Foreign function [@text glColor3sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glColor3sv (VAL [3]INT16 v)
  C.glColor3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3ubv (VAL [3]BYTE v) = 0"

--* Foreign function [@text glColor3ubv].
-- @param v Array pointer argument with element type [@text GLubyte const].
INLINE PROC glColor3ubv (VAL [3]BYTE v)
  C.glColor3ubv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3uiv (VAL [3]INT v) = 0"

--* Foreign function [@text glColor3uiv].
-- @param v Array pointer argument with element type [@text GLuint const].
INLINE PROC glColor3uiv (VAL [3]INT v)
  C.glColor3uiv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor3usv (VAL [3]INT16 v) = 0"

--* Foreign function [@text glColor3usv].
-- @param v Array pointer argument with element type [@text GLushort const].
INLINE PROC glColor3usv (VAL [3]INT16 v)
  C.glColor3usv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4bv (VAL [4]BYTE v) = 0"

--* Foreign function [@text glColor4bv].
-- @param v Array pointer argument with element type [@text GLbyte const].
INLINE PROC glColor4bv (VAL [4]BYTE v)
  C.glColor4bv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4dv (VAL [4]REAL64 v) = 0"

--* Foreign function [@text glColor4dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glColor4dv (VAL [4]REAL64 v)
  C.glColor4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4fv (VAL [4]REAL32 v) = 0"

--* Foreign function [@text glColor4fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glColor4fv (VAL [4]REAL32 v)
  C.glColor4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4iv (VAL [4]INT v) = 0"

--* Foreign function [@text glColor4iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glColor4iv (VAL [4]INT v)
  C.glColor4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4sv (VAL [4]INT16 v) = 0"

--* Foreign function [@text glColor4sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glColor4sv (VAL [4]INT16 v)
  C.glColor4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4ubv (VAL [4]BYTE v) = 0"

--* Foreign function [@text glColor4ubv].
-- @param v Array pointer argument with element type [@text GLubyte const].
INLINE PROC glColor4ubv (VAL [4]BYTE v)
  C.glColor4ubv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4uiv (VAL [4]INT v) = 0"

--* Foreign function [@text glColor4uiv].
-- @param v Array pointer argument with element type [@text GLuint const].
INLINE PROC glColor4uiv (VAL [4]INT v)
  C.glColor4uiv (v)
:

#PRAGMA EXTERNAL "PROC C.glColor4usv (VAL [4]INT16 v) = 0"

--* Foreign function [@text glColor4usv].
-- @param v Array pointer argument with element type [@text GLushort const].
INLINE PROC glColor4usv (VAL [4]INT16 v)
  C.glColor4usv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1d (VAL REAL64 s) = 0"

--* Foreign function [@text glTexCoord1d].
-- @param s Argument with type [@text GLdouble].
INLINE PROC glTexCoord1d (VAL REAL64 s)
  C.glTexCoord1d (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1f (VAL REAL32 s) = 0"

--* Foreign function [@text glTexCoord1f].
-- @param s Argument with type [@text GLfloat].
INLINE PROC glTexCoord1f (VAL REAL32 s)
  C.glTexCoord1f (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1i (VAL INT s) = 0"

--* Foreign function [@text glTexCoord1i].
-- @param s Argument with type [@text GLint].
INLINE PROC glTexCoord1i (VAL INT s)
  C.glTexCoord1i (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1s (VAL INT16 s) = 0"

--* Foreign function [@text glTexCoord1s].
-- @param s Argument with type [@text GLshort].
INLINE PROC glTexCoord1s (VAL INT16 s)
  C.glTexCoord1s (s)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2d (VAL REAL64 s, VAL REAL64 t) = 0"

--* Foreign function [@text glTexCoord2d].
-- @param s Argument with type [@text GLdouble].
-- @param t Argument with type [@text GLdouble].
INLINE PROC glTexCoord2d (VAL REAL64 s, VAL REAL64 t)
  C.glTexCoord2d (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2f (VAL REAL32 s, VAL REAL32 t) = 0"

--* Foreign function [@text glTexCoord2f].
-- @param s Argument with type [@text GLfloat].
-- @param t Argument with type [@text GLfloat].
INLINE PROC glTexCoord2f (VAL REAL32 s, VAL REAL32 t)
  C.glTexCoord2f (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2i (VAL INT s, VAL INT t) = 0"

--* Foreign function [@text glTexCoord2i].
-- @param s Argument with type [@text GLint].
-- @param t Argument with type [@text GLint].
INLINE PROC glTexCoord2i (VAL INT s, VAL INT t)
  C.glTexCoord2i (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2s (VAL INT16 s, VAL INT16 t) = 0"

--* Foreign function [@text glTexCoord2s].
-- @param s Argument with type [@text GLshort].
-- @param t Argument with type [@text GLshort].
INLINE PROC glTexCoord2s (VAL INT16 s, VAL INT16 t)
  C.glTexCoord2s (s, t)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r) = 0"

--* Foreign function [@text glTexCoord3d].
-- @param s Argument with type [@text GLdouble].
-- @param t Argument with type [@text GLdouble].
-- @param r Argument with type [@text GLdouble].
INLINE PROC glTexCoord3d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r)
  C.glTexCoord3d (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r) = 0"

--* Foreign function [@text glTexCoord3f].
-- @param s Argument with type [@text GLfloat].
-- @param t Argument with type [@text GLfloat].
-- @param r Argument with type [@text GLfloat].
INLINE PROC glTexCoord3f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r)
  C.glTexCoord3f (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3i (VAL INT s, VAL INT t, VAL INT r) = 0"

--* Foreign function [@text glTexCoord3i].
-- @param s Argument with type [@text GLint].
-- @param t Argument with type [@text GLint].
-- @param r Argument with type [@text GLint].
INLINE PROC glTexCoord3i (VAL INT s, VAL INT t, VAL INT r)
  C.glTexCoord3i (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3s (VAL INT16 s, VAL INT16 t, VAL INT16 r) = 0"

--* Foreign function [@text glTexCoord3s].
-- @param s Argument with type [@text GLshort].
-- @param t Argument with type [@text GLshort].
-- @param r Argument with type [@text GLshort].
INLINE PROC glTexCoord3s (VAL INT16 s, VAL INT16 t, VAL INT16 r)
  C.glTexCoord3s (s, t, r)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r, VAL REAL64 q) = 0"

--* Foreign function [@text glTexCoord4d].
-- @param s Argument with type [@text GLdouble].
-- @param t Argument with type [@text GLdouble].
-- @param r Argument with type [@text GLdouble].
-- @param q Argument with type [@text GLdouble].
INLINE PROC glTexCoord4d (VAL REAL64 s, VAL REAL64 t, VAL REAL64 r, VAL REAL64 q)
  C.glTexCoord4d (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r, VAL REAL32 q) = 0"

--* Foreign function [@text glTexCoord4f].
-- @param s Argument with type [@text GLfloat].
-- @param t Argument with type [@text GLfloat].
-- @param r Argument with type [@text GLfloat].
-- @param q Argument with type [@text GLfloat].
INLINE PROC glTexCoord4f (VAL REAL32 s, VAL REAL32 t, VAL REAL32 r, VAL REAL32 q)
  C.glTexCoord4f (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4i (VAL INT s, VAL INT t, VAL INT r, VAL INT q) = 0"

--* Foreign function [@text glTexCoord4i].
-- @param s Argument with type [@text GLint].
-- @param t Argument with type [@text GLint].
-- @param r Argument with type [@text GLint].
-- @param q Argument with type [@text GLint].
INLINE PROC glTexCoord4i (VAL INT s, VAL INT t, VAL INT r, VAL INT q)
  C.glTexCoord4i (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4s (VAL INT16 s, VAL INT16 t, VAL INT16 r, VAL INT16 q) = 0"

--* Foreign function [@text glTexCoord4s].
-- @param s Argument with type [@text GLshort].
-- @param t Argument with type [@text GLshort].
-- @param r Argument with type [@text GLshort].
-- @param q Argument with type [@text GLshort].
INLINE PROC glTexCoord4s (VAL INT16 s, VAL INT16 t, VAL INT16 r, VAL INT16 q)
  C.glTexCoord4s (s, t, r, q)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1dv (VAL [1]REAL64 v) = 0"

--* Foreign function [@text glTexCoord1dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glTexCoord1dv (VAL [1]REAL64 v)
  C.glTexCoord1dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1fv (VAL [1]REAL32 v) = 0"

--* Foreign function [@text glTexCoord1fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glTexCoord1fv (VAL [1]REAL32 v)
  C.glTexCoord1fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1iv (VAL [1]INT v) = 0"

--* Foreign function [@text glTexCoord1iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glTexCoord1iv (VAL [1]INT v)
  C.glTexCoord1iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord1sv (VAL [1]INT16 v) = 0"

--* Foreign function [@text glTexCoord1sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glTexCoord1sv (VAL [1]INT16 v)
  C.glTexCoord1sv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2dv (VAL [2]REAL64 v) = 0"

--* Foreign function [@text glTexCoord2dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glTexCoord2dv (VAL [2]REAL64 v)
  C.glTexCoord2dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2fv (VAL [2]REAL32 v) = 0"

--* Foreign function [@text glTexCoord2fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glTexCoord2fv (VAL [2]REAL32 v)
  C.glTexCoord2fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2iv (VAL [2]INT v) = 0"

--* Foreign function [@text glTexCoord2iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glTexCoord2iv (VAL [2]INT v)
  C.glTexCoord2iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord2sv (VAL [2]INT16 v) = 0"

--* Foreign function [@text glTexCoord2sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glTexCoord2sv (VAL [2]INT16 v)
  C.glTexCoord2sv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3dv (VAL [3]REAL64 v) = 0"

--* Foreign function [@text glTexCoord3dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glTexCoord3dv (VAL [3]REAL64 v)
  C.glTexCoord3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3fv (VAL [3]REAL32 v) = 0"

--* Foreign function [@text glTexCoord3fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glTexCoord3fv (VAL [3]REAL32 v)
  C.glTexCoord3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3iv (VAL [3]INT v) = 0"

--* Foreign function [@text glTexCoord3iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glTexCoord3iv (VAL [3]INT v)
  C.glTexCoord3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord3sv (VAL [3]INT16 v) = 0"

--* Foreign function [@text glTexCoord3sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glTexCoord3sv (VAL [3]INT16 v)
  C.glTexCoord3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4dv (VAL [4]REAL64 v) = 0"

--* Foreign function [@text glTexCoord4dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glTexCoord4dv (VAL [4]REAL64 v)
  C.glTexCoord4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4fv (VAL [4]REAL32 v) = 0"

--* Foreign function [@text glTexCoord4fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glTexCoord4fv (VAL [4]REAL32 v)
  C.glTexCoord4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4iv (VAL [4]INT v) = 0"

--* Foreign function [@text glTexCoord4iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glTexCoord4iv (VAL [4]INT v)
  C.glTexCoord4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glTexCoord4sv (VAL [4]INT16 v) = 0"

--* Foreign function [@text glTexCoord4sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glTexCoord4sv (VAL [4]INT16 v)
  C.glTexCoord4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2d (VAL REAL64 x, VAL REAL64 y) = 0"

--* Foreign function [@text glRasterPos2d].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
INLINE PROC glRasterPos2d (VAL REAL64 x, VAL REAL64 y)
  C.glRasterPos2d (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2f (VAL REAL32 x, VAL REAL32 y) = 0"

--* Foreign function [@text glRasterPos2f].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
INLINE PROC glRasterPos2f (VAL REAL32 x, VAL REAL32 y)
  C.glRasterPos2f (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2i (VAL INT x, VAL INT y) = 0"

--* Foreign function [@text glRasterPos2i].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
INLINE PROC glRasterPos2i (VAL INT x, VAL INT y)
  C.glRasterPos2i (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2s (VAL INT16 x, VAL INT16 y) = 0"

--* Foreign function [@text glRasterPos2s].
-- @param x Argument with type [@text GLshort].
-- @param y Argument with type [@text GLshort].
INLINE PROC glRasterPos2s (VAL INT16 x, VAL INT16 y)
  C.glRasterPos2s (x, y)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z) = 0"

--* Foreign function [@text glRasterPos3d].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param z Argument with type [@text GLdouble].
INLINE PROC glRasterPos3d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z)
  C.glRasterPos3d (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z) = 0"

--* Foreign function [@text glRasterPos3f].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
-- @param z Argument with type [@text GLfloat].
INLINE PROC glRasterPos3f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z)
  C.glRasterPos3f (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3i (VAL INT x, VAL INT y, VAL INT z) = 0"

--* Foreign function [@text glRasterPos3i].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param z Argument with type [@text GLint].
INLINE PROC glRasterPos3i (VAL INT x, VAL INT y, VAL INT z)
  C.glRasterPos3i (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3s (VAL INT16 x, VAL INT16 y, VAL INT16 z) = 0"

--* Foreign function [@text glRasterPos3s].
-- @param x Argument with type [@text GLshort].
-- @param y Argument with type [@text GLshort].
-- @param z Argument with type [@text GLshort].
INLINE PROC glRasterPos3s (VAL INT16 x, VAL INT16 y, VAL INT16 z)
  C.glRasterPos3s (x, y, z)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w) = 0"

--* Foreign function [@text glRasterPos4d].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param z Argument with type [@text GLdouble].
-- @param w Argument with type [@text GLdouble].
INLINE PROC glRasterPos4d (VAL REAL64 x, VAL REAL64 y, VAL REAL64 z, VAL REAL64 w)
  C.glRasterPos4d (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w) = 0"

--* Foreign function [@text glRasterPos4f].
-- @param x Argument with type [@text GLfloat].
-- @param y Argument with type [@text GLfloat].
-- @param z Argument with type [@text GLfloat].
-- @param w Argument with type [@text GLfloat].
INLINE PROC glRasterPos4f (VAL REAL32 x, VAL REAL32 y, VAL REAL32 z, VAL REAL32 w)
  C.glRasterPos4f (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w) = 0"

--* Foreign function [@text glRasterPos4i].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param z Argument with type [@text GLint].
-- @param w Argument with type [@text GLint].
INLINE PROC glRasterPos4i (VAL INT x, VAL INT y, VAL INT z, VAL INT w)
  C.glRasterPos4i (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w) = 0"

--* Foreign function [@text glRasterPos4s].
-- @param x Argument with type [@text GLshort].
-- @param y Argument with type [@text GLshort].
-- @param z Argument with type [@text GLshort].
-- @param w Argument with type [@text GLshort].
INLINE PROC glRasterPos4s (VAL INT16 x, VAL INT16 y, VAL INT16 z, VAL INT16 w)
  C.glRasterPos4s (x, y, z, w)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2dv (VAL [2]REAL64 v) = 0"

--* Foreign function [@text glRasterPos2dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glRasterPos2dv (VAL [2]REAL64 v)
  C.glRasterPos2dv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2fv (VAL [2]REAL32 v) = 0"

--* Foreign function [@text glRasterPos2fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glRasterPos2fv (VAL [2]REAL32 v)
  C.glRasterPos2fv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2iv (VAL [2]INT v) = 0"

--* Foreign function [@text glRasterPos2iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glRasterPos2iv (VAL [2]INT v)
  C.glRasterPos2iv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos2sv (VAL [2]INT16 v) = 0"

--* Foreign function [@text glRasterPos2sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glRasterPos2sv (VAL [2]INT16 v)
  C.glRasterPos2sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3dv (VAL [3]REAL64 v) = 0"

--* Foreign function [@text glRasterPos3dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glRasterPos3dv (VAL [3]REAL64 v)
  C.glRasterPos3dv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3fv (VAL [3]REAL32 v) = 0"

--* Foreign function [@text glRasterPos3fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glRasterPos3fv (VAL [3]REAL32 v)
  C.glRasterPos3fv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3iv (VAL [3]INT v) = 0"

--* Foreign function [@text glRasterPos3iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glRasterPos3iv (VAL [3]INT v)
  C.glRasterPos3iv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos3sv (VAL [3]INT16 v) = 0"

--* Foreign function [@text glRasterPos3sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glRasterPos3sv (VAL [3]INT16 v)
  C.glRasterPos3sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4dv (VAL [4]REAL64 v) = 0"

--* Foreign function [@text glRasterPos4dv].
-- @param v Array pointer argument with element type [@text GLdouble const].
INLINE PROC glRasterPos4dv (VAL [4]REAL64 v)
  C.glRasterPos4dv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4fv (VAL [4]REAL32 v) = 0"

--* Foreign function [@text glRasterPos4fv].
-- @param v Array pointer argument with element type [@text GLfloat const].
INLINE PROC glRasterPos4fv (VAL [4]REAL32 v)
  C.glRasterPos4fv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4iv (VAL [4]INT v) = 0"

--* Foreign function [@text glRasterPos4iv].
-- @param v Array pointer argument with element type [@text GLint const].
INLINE PROC glRasterPos4iv (VAL [4]INT v)
  C.glRasterPos4iv (v)
:

#PRAGMA EXTERNAL "PROC C.glRasterPos4sv (VAL [4]INT16 v) = 0"

--* Foreign function [@text glRasterPos4sv].
-- @param v Array pointer argument with element type [@text GLshort const].
INLINE PROC glRasterPos4sv (VAL [4]INT16 v)
  C.glRasterPos4sv (v)
:

#PRAGMA EXTERNAL "PROC C.glRectd (VAL REAL64 x1, VAL REAL64 y1, VAL REAL64 x2, VAL REAL64 y2) = 0"

--* Foreign function [@text glRectd].
-- @param x1 Argument with type [@text GLdouble].
-- @param y1 Argument with type [@text GLdouble].
-- @param x2 Argument with type [@text GLdouble].
-- @param y2 Argument with type [@text GLdouble].
INLINE PROC glRectd (VAL REAL64 x1, VAL REAL64 y1, VAL REAL64 x2, VAL REAL64 y2)
  C.glRectd (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRectf (VAL REAL32 x1, VAL REAL32 y1, VAL REAL32 x2, VAL REAL32 y2) = 0"

--* Foreign function [@text glRectf].
-- @param x1 Argument with type [@text GLfloat].
-- @param y1 Argument with type [@text GLfloat].
-- @param x2 Argument with type [@text GLfloat].
-- @param y2 Argument with type [@text GLfloat].
INLINE PROC glRectf (VAL REAL32 x1, VAL REAL32 y1, VAL REAL32 x2, VAL REAL32 y2)
  C.glRectf (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRecti (VAL INT x1, VAL INT y1, VAL INT x2, VAL INT y2) = 0"

--* Foreign function [@text glRecti].
-- @param x1 Argument with type [@text GLint].
-- @param y1 Argument with type [@text GLint].
-- @param x2 Argument with type [@text GLint].
-- @param y2 Argument with type [@text GLint].
INLINE PROC glRecti (VAL INT x1, VAL INT y1, VAL INT x2, VAL INT y2)
  C.glRecti (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRects (VAL INT16 x1, VAL INT16 y1, VAL INT16 x2, VAL INT16 y2) = 0"

--* Foreign function [@text glRects].
-- @param x1 Argument with type [@text GLshort].
-- @param y1 Argument with type [@text GLshort].
-- @param x2 Argument with type [@text GLshort].
-- @param y2 Argument with type [@text GLshort].
INLINE PROC glRects (VAL INT16 x1, VAL INT16 y1, VAL INT16 x2, VAL INT16 y2)
  C.glRects (x1, y1, x2, y2)
:

#PRAGMA EXTERNAL "PROC C.glRectdv (VAL []REAL64 v1, VAL []REAL64 v2) = 0"

--* Foreign function [@text glRectdv].
-- @param v1 Array pointer argument with element type [@text GLdouble const].
-- @param v2 Array pointer argument with element type [@text GLdouble const].
INLINE PROC glRectdv (VAL []REAL64 v1, VAL []REAL64 v2)
  C.glRectdv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glRectfv (VAL []REAL32 v1, VAL []REAL32 v2) = 0"

--* Foreign function [@text glRectfv].
-- @param v1 Array pointer argument with element type [@text GLfloat const].
-- @param v2 Array pointer argument with element type [@text GLfloat const].
INLINE PROC glRectfv (VAL []REAL32 v1, VAL []REAL32 v2)
  C.glRectfv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glRectiv (VAL []INT v1, VAL []INT v2) = 0"

--* Foreign function [@text glRectiv].
-- @param v1 Array pointer argument with element type [@text GLint const].
-- @param v2 Array pointer argument with element type [@text GLint const].
INLINE PROC glRectiv (VAL []INT v1, VAL []INT v2)
  C.glRectiv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glRectsv (VAL []INT16 v1, VAL []INT16 v2) = 0"

--* Foreign function [@text glRectsv].
-- @param v1 Array pointer argument with element type [@text GLshort const].
-- @param v2 Array pointer argument with element type [@text GLshort const].
INLINE PROC glRectsv (VAL []INT16 v1, VAL []INT16 v2)
  C.glRectsv (v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glVertexPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* Foreign function [@text glVertexPointer].
-- @param size Argument with type [@text GLint].
-- @param type Argument with type [@text GLenum].
-- @param stride Argument with type [@text GLsizei].
-- @param ptr Array pointer argument with element type [@text GLvoid const].
INLINE PROC glVertexPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glVertexPointer (size, type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glNormalPointer (VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* Foreign function [@text glNormalPointer].
-- @param type Argument with type [@text GLenum].
-- @param stride Argument with type [@text GLsizei].
-- @param ptr Array pointer argument with element type [@text GLvoid const].
INLINE PROC glNormalPointer (VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glNormalPointer (type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glColorPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* Foreign function [@text glColorPointer].
-- @param size Argument with type [@text GLint].
-- @param type Argument with type [@text GLenum].
-- @param stride Argument with type [@text GLsizei].
-- @param ptr Array pointer argument with element type [@text GLvoid const].
INLINE PROC glColorPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glColorPointer (size, type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glIndexPointer (VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* Foreign function [@text glIndexPointer].
-- @param type Argument with type [@text GLenum].
-- @param stride Argument with type [@text GLsizei].
-- @param ptr Array pointer argument with element type [@text GLvoid const].
INLINE PROC glIndexPointer (VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glIndexPointer (type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glTexCoordPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr) = 0"

--* Foreign function [@text glTexCoordPointer].
-- @param size Argument with type [@text GLint].
-- @param type Argument with type [@text GLenum].
-- @param stride Argument with type [@text GLsizei].
-- @param ptr Array pointer argument with element type [@text GLvoid const].
INLINE PROC glTexCoordPointer (VAL INT size, VAL INT type, VAL INT stride, VAL []INT ptr)
  C.glTexCoordPointer (size, type, stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glEdgeFlagPointer (VAL INT stride, VAL []INT ptr) = 0"

--* Foreign function [@text glEdgeFlagPointer].
-- @param stride Argument with type [@text GLsizei].
-- @param ptr Array pointer argument with element type [@text GLvoid const].
INLINE PROC glEdgeFlagPointer (VAL INT stride, VAL []INT ptr)
  C.glEdgeFlagPointer (stride, ptr)
:

#PRAGMA EXTERNAL "PROC C.glGetPointerv (VAL INT pname, []INT params) = 0"

--* Foreign function [@text glGetPointerv].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLvoid].
INLINE PROC glGetPointerv (VAL INT pname, []INT params)
  C.glGetPointerv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glArrayElement (VAL INT i) = 0"

--* Foreign function [@text glArrayElement].
-- @param i Argument with type [@text GLint].
INLINE PROC glArrayElement (VAL INT i)
  C.glArrayElement (i)
:

#PRAGMA EXTERNAL "PROC C.glDrawArrays (VAL INT mode, VAL INT first, VAL INT count) = 0"

--* Foreign function [@text glDrawArrays].
-- @param mode Argument with type [@text GLenum].
-- @param first Argument with type [@text GLint].
-- @param count Argument with type [@text GLsizei].
INLINE PROC glDrawArrays (VAL INT mode, VAL INT first, VAL INT count)
  C.glDrawArrays (mode, first, count)
:

#PRAGMA EXTERNAL "PROC C.glDrawElements (VAL INT mode, VAL INT count, VAL INT type, VAL []INT indices) = 0"

--* Foreign function [@text glDrawElements].
-- @param mode Argument with type [@text GLenum].
-- @param count Argument with type [@text GLsizei].
-- @param type Argument with type [@text GLenum].
-- @param indices Array pointer argument with element type [@text GLvoid const].
INLINE PROC glDrawElements (VAL INT mode, VAL INT count, VAL INT type, VAL []INT indices)
  C.glDrawElements (mode, count, type, indices)
:

#PRAGMA EXTERNAL "PROC C.glInterleavedArrays (VAL INT format, VAL INT stride, VAL []INT pointer) = 0"

--* Foreign function [@text glInterleavedArrays].
-- @param format Argument with type [@text GLenum].
-- @param stride Argument with type [@text GLsizei].
-- @param pointer Array pointer argument with element type [@text GLvoid const].
INLINE PROC glInterleavedArrays (VAL INT format, VAL INT stride, VAL []INT pointer)
  C.glInterleavedArrays (format, stride, pointer)
:

#PRAGMA EXTERNAL "PROC C.glShadeModel (VAL INT mode) = 0"

--* Foreign function [@text glShadeModel].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glShadeModel (VAL INT mode)
  C.glShadeModel (mode)
:

#PRAGMA EXTERNAL "PROC C.glLightf (VAL INT light, VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glLightf].
-- @param light Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glLightf (VAL INT light, VAL INT pname, VAL REAL32 param)
  C.glLightf (light, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLighti (VAL INT light, VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glLighti].
-- @param light Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glLighti (VAL INT light, VAL INT pname, VAL INT param)
  C.glLighti (light, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLightfv (VAL INT light, VAL INT pname, VAL []REAL32 params) = 0"

--* Foreign function [@text glLightfv].
-- @param light Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLfloat const].
INLINE PROC glLightfv (VAL INT light, VAL INT pname, VAL []REAL32 params)
  C.glLightfv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glLightiv (VAL INT light, VAL INT pname, VAL []INT params) = 0"

--* Foreign function [@text glLightiv].
-- @param light Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLint const].
INLINE PROC glLightiv (VAL INT light, VAL INT pname, VAL []INT params)
  C.glLightiv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetLightfv (VAL INT light, VAL INT pname, []REAL32 params) = 0"

--* Foreign function [@text glGetLightfv].
-- @param light Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLfloat].
INLINE PROC glGetLightfv (VAL INT light, VAL INT pname, []REAL32 params)
  C.glGetLightfv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetLightiv (VAL INT light, VAL INT pname, []INT params) = 0"

--* Foreign function [@text glGetLightiv].
-- @param light Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLint].
INLINE PROC glGetLightiv (VAL INT light, VAL INT pname, []INT params)
  C.glGetLightiv (light, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glLightModelf (VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glLightModelf].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glLightModelf (VAL INT pname, VAL REAL32 param)
  C.glLightModelf (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLightModeli (VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glLightModeli].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glLightModeli (VAL INT pname, VAL INT param)
  C.glLightModeli (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glLightModelfv (VAL INT pname, []REAL32 params) = 0"

--* Foreign function [@text glLightModelfv].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLfloat const *].
INLINE PROC glLightModelfv (VAL INT pname, []REAL32 params)
  C.glLightModelfv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glLightModeliv (VAL INT pname, []INT params) = 0"

--* Foreign function [@text glLightModeliv].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLint const *].
INLINE PROC glLightModeliv (VAL INT pname, []INT params)
  C.glLightModeliv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glMaterialf (VAL INT face, VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glMaterialf].
-- @param face Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glMaterialf (VAL INT face, VAL INT pname, VAL REAL32 param)
  C.glMaterialf (face, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glMateriali (VAL INT face, VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glMateriali].
-- @param face Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glMateriali (VAL INT face, VAL INT pname, VAL INT param)
  C.glMateriali (face, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glMaterialfv (VAL INT face, VAL INT pname, VAL []REAL32 params) = 0"

--* Foreign function [@text glMaterialfv].
-- @param face Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLfloat const].
INLINE PROC glMaterialfv (VAL INT face, VAL INT pname, VAL []REAL32 params)
  C.glMaterialfv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glMaterialiv (VAL INT face, VAL INT pname, VAL []INT params) = 0"

--* Foreign function [@text glMaterialiv].
-- @param face Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLint const].
INLINE PROC glMaterialiv (VAL INT face, VAL INT pname, VAL []INT params)
  C.glMaterialiv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetMaterialfv (VAL INT face, VAL INT pname, []REAL32 params) = 0"

--* Foreign function [@text glGetMaterialfv].
-- @param face Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLfloat].
INLINE PROC glGetMaterialfv (VAL INT face, VAL INT pname, []REAL32 params)
  C.glGetMaterialfv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetMaterialiv (VAL INT face, VAL INT pname, []INT params) = 0"

--* Foreign function [@text glGetMaterialiv].
-- @param face Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Array pointer argument with element type [@text GLint].
INLINE PROC glGetMaterialiv (VAL INT face, VAL INT pname, []INT params)
  C.glGetMaterialiv (face, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glColorMaterial (VAL INT face, VAL INT mode) = 0"

--* Foreign function [@text glColorMaterial].
-- @param face Argument with type [@text GLenum].
-- @param mode Argument with type [@text GLenum].
INLINE PROC glColorMaterial (VAL INT face, VAL INT mode)
  C.glColorMaterial (face, mode)
:

#PRAGMA EXTERNAL "PROC C.glPixelZoom (VAL REAL32 xfactor, VAL REAL32 yfactor) = 0"

--* Foreign function [@text glPixelZoom].
-- @param xfactor Argument with type [@text GLfloat].
-- @param yfactor Argument with type [@text GLfloat].
INLINE PROC glPixelZoom (VAL REAL32 xfactor, VAL REAL32 yfactor)
  C.glPixelZoom (xfactor, yfactor)
:

#PRAGMA EXTERNAL "PROC C.glPixelStoref (VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glPixelStoref].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glPixelStoref (VAL INT pname, VAL REAL32 param)
  C.glPixelStoref (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelStorei (VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glPixelStorei].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glPixelStorei (VAL INT pname, VAL INT param)
  C.glPixelStorei (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelTransferf (VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glPixelTransferf].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glPixelTransferf (VAL INT pname, VAL REAL32 param)
  C.glPixelTransferf (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelTransferi (VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glPixelTransferi].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glPixelTransferi (VAL INT pname, VAL INT param)
  C.glPixelTransferi (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glPixelMapfv (VAL INT map, VAL INT mapsize, VAL []REAL32 values) = 0"

--* Foreign function [@text glPixelMapfv].
-- @param map Argument with type [@text GLenum].
-- @param mapsize Argument with type [@text GLint].
-- @param values Array pointer argument with element type [@text GLfloat const].
INLINE PROC glPixelMapfv (VAL INT map, VAL INT mapsize, VAL []REAL32 values)
  C.glPixelMapfv (map, mapsize, values)
:

#PRAGMA EXTERNAL "PROC C.glPixelMapuiv (VAL INT map, VAL INT mapsize, VAL []INT values) = 0"

--* Foreign function [@text glPixelMapuiv].
-- @param map Argument with type [@text GLenum].
-- @param mapsize Argument with type [@text GLint].
-- @param values Array pointer argument with element type [@text GLuint const].
INLINE PROC glPixelMapuiv (VAL INT map, VAL INT mapsize, VAL []INT values)
  C.glPixelMapuiv (map, mapsize, values)
:

#PRAGMA EXTERNAL "PROC C.glPixelMapusv (VAL INT map, VAL INT mapsize, VAL []INT16 values) = 0"

--* Foreign function [@text glPixelMapusv].
-- @param map Argument with type [@text GLenum].
-- @param mapsize Argument with type [@text GLint].
-- @param values Array pointer argument with element type [@text GLushort const].
INLINE PROC glPixelMapusv (VAL INT map, VAL INT mapsize, VAL []INT16 values)
  C.glPixelMapusv (map, mapsize, values)
:

#PRAGMA EXTERNAL "PROC C.glGetPixelMapfv (VAL INT map, []REAL32 values) = 0"

--* Foreign function [@text glGetPixelMapfv].
-- @param map Argument with type [@text GLenum].
-- @param values Array pointer argument with element type [@text GLfloat].
INLINE PROC glGetPixelMapfv (VAL INT map, []REAL32 values)
  C.glGetPixelMapfv (map, values)
:

#PRAGMA EXTERNAL "PROC C.glGetPixelMapuiv (VAL INT map, []INT values) = 0"

--* Foreign function [@text glGetPixelMapuiv].
-- @param map Argument with type [@text GLenum].
-- @param values Array pointer argument with element type [@text GLuint].
INLINE PROC glGetPixelMapuiv (VAL INT map, []INT values)
  C.glGetPixelMapuiv (map, values)
:

#PRAGMA EXTERNAL "PROC C.glGetPixelMapusv (VAL INT map, []INT16 values) = 0"

--* Foreign function [@text glGetPixelMapusv].
-- @param map Argument with type [@text GLenum].
-- @param values Array pointer argument with element type [@text GLushort].
INLINE PROC glGetPixelMapusv (VAL INT map, []INT16 values)
  C.glGetPixelMapusv (map, values)
:

#PRAGMA EXTERNAL "PROC C.glBitmap (VAL INT width, VAL INT height, VAL REAL32 xorig, VAL REAL32 yorig, VAL REAL32 xmove, VAL REAL32 ymove, VAL []BYTE bitmap) = 0"

--* Foreign function [@text glBitmap].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
-- @param xorig Argument with type [@text GLfloat].
-- @param yorig Argument with type [@text GLfloat].
-- @param xmove Argument with type [@text GLfloat].
-- @param ymove Argument with type [@text GLfloat].
-- @param bitmap Array pointer argument with element type [@text GLubyte const].
INLINE PROC glBitmap (VAL INT width, VAL INT height, VAL REAL32 xorig, VAL REAL32 yorig, VAL REAL32 xmove, VAL REAL32 ymove, VAL []BYTE bitmap)
  C.glBitmap (width, height, xorig, yorig, xmove, ymove, bitmap)
:

#PRAGMA EXTERNAL "PROC C.glReadPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT format, VAL INT type, []INT pixels) = 0"

--* Foreign function [@text glReadPixels].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
-- @param format Argument with type [@text GLenum].
-- @param type Argument with type [@text GLenum].
-- @param pixels Array pointer argument with element type [@text GLvoid].
INLINE PROC glReadPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT format, VAL INT type, []INT pixels)
  C.glReadPixels (x, y, width, height, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glDrawPixels (VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* Foreign function [@text glDrawPixels].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
-- @param format Argument with type [@text GLenum].
-- @param type Argument with type [@text GLenum].
-- @param pixels Array pointer argument with element type [@text GLvoid const].
INLINE PROC glDrawPixels (VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glDrawPixels (width, height, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glCopyPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT type) = 0"

--* Foreign function [@text glCopyPixels].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
-- @param type Argument with type [@text GLenum].
INLINE PROC glCopyPixels (VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT type)
  C.glCopyPixels (x, y, width, height, type)
:

#PRAGMA EXTERNAL "PROC C.glStencilFunc (VAL INT func, VAL INT ref, VAL INT mask) = 0"

--* Foreign function [@text glStencilFunc].
-- @param func Argument with type [@text GLenum].
-- @param ref Argument with type [@text GLint].
-- @param mask Argument with type [@text GLuint].
INLINE PROC glStencilFunc (VAL INT func, VAL INT ref, VAL INT mask)
  C.glStencilFunc (func, ref, mask)
:

#PRAGMA EXTERNAL "PROC C.glStencilMask (VAL INT mask) = 0"

--* Foreign function [@text glStencilMask].
-- @param mask Argument with type [@text GLuint].
INLINE PROC glStencilMask (VAL INT mask)
  C.glStencilMask (mask)
:

#PRAGMA EXTERNAL "PROC C.glStencilOp (VAL INT fail, VAL INT zfail, VAL INT zpass) = 0"

--* Foreign function [@text glStencilOp].
-- @param fail Argument with type [@text GLenum].
-- @param zfail Argument with type [@text GLenum].
-- @param zpass Argument with type [@text GLenum].
INLINE PROC glStencilOp (VAL INT fail, VAL INT zfail, VAL INT zpass)
  C.glStencilOp (fail, zfail, zpass)
:

#PRAGMA EXTERNAL "PROC C.glClearStencil (VAL INT s) = 0"

--* Foreign function [@text glClearStencil].
-- @param s Argument with type [@text GLint].
INLINE PROC glClearStencil (VAL INT s)
  C.glClearStencil (s)
:

#PRAGMA EXTERNAL "PROC C.glTexGend (VAL INT coord, VAL INT pname, VAL REAL64 param) = 0"

--* Foreign function [@text glTexGend].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLdouble].
INLINE PROC glTexGend (VAL INT coord, VAL INT pname, VAL REAL64 param)
  C.glTexGend (coord, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexGenf (VAL INT coord, VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glTexGenf].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glTexGenf (VAL INT coord, VAL INT pname, VAL REAL32 param)
  C.glTexGenf (coord, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexGeni (VAL INT coord, VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glTexGeni].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glTexGeni (VAL INT coord, VAL INT pname, VAL INT param)
  C.glTexGeni (coord, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexGendv (VAL INT coord, VAL INT pname, REAL64 params) = 0"

--* Foreign function [@text glTexGendv].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLdouble const *].
INLINE PROC glTexGendv (VAL INT coord, VAL INT pname, REAL64 params)
  C.glTexGendv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexGenfv (VAL INT coord, VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glTexGenfv].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat const *].
INLINE PROC glTexGenfv (VAL INT coord, VAL INT pname, REAL32 params)
  C.glTexGenfv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexGeniv (VAL INT coord, VAL INT pname, INT params) = 0"

--* Foreign function [@text glTexGeniv].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint const *].
INLINE PROC glTexGeniv (VAL INT coord, VAL INT pname, INT params)
  C.glTexGeniv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexGendv (VAL INT coord, VAL INT pname, REAL64 params) = 0"

--* Foreign function [@text glGetTexGendv].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLdouble *].
INLINE PROC glGetTexGendv (VAL INT coord, VAL INT pname, REAL64 params)
  C.glGetTexGendv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexGenfv (VAL INT coord, VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glGetTexGenfv].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat *].
INLINE PROC glGetTexGenfv (VAL INT coord, VAL INT pname, REAL32 params)
  C.glGetTexGenfv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexGeniv (VAL INT coord, VAL INT pname, INT params) = 0"

--* Foreign function [@text glGetTexGeniv].
-- @param coord Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint *].
INLINE PROC glGetTexGeniv (VAL INT coord, VAL INT pname, INT params)
  C.glGetTexGeniv (coord, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexEnvf (VAL INT target, VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glTexEnvf].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glTexEnvf (VAL INT target, VAL INT pname, VAL REAL32 param)
  C.glTexEnvf (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexEnvi (VAL INT target, VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glTexEnvi].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glTexEnvi (VAL INT target, VAL INT pname, VAL INT param)
  C.glTexEnvi (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexEnvfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glTexEnvfv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat const *].
INLINE PROC glTexEnvfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glTexEnvfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexEnviv (VAL INT target, VAL INT pname, INT params) = 0"

--* Foreign function [@text glTexEnviv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint const *].
INLINE PROC glTexEnviv (VAL INT target, VAL INT pname, INT params)
  C.glTexEnviv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexEnvfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glGetTexEnvfv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat *].
INLINE PROC glGetTexEnvfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glGetTexEnvfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexEnviv (VAL INT target, VAL INT pname, INT params) = 0"

--* Foreign function [@text glGetTexEnviv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint *].
INLINE PROC glGetTexEnviv (VAL INT target, VAL INT pname, INT params)
  C.glGetTexEnviv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexParameterf (VAL INT target, VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glTexParameterf].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glTexParameterf (VAL INT target, VAL INT pname, VAL REAL32 param)
  C.glTexParameterf (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexParameteri (VAL INT target, VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glTexParameteri].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glTexParameteri (VAL INT target, VAL INT pname, VAL INT param)
  C.glTexParameteri (target, pname, param)
:

#PRAGMA EXTERNAL "PROC C.glTexParameterfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glTexParameterfv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat const *].
INLINE PROC glTexParameterfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glTexParameterfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexParameteriv (VAL INT target, VAL INT pname, INT params) = 0"

--* Foreign function [@text glTexParameteriv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint const *].
INLINE PROC glTexParameteriv (VAL INT target, VAL INT pname, INT params)
  C.glTexParameteriv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexParameterfv (VAL INT target, VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glGetTexParameterfv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat *].
INLINE PROC glGetTexParameterfv (VAL INT target, VAL INT pname, REAL32 params)
  C.glGetTexParameterfv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexParameteriv (VAL INT target, VAL INT pname, INT params) = 0"

--* Foreign function [@text glGetTexParameteriv].
-- @param target Argument with type [@text GLenum].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint *].
INLINE PROC glGetTexParameteriv (VAL INT target, VAL INT pname, INT params)
  C.glGetTexParameteriv (target, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexLevelParameterfv (VAL INT target, VAL INT level, VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glGetTexLevelParameterfv].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat *].
INLINE PROC glGetTexLevelParameterfv (VAL INT target, VAL INT level, VAL INT pname, REAL32 params)
  C.glGetTexLevelParameterfv (target, level, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glGetTexLevelParameteriv (VAL INT target, VAL INT level, VAL INT pname, INT params) = 0"

--* Foreign function [@text glGetTexLevelParameteriv].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint *].
INLINE PROC glGetTexLevelParameteriv (VAL INT target, VAL INT level, VAL INT pname, INT params)
  C.glGetTexLevelParameteriv (target, level, pname, params)
:

#PRAGMA EXTERNAL "PROC C.glTexImage1D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* Foreign function [@text glTexImage1D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param internalFormat Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param border Argument with type [@text GLint].
-- @param format Argument with type [@text GLenum].
-- @param type Argument with type [@text GLenum].
-- @param pixels Array pointer argument with element type [@text GLvoid const].
INLINE PROC glTexImage1D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexImage1D (target, level, internalFormat, width, border, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glTexImage2D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT height, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* Foreign function [@text glTexImage2D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param internalFormat Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
-- @param border Argument with type [@text GLint].
-- @param format Argument with type [@text GLenum].
-- @param type Argument with type [@text GLenum].
-- @param pixels Array pointer argument with element type [@text GLvoid const].
INLINE PROC glTexImage2D (VAL INT target, VAL INT level, VAL INT internalFormat, VAL INT width, VAL INT height, VAL INT border, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexImage2D (target, level, internalFormat, width, height, border, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glGetTexImage (VAL INT target, VAL INT level, VAL INT format, VAL INT type, []INT pixels) = 0"

--* Foreign function [@text glGetTexImage].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param format Argument with type [@text GLenum].
-- @param type Argument with type [@text GLenum].
-- @param pixels Array pointer argument with element type [@text GLvoid].
INLINE PROC glGetTexImage (VAL INT target, VAL INT level, VAL INT format, VAL INT type, []INT pixels)
  C.glGetTexImage (target, level, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glGenTextures (VAL INT n, []INT textures) = 0"

--* Foreign function [@text glGenTextures].
-- @param n Argument with type [@text GLsizei].
-- @param textures Array pointer argument with element type [@text GLuint].
INLINE PROC glGenTextures (VAL INT n, []INT textures)
  C.glGenTextures (n, textures)
:

#PRAGMA EXTERNAL "PROC C.glDeleteTextures (VAL INT n, VAL []INT textures) = 0"

--* Foreign function [@text glDeleteTextures].
-- @param n Argument with type [@text GLsizei].
-- @param textures Array pointer argument with element type [@text GLuint const].
INLINE PROC glDeleteTextures (VAL INT n, VAL []INT textures)
  C.glDeleteTextures (n, textures)
:

#PRAGMA EXTERNAL "PROC C.glBindTexture (VAL INT target, VAL INT texture) = 0"

--* Foreign function [@text glBindTexture].
-- @param target Argument with type [@text GLenum].
-- @param texture Argument with type [@text GLuint].
INLINE PROC glBindTexture (VAL INT target, VAL INT texture)
  C.glBindTexture (target, texture)
:

#PRAGMA EXTERNAL "PROC C.glPrioritizeTextures (VAL INT n, VAL []INT textures, REAL32 priorities) = 0"

--* Foreign function [@text glPrioritizeTextures].
-- @param n Argument with type [@text GLsizei].
-- @param textures Array pointer argument with element type [@text GLuint const].
-- @param priorities Argument with type [@text GLclampf const *].
INLINE PROC glPrioritizeTextures (VAL INT n, VAL []INT textures, REAL32 priorities)
  C.glPrioritizeTextures (n, textures, priorities)
:

#PRAGMA EXTERNAL "PROC C.glAreTexturesResident (RESULT BYTE return.value, VAL INT n, VAL []INT textures, BYTE residences) = 0"

--* Foreign function [@text glAreTexturesResident].
-- @param return.value Function return value with type [@text GLboolean].
-- @param n Argument with type [@text GLsizei].
-- @param textures Array pointer argument with element type [@text GLuint const].
-- @param residences Argument with type [@text GLboolean *].
INLINE PROC glAreTexturesResident (RESULT BYTE return.value, VAL INT n, VAL []INT textures, BYTE residences)
  C.glAreTexturesResident (return.value, n, textures, residences)
:

#PRAGMA EXTERNAL "PROC C.glIsTexture (RESULT BYTE return.value, VAL INT texture) = 0"

--* Foreign function [@text glIsTexture].
-- @param return.value Function return value with type [@text GLboolean].
-- @param texture Argument with type [@text GLuint].
INLINE PROC glIsTexture (RESULT BYTE return.value, VAL INT texture)
  C.glIsTexture (return.value, texture)
:

#PRAGMA EXTERNAL "PROC C.glTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT width, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* Foreign function [@text glTexSubImage1D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param xoffset Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param format Argument with type [@text GLenum].
-- @param type Argument with type [@text GLenum].
-- @param pixels Array pointer argument with element type [@text GLvoid const].
INLINE PROC glTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT width, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexSubImage1D (target, level, xoffset, width, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels) = 0"

--* Foreign function [@text glTexSubImage2D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param xoffset Argument with type [@text GLint].
-- @param yoffset Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
-- @param format Argument with type [@text GLenum].
-- @param type Argument with type [@text GLenum].
-- @param pixels Array pointer argument with element type [@text GLvoid const].
INLINE PROC glTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT width, VAL INT height, VAL INT format, VAL INT type, VAL []INT pixels)
  C.glTexSubImage2D (target, level, xoffset, yoffset, width, height, format, type, pixels)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexImage1D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT border) = 0"

--* Foreign function [@text glCopyTexImage1D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param internalformat Argument with type [@text GLenum].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param border Argument with type [@text GLint].
INLINE PROC glCopyTexImage1D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT border)
  C.glCopyTexImage1D (target, level, internalformat, x, y, width, border)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexImage2D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT border) = 0"

--* Foreign function [@text glCopyTexImage2D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param internalformat Argument with type [@text GLenum].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
-- @param border Argument with type [@text GLint].
INLINE PROC glCopyTexImage2D (VAL INT target, VAL INT level, VAL INT internalformat, VAL INT x, VAL INT y, VAL INT width, VAL INT height, VAL INT border)
  C.glCopyTexImage2D (target, level, internalformat, x, y, width, height, border)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT x, VAL INT y, VAL INT width) = 0"

--* Foreign function [@text glCopyTexSubImage1D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param xoffset Argument with type [@text GLint].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
INLINE PROC glCopyTexSubImage1D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT x, VAL INT y, VAL INT width)
  C.glCopyTexSubImage1D (target, level, xoffset, x, y, width)
:

#PRAGMA EXTERNAL "PROC C.glCopyTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT x, VAL INT y, VAL INT width, VAL INT height) = 0"

--* Foreign function [@text glCopyTexSubImage2D].
-- @param target Argument with type [@text GLenum].
-- @param level Argument with type [@text GLint].
-- @param xoffset Argument with type [@text GLint].
-- @param yoffset Argument with type [@text GLint].
-- @param x Argument with type [@text GLint].
-- @param y Argument with type [@text GLint].
-- @param width Argument with type [@text GLsizei].
-- @param height Argument with type [@text GLsizei].
INLINE PROC glCopyTexSubImage2D (VAL INT target, VAL INT level, VAL INT xoffset, VAL INT yoffset, VAL INT x, VAL INT y, VAL INT width, VAL INT height)
  C.glCopyTexSubImage2D (target, level, xoffset, yoffset, x, y, width, height)
:

#PRAGMA EXTERNAL "PROC C.glMap1d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT stride, VAL INT order, REAL64 points) = 0"

--* Foreign function [@text glMap1d].
-- @param target Argument with type [@text GLenum].
-- @param u1 Argument with type [@text GLdouble].
-- @param u2 Argument with type [@text GLdouble].
-- @param stride Argument with type [@text GLint].
-- @param order Argument with type [@text GLint].
-- @param points Argument with type [@text GLdouble const *].
INLINE PROC glMap1d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT stride, VAL INT order, REAL64 points)
  C.glMap1d (target, u1, u2, stride, order, points)
:

#PRAGMA EXTERNAL "PROC C.glMap1f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT stride, VAL INT order, REAL32 points) = 0"

--* Foreign function [@text glMap1f].
-- @param target Argument with type [@text GLenum].
-- @param u1 Argument with type [@text GLfloat].
-- @param u2 Argument with type [@text GLfloat].
-- @param stride Argument with type [@text GLint].
-- @param order Argument with type [@text GLint].
-- @param points Argument with type [@text GLfloat const *].
INLINE PROC glMap1f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT stride, VAL INT order, REAL32 points)
  C.glMap1f (target, u1, u2, stride, order, points)
:

#PRAGMA EXTERNAL "PROC C.glMap2d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT ustride, VAL INT uorder, VAL REAL64 v1, VAL REAL64 v2, VAL INT vstride, VAL INT vorder, REAL64 points) = 0"

--* Foreign function [@text glMap2d].
-- @param target Argument with type [@text GLenum].
-- @param u1 Argument with type [@text GLdouble].
-- @param u2 Argument with type [@text GLdouble].
-- @param ustride Argument with type [@text GLint].
-- @param uorder Argument with type [@text GLint].
-- @param v1 Argument with type [@text GLdouble].
-- @param v2 Argument with type [@text GLdouble].
-- @param vstride Argument with type [@text GLint].
-- @param vorder Argument with type [@text GLint].
-- @param points Argument with type [@text GLdouble const *].
INLINE PROC glMap2d (VAL INT target, VAL REAL64 u1, VAL REAL64 u2, VAL INT ustride, VAL INT uorder, VAL REAL64 v1, VAL REAL64 v2, VAL INT vstride, VAL INT vorder, REAL64 points)
  C.glMap2d (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
:

#PRAGMA EXTERNAL "PROC C.glMap2f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT ustride, VAL INT uorder, VAL REAL32 v1, VAL REAL32 v2, VAL INT vstride, VAL INT vorder, REAL32 points) = 0"

--* Foreign function [@text glMap2f].
-- @param target Argument with type [@text GLenum].
-- @param u1 Argument with type [@text GLfloat].
-- @param u2 Argument with type [@text GLfloat].
-- @param ustride Argument with type [@text GLint].
-- @param uorder Argument with type [@text GLint].
-- @param v1 Argument with type [@text GLfloat].
-- @param v2 Argument with type [@text GLfloat].
-- @param vstride Argument with type [@text GLint].
-- @param vorder Argument with type [@text GLint].
-- @param points Argument with type [@text GLfloat const *].
INLINE PROC glMap2f (VAL INT target, VAL REAL32 u1, VAL REAL32 u2, VAL INT ustride, VAL INT uorder, VAL REAL32 v1, VAL REAL32 v2, VAL INT vstride, VAL INT vorder, REAL32 points)
  C.glMap2f (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
:

#PRAGMA EXTERNAL "PROC C.glGetMapdv (VAL INT target, VAL INT query, []REAL64 v) = 0"

--* Foreign function [@text glGetMapdv].
-- @param target Argument with type [@text GLenum].
-- @param query Argument with type [@text GLenum].
-- @param v Array pointer argument with element type [@text GLdouble].
INLINE PROC glGetMapdv (VAL INT target, VAL INT query, []REAL64 v)
  C.glGetMapdv (target, query, v)
:

#PRAGMA EXTERNAL "PROC C.glGetMapfv (VAL INT target, VAL INT query, []REAL32 v) = 0"

--* Foreign function [@text glGetMapfv].
-- @param target Argument with type [@text GLenum].
-- @param query Argument with type [@text GLenum].
-- @param v Array pointer argument with element type [@text GLfloat].
INLINE PROC glGetMapfv (VAL INT target, VAL INT query, []REAL32 v)
  C.glGetMapfv (target, query, v)
:

#PRAGMA EXTERNAL "PROC C.glGetMapiv (VAL INT target, VAL INT query, []INT v) = 0"

--* Foreign function [@text glGetMapiv].
-- @param target Argument with type [@text GLenum].
-- @param query Argument with type [@text GLenum].
-- @param v Array pointer argument with element type [@text GLint].
INLINE PROC glGetMapiv (VAL INT target, VAL INT query, []INT v)
  C.glGetMapiv (target, query, v)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1d (VAL REAL64 u) = 0"

--* Foreign function [@text glEvalCoord1d].
-- @param u Argument with type [@text GLdouble].
INLINE PROC glEvalCoord1d (VAL REAL64 u)
  C.glEvalCoord1d (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1f (VAL REAL32 u) = 0"

--* Foreign function [@text glEvalCoord1f].
-- @param u Argument with type [@text GLfloat].
INLINE PROC glEvalCoord1f (VAL REAL32 u)
  C.glEvalCoord1f (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1dv (VAL [1]REAL64 u) = 0"

--* Foreign function [@text glEvalCoord1dv].
-- @param u Array pointer argument with element type [@text GLdouble const].
INLINE PROC glEvalCoord1dv (VAL [1]REAL64 u)
  C.glEvalCoord1dv (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord1fv (VAL [1]REAL32 u) = 0"

--* Foreign function [@text glEvalCoord1fv].
-- @param u Array pointer argument with element type [@text GLfloat const].
INLINE PROC glEvalCoord1fv (VAL [1]REAL32 u)
  C.glEvalCoord1fv (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2d (VAL REAL64 u, VAL REAL64 v) = 0"

--* Foreign function [@text glEvalCoord2d].
-- @param u Argument with type [@text GLdouble].
-- @param v Argument with type [@text GLdouble].
INLINE PROC glEvalCoord2d (VAL REAL64 u, VAL REAL64 v)
  C.glEvalCoord2d (u, v)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2f (VAL REAL32 u, VAL REAL32 v) = 0"

--* Foreign function [@text glEvalCoord2f].
-- @param u Argument with type [@text GLfloat].
-- @param v Argument with type [@text GLfloat].
INLINE PROC glEvalCoord2f (VAL REAL32 u, VAL REAL32 v)
  C.glEvalCoord2f (u, v)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2dv (VAL [2]REAL64 u) = 0"

--* Foreign function [@text glEvalCoord2dv].
-- @param u Array pointer argument with element type [@text GLdouble const].
INLINE PROC glEvalCoord2dv (VAL [2]REAL64 u)
  C.glEvalCoord2dv (u)
:

#PRAGMA EXTERNAL "PROC C.glEvalCoord2fv (VAL [2]REAL32 u) = 0"

--* Foreign function [@text glEvalCoord2fv].
-- @param u Array pointer argument with element type [@text GLfloat const].
INLINE PROC glEvalCoord2fv (VAL [2]REAL32 u)
  C.glEvalCoord2fv (u)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid1d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2) = 0"

--* Foreign function [@text glMapGrid1d].
-- @param un Argument with type [@text GLint].
-- @param u1 Argument with type [@text GLdouble].
-- @param u2 Argument with type [@text GLdouble].
INLINE PROC glMapGrid1d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2)
  C.glMapGrid1d (un, u1, u2)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid1f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2) = 0"

--* Foreign function [@text glMapGrid1f].
-- @param un Argument with type [@text GLint].
-- @param u1 Argument with type [@text GLfloat].
-- @param u2 Argument with type [@text GLfloat].
INLINE PROC glMapGrid1f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2)
  C.glMapGrid1f (un, u1, u2)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid2d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2, VAL INT vn, VAL REAL64 v1, VAL REAL64 v2) = 0"

--* Foreign function [@text glMapGrid2d].
-- @param un Argument with type [@text GLint].
-- @param u1 Argument with type [@text GLdouble].
-- @param u2 Argument with type [@text GLdouble].
-- @param vn Argument with type [@text GLint].
-- @param v1 Argument with type [@text GLdouble].
-- @param v2 Argument with type [@text GLdouble].
INLINE PROC glMapGrid2d (VAL INT un, VAL REAL64 u1, VAL REAL64 u2, VAL INT vn, VAL REAL64 v1, VAL REAL64 v2)
  C.glMapGrid2d (un, u1, u2, vn, v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glMapGrid2f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2, VAL INT vn, VAL REAL32 v1, VAL REAL32 v2) = 0"

--* Foreign function [@text glMapGrid2f].
-- @param un Argument with type [@text GLint].
-- @param u1 Argument with type [@text GLfloat].
-- @param u2 Argument with type [@text GLfloat].
-- @param vn Argument with type [@text GLint].
-- @param v1 Argument with type [@text GLfloat].
-- @param v2 Argument with type [@text GLfloat].
INLINE PROC glMapGrid2f (VAL INT un, VAL REAL32 u1, VAL REAL32 u2, VAL INT vn, VAL REAL32 v1, VAL REAL32 v2)
  C.glMapGrid2f (un, u1, u2, vn, v1, v2)
:

#PRAGMA EXTERNAL "PROC C.glEvalPoint1 (VAL INT i) = 0"

--* Foreign function [@text glEvalPoint1].
-- @param i Argument with type [@text GLint].
INLINE PROC glEvalPoint1 (VAL INT i)
  C.glEvalPoint1 (i)
:

#PRAGMA EXTERNAL "PROC C.glEvalPoint2 (VAL INT i, VAL INT j) = 0"

--* Foreign function [@text glEvalPoint2].
-- @param i Argument with type [@text GLint].
-- @param j Argument with type [@text GLint].
INLINE PROC glEvalPoint2 (VAL INT i, VAL INT j)
  C.glEvalPoint2 (i, j)
:

#PRAGMA EXTERNAL "PROC C.glEvalMesh1 (VAL INT mode, VAL INT i1, VAL INT i2) = 0"

--* Foreign function [@text glEvalMesh1].
-- @param mode Argument with type [@text GLenum].
-- @param i1 Argument with type [@text GLint].
-- @param i2 Argument with type [@text GLint].
INLINE PROC glEvalMesh1 (VAL INT mode, VAL INT i1, VAL INT i2)
  C.glEvalMesh1 (mode, i1, i2)
:

#PRAGMA EXTERNAL "PROC C.glEvalMesh2 (VAL INT mode, VAL INT i1, VAL INT i2, VAL INT j1, VAL INT j2) = 0"

--* Foreign function [@text glEvalMesh2].
-- @param mode Argument with type [@text GLenum].
-- @param i1 Argument with type [@text GLint].
-- @param i2 Argument with type [@text GLint].
-- @param j1 Argument with type [@text GLint].
-- @param j2 Argument with type [@text GLint].
INLINE PROC glEvalMesh2 (VAL INT mode, VAL INT i1, VAL INT i2, VAL INT j1, VAL INT j2)
  C.glEvalMesh2 (mode, i1, i2, j1, j2)
:

#PRAGMA EXTERNAL "PROC C.glFogf (VAL INT pname, VAL REAL32 param) = 0"

--* Foreign function [@text glFogf].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLfloat].
INLINE PROC glFogf (VAL INT pname, VAL REAL32 param)
  C.glFogf (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glFogi (VAL INT pname, VAL INT param) = 0"

--* Foreign function [@text glFogi].
-- @param pname Argument with type [@text GLenum].
-- @param param Argument with type [@text GLint].
INLINE PROC glFogi (VAL INT pname, VAL INT param)
  C.glFogi (pname, param)
:

#PRAGMA EXTERNAL "PROC C.glFogfv (VAL INT pname, REAL32 params) = 0"

--* Foreign function [@text glFogfv].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLfloat const *].
INLINE PROC glFogfv (VAL INT pname, REAL32 params)
  C.glFogfv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glFogiv (VAL INT pname, INT params) = 0"

--* Foreign function [@text glFogiv].
-- @param pname Argument with type [@text GLenum].
-- @param params Argument with type [@text GLint const *].
INLINE PROC glFogiv (VAL INT pname, INT params)
  C.glFogiv (pname, params)
:

#PRAGMA EXTERNAL "PROC C.glFeedbackBuffer (VAL INT size, VAL INT type, REAL32 buffer) = 0"

--* Foreign function [@text glFeedbackBuffer].
-- @param size Argument with type [@text GLsizei].
-- @param type Argument with type [@text GLenum].
-- @param buffer Argument with type [@text GLfloat *].
INLINE PROC glFeedbackBuffer (VAL INT size, VAL INT type, REAL32 buffer)
  C.glFeedbackBuffer (size, type, buffer)
:

#PRAGMA EXTERNAL "PROC C.glPassThrough (VAL REAL32 token) = 0"

--* Foreign function [@text glPassThrough].
-- @param token Argument with type [@text GLfloat].
INLINE PROC glPassThrough (VAL REAL32 token)
  C.glPassThrough (token)
:

#PRAGMA EXTERNAL "PROC C.glSelectBuffer (VAL INT size, INT buffer) = 0"

--* Foreign function [@text glSelectBuffer].
-- @param size Argument with type [@text GLsizei].
-- @param buffer Argument with type [@text GLuint *].
INLINE PROC glSelectBuffer (VAL INT size, INT buffer)
  C.glSelectBuffer (size, buffer)
:

#PRAGMA EXTERNAL "PROC C.glInitNames () = 0"

--* Foreign function [@text glInitNames].
INLINE PROC glInitNames ()
  C.glInitNames ()
:

#PRAGMA EXTERNAL "PROC C.glLoadName (VAL INT name) = 0"

--* Foreign function [@text glLoadName].
-- @param name Argument with type [@text GLuint].
INLINE PROC glLoadName (VAL INT name)
  C.glLoadName (name)
:

#PRAGMA EXTERNAL "PROC C.glPushName (VAL INT name) = 0"

--* Foreign function [@text glPushName].
-- @param name Argument with type [@text GLuint].
INLINE PROC glPushName (VAL INT name)
  C.glPushName (name)
:

#PRAGMA EXTERNAL "PROC C.glPopName () = 0"

--* Foreign function [@text glPopName].
INLINE PROC glPopName ()
  C.glPopName ()
:

--* Foreign [@text int] constant [@text GL_MESA_ycbcr_texture].
VAL INT GL.MESA.ycbcr.texture IS 1:
--* Foreign [@text int] constant [@text GL_YCBCR_MESA].
VAL INT GL.YCBCR.MESA IS #8757:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_8_8_MESA].
VAL INT GL.UNSIGNED.SHORT.8.8.MESA IS #85BA:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_8_8_REV_MESA].
VAL INT GL.UNSIGNED.SHORT.8.8.REV.MESA IS #85BB:
--* Foreign [@text int] constant [@text GL_MESA_pack_invert].
VAL INT GL.MESA.pack.invert IS 1:
--* Foreign [@text int] constant [@text GL_PACK_INVERT_MESA].
VAL INT GL.PACK.INVERT.MESA IS #8758:
--* Foreign [@text int] constant [@text GL_APPLE_client_storage].
VAL INT GL.APPLE.client.storage IS 1:
--* Foreign [@text int] constant [@text GL_UNPACK_CLIENT_STORAGE_APPLE].
VAL INT GL.UNPACK.CLIENT.STORAGE.APPLE IS #85B2:
--* Foreign [@text int] constant [@text GL_APPLE_ycbcr_422].
VAL INT GL.APPLE.ycbcr.422 IS 1:
--* Foreign [@text int] constant [@text GL_YCBCR_422_APPLE].
VAL INT GL.YCBCR.422.APPLE IS #85B9:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_8_8_APPLE].
VAL INT GL.UNSIGNED.SHORT.8.8.APPLE IS #85BA:
--* Foreign [@text int] constant [@text GL_UNSIGNED_SHORT_8_8_REV_APPLE].
VAL INT GL.UNSIGNED.SHORT.8.8.REV.APPLE IS #85BB:
--* Foreign [@text int] constant [@text GLU_EXT_object_space_tess].
VAL INT GLU.EXT.object.space.tess IS 1:
--* Foreign [@text int] constant [@text GLU_EXT_nurbs_tessellator].
VAL INT GLU.EXT.nurbs.tessellator IS 1:
--* Foreign [@text int] constant [@text GLU_FALSE].
VAL INT GLU.FALSE IS 0:
--* Foreign [@text int] constant [@text GLU_TRUE].
VAL INT GLU.TRUE IS 1:
--* Foreign [@text int] constant [@text GLU_VERSION_1_1].
VAL INT GLU.VERSION.1.1 IS 1:
--* Foreign [@text int] constant [@text GLU_VERSION_1_2].
VAL INT GLU.VERSION.1.2 IS 1:
--* Foreign [@text int] constant [@text GLU_VERSION_1_3].
VAL INT GLU.VERSION.1.3 IS 1:
--* Foreign [@text int] constant [@text GLU_VERSION].
VAL INT GLU.VERSION IS 100800:
--* Foreign [@text int] constant [@text GLU_EXTENSIONS].
VAL INT GLU.EXTENSIONS IS 100801:
--* Foreign [@text int] constant [@text GLU_INVALID_ENUM].
VAL INT GLU.INVALID.ENUM IS 100900:
--* Foreign [@text int] constant [@text GLU_INVALID_VALUE].
VAL INT GLU.INVALID.VALUE IS 100901:
--* Foreign [@text int] constant [@text GLU_OUT_OF_MEMORY].
VAL INT GLU.OUT.OF.MEMORY IS 100902:
--* Foreign [@text int] constant [@text GLU_INVALID_OPERATION].
VAL INT GLU.INVALID.OPERATION IS 100904:
--* Foreign [@text int] constant [@text GLU_OUTLINE_POLYGON].
VAL INT GLU.OUTLINE.POLYGON IS 100240:
--* Foreign [@text int] constant [@text GLU_OUTLINE_PATCH].
VAL INT GLU.OUTLINE.PATCH IS 100241:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR].
VAL INT GLU.NURBS.ERROR IS 100103:
--* Foreign [@text int] constant [@text GLU_ERROR].
VAL INT GLU.ERROR IS 100103:
--* Foreign [@text int] constant [@text GLU_NURBS_BEGIN].
VAL INT GLU.NURBS.BEGIN IS 100164:
--* Foreign [@text int] constant [@text GLU_NURBS_BEGIN_EXT].
VAL INT GLU.NURBS.BEGIN.EXT IS 100164:
--* Foreign [@text int] constant [@text GLU_NURBS_VERTEX].
VAL INT GLU.NURBS.VERTEX IS 100165:
--* Foreign [@text int] constant [@text GLU_NURBS_VERTEX_EXT].
VAL INT GLU.NURBS.VERTEX.EXT IS 100165:
--* Foreign [@text int] constant [@text GLU_NURBS_NORMAL].
VAL INT GLU.NURBS.NORMAL IS 100166:
--* Foreign [@text int] constant [@text GLU_NURBS_NORMAL_EXT].
VAL INT GLU.NURBS.NORMAL.EXT IS 100166:
--* Foreign [@text int] constant [@text GLU_NURBS_COLOR].
VAL INT GLU.NURBS.COLOR IS 100167:
--* Foreign [@text int] constant [@text GLU_NURBS_COLOR_EXT].
VAL INT GLU.NURBS.COLOR.EXT IS 100167:
--* Foreign [@text int] constant [@text GLU_NURBS_TEXTURE_COORD].
VAL INT GLU.NURBS.TEXTURE.COORD IS 100168:
--* Foreign [@text int] constant [@text GLU_NURBS_TEX_COORD_EXT].
VAL INT GLU.NURBS.TEX.COORD.EXT IS 100168:
--* Foreign [@text int] constant [@text GLU_NURBS_END].
VAL INT GLU.NURBS.END IS 100169:
--* Foreign [@text int] constant [@text GLU_NURBS_END_EXT].
VAL INT GLU.NURBS.END.EXT IS 100169:
--* Foreign [@text int] constant [@text GLU_NURBS_BEGIN_DATA].
VAL INT GLU.NURBS.BEGIN.DATA IS 100170:
--* Foreign [@text int] constant [@text GLU_NURBS_BEGIN_DATA_EXT].
VAL INT GLU.NURBS.BEGIN.DATA.EXT IS 100170:
--* Foreign [@text int] constant [@text GLU_NURBS_VERTEX_DATA].
VAL INT GLU.NURBS.VERTEX.DATA IS 100171:
--* Foreign [@text int] constant [@text GLU_NURBS_VERTEX_DATA_EXT].
VAL INT GLU.NURBS.VERTEX.DATA.EXT IS 100171:
--* Foreign [@text int] constant [@text GLU_NURBS_NORMAL_DATA].
VAL INT GLU.NURBS.NORMAL.DATA IS 100172:
--* Foreign [@text int] constant [@text GLU_NURBS_NORMAL_DATA_EXT].
VAL INT GLU.NURBS.NORMAL.DATA.EXT IS 100172:
--* Foreign [@text int] constant [@text GLU_NURBS_COLOR_DATA].
VAL INT GLU.NURBS.COLOR.DATA IS 100173:
--* Foreign [@text int] constant [@text GLU_NURBS_COLOR_DATA_EXT].
VAL INT GLU.NURBS.COLOR.DATA.EXT IS 100173:
--* Foreign [@text int] constant [@text GLU_NURBS_TEXTURE_COORD_DATA].
VAL INT GLU.NURBS.TEXTURE.COORD.DATA IS 100174:
--* Foreign [@text int] constant [@text GLU_NURBS_TEX_COORD_DATA_EXT].
VAL INT GLU.NURBS.TEX.COORD.DATA.EXT IS 100174:
--* Foreign [@text int] constant [@text GLU_NURBS_END_DATA].
VAL INT GLU.NURBS.END.DATA IS 100175:
--* Foreign [@text int] constant [@text GLU_NURBS_END_DATA_EXT].
VAL INT GLU.NURBS.END.DATA.EXT IS 100175:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR1].
VAL INT GLU.NURBS.ERROR1 IS 100251:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR2].
VAL INT GLU.NURBS.ERROR2 IS 100252:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR3].
VAL INT GLU.NURBS.ERROR3 IS 100253:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR4].
VAL INT GLU.NURBS.ERROR4 IS 100254:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR5].
VAL INT GLU.NURBS.ERROR5 IS 100255:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR6].
VAL INT GLU.NURBS.ERROR6 IS 100256:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR7].
VAL INT GLU.NURBS.ERROR7 IS 100257:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR8].
VAL INT GLU.NURBS.ERROR8 IS 100258:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR9].
VAL INT GLU.NURBS.ERROR9 IS 100259:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR10].
VAL INT GLU.NURBS.ERROR10 IS 100260:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR11].
VAL INT GLU.NURBS.ERROR11 IS 100261:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR12].
VAL INT GLU.NURBS.ERROR12 IS 100262:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR13].
VAL INT GLU.NURBS.ERROR13 IS 100263:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR14].
VAL INT GLU.NURBS.ERROR14 IS 100264:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR15].
VAL INT GLU.NURBS.ERROR15 IS 100265:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR16].
VAL INT GLU.NURBS.ERROR16 IS 100266:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR17].
VAL INT GLU.NURBS.ERROR17 IS 100267:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR18].
VAL INT GLU.NURBS.ERROR18 IS 100268:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR19].
VAL INT GLU.NURBS.ERROR19 IS 100269:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR20].
VAL INT GLU.NURBS.ERROR20 IS 100270:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR21].
VAL INT GLU.NURBS.ERROR21 IS 100271:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR22].
VAL INT GLU.NURBS.ERROR22 IS 100272:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR23].
VAL INT GLU.NURBS.ERROR23 IS 100273:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR24].
VAL INT GLU.NURBS.ERROR24 IS 100274:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR25].
VAL INT GLU.NURBS.ERROR25 IS 100275:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR26].
VAL INT GLU.NURBS.ERROR26 IS 100276:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR27].
VAL INT GLU.NURBS.ERROR27 IS 100277:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR28].
VAL INT GLU.NURBS.ERROR28 IS 100278:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR29].
VAL INT GLU.NURBS.ERROR29 IS 100279:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR30].
VAL INT GLU.NURBS.ERROR30 IS 100280:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR31].
VAL INT GLU.NURBS.ERROR31 IS 100281:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR32].
VAL INT GLU.NURBS.ERROR32 IS 100282:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR33].
VAL INT GLU.NURBS.ERROR33 IS 100283:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR34].
VAL INT GLU.NURBS.ERROR34 IS 100284:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR35].
VAL INT GLU.NURBS.ERROR35 IS 100285:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR36].
VAL INT GLU.NURBS.ERROR36 IS 100286:
--* Foreign [@text int] constant [@text GLU_NURBS_ERROR37].
VAL INT GLU.NURBS.ERROR37 IS 100287:
--* Foreign [@text int] constant [@text GLU_AUTO_LOAD_MATRIX].
VAL INT GLU.AUTO.LOAD.MATRIX IS 100200:
--* Foreign [@text int] constant [@text GLU_CULLING].
VAL INT GLU.CULLING IS 100201:
--* Foreign [@text int] constant [@text GLU_SAMPLING_TOLERANCE].
VAL INT GLU.SAMPLING.TOLERANCE IS 100203:
--* Foreign [@text int] constant [@text GLU_DISPLAY_MODE].
VAL INT GLU.DISPLAY.MODE IS 100204:
--* Foreign [@text int] constant [@text GLU_PARAMETRIC_TOLERANCE].
VAL INT GLU.PARAMETRIC.TOLERANCE IS 100202:
--* Foreign [@text int] constant [@text GLU_SAMPLING_METHOD].
VAL INT GLU.SAMPLING.METHOD IS 100205:
--* Foreign [@text int] constant [@text GLU_U_STEP].
VAL INT GLU.U.STEP IS 100206:
--* Foreign [@text int] constant [@text GLU_V_STEP].
VAL INT GLU.V.STEP IS 100207:
--* Foreign [@text int] constant [@text GLU_NURBS_MODE].
VAL INT GLU.NURBS.MODE IS 100160:
--* Foreign [@text int] constant [@text GLU_NURBS_MODE_EXT].
VAL INT GLU.NURBS.MODE.EXT IS 100160:
--* Foreign [@text int] constant [@text GLU_NURBS_TESSELLATOR].
VAL INT GLU.NURBS.TESSELLATOR IS 100161:
--* Foreign [@text int] constant [@text GLU_NURBS_TESSELLATOR_EXT].
VAL INT GLU.NURBS.TESSELLATOR.EXT IS 100161:
--* Foreign [@text int] constant [@text GLU_NURBS_RENDERER].
VAL INT GLU.NURBS.RENDERER IS 100162:
--* Foreign [@text int] constant [@text GLU_NURBS_RENDERER_EXT].
VAL INT GLU.NURBS.RENDERER.EXT IS 100162:
--* Foreign [@text int] constant [@text GLU_OBJECT_PARAMETRIC_ERROR].
VAL INT GLU.OBJECT.PARAMETRIC.ERROR IS 100208:
--* Foreign [@text int] constant [@text GLU_OBJECT_PARAMETRIC_ERROR_EXT].
VAL INT GLU.OBJECT.PARAMETRIC.ERROR.EXT IS 100208:
--* Foreign [@text int] constant [@text GLU_OBJECT_PATH_LENGTH].
VAL INT GLU.OBJECT.PATH.LENGTH IS 100209:
--* Foreign [@text int] constant [@text GLU_OBJECT_PATH_LENGTH_EXT].
VAL INT GLU.OBJECT.PATH.LENGTH.EXT IS 100209:
--* Foreign [@text int] constant [@text GLU_PATH_LENGTH].
VAL INT GLU.PATH.LENGTH IS 100215:
--* Foreign [@text int] constant [@text GLU_PARAMETRIC_ERROR].
VAL INT GLU.PARAMETRIC.ERROR IS 100216:
--* Foreign [@text int] constant [@text GLU_DOMAIN_DISTANCE].
VAL INT GLU.DOMAIN.DISTANCE IS 100217:
--* Foreign [@text int] constant [@text GLU_MAP1_TRIM_2].
VAL INT GLU.MAP1.TRIM.2 IS 100210:
--* Foreign [@text int] constant [@text GLU_MAP1_TRIM_3].
VAL INT GLU.MAP1.TRIM.3 IS 100211:
--* Foreign [@text int] constant [@text GLU_POINT].
VAL INT GLU.POINT IS 100010:
--* Foreign [@text int] constant [@text GLU_LINE].
VAL INT GLU.LINE IS 100011:
--* Foreign [@text int] constant [@text GLU_FILL].
VAL INT GLU.FILL IS 100012:
--* Foreign [@text int] constant [@text GLU_SILHOUETTE].
VAL INT GLU.SILHOUETTE IS 100013:
--* Foreign [@text int] constant [@text GLU_SMOOTH].
VAL INT GLU.SMOOTH IS 100000:
--* Foreign [@text int] constant [@text GLU_FLAT].
VAL INT GLU.FLAT IS 100001:
--* Foreign [@text int] constant [@text GLU_NONE].
VAL INT GLU.NONE IS 100002:
--* Foreign [@text int] constant [@text GLU_OUTSIDE].
VAL INT GLU.OUTSIDE IS 100020:
--* Foreign [@text int] constant [@text GLU_INSIDE].
VAL INT GLU.INSIDE IS 100021:
--* Foreign [@text int] constant [@text GLU_TESS_BEGIN].
VAL INT GLU.TESS.BEGIN IS 100100:
--* Foreign [@text int] constant [@text GLU_BEGIN].
VAL INT GLU.BEGIN IS 100100:
--* Foreign [@text int] constant [@text GLU_TESS_VERTEX].
VAL INT GLU.TESS.VERTEX IS 100101:
--* Foreign [@text int] constant [@text GLU_VERTEX].
VAL INT GLU.VERTEX IS 100101:
--* Foreign [@text int] constant [@text GLU_TESS_END].
VAL INT GLU.TESS.END IS 100102:
--* Foreign [@text int] constant [@text GLU_END].
VAL INT GLU.END IS 100102:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR].
VAL INT GLU.TESS.ERROR IS 100103:
--* Foreign [@text int] constant [@text GLU_TESS_EDGE_FLAG].
VAL INT GLU.TESS.EDGE.FLAG IS 100104:
--* Foreign [@text int] constant [@text GLU_EDGE_FLAG].
VAL INT GLU.EDGE.FLAG IS 100104:
--* Foreign [@text int] constant [@text GLU_TESS_COMBINE].
VAL INT GLU.TESS.COMBINE IS 100105:
--* Foreign [@text int] constant [@text GLU_TESS_BEGIN_DATA].
VAL INT GLU.TESS.BEGIN.DATA IS 100106:
--* Foreign [@text int] constant [@text GLU_TESS_VERTEX_DATA].
VAL INT GLU.TESS.VERTEX.DATA IS 100107:
--* Foreign [@text int] constant [@text GLU_TESS_END_DATA].
VAL INT GLU.TESS.END.DATA IS 100108:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR_DATA].
VAL INT GLU.TESS.ERROR.DATA IS 100109:
--* Foreign [@text int] constant [@text GLU_TESS_EDGE_FLAG_DATA].
VAL INT GLU.TESS.EDGE.FLAG.DATA IS 100110:
--* Foreign [@text int] constant [@text GLU_TESS_COMBINE_DATA].
VAL INT GLU.TESS.COMBINE.DATA IS 100111:
--* Foreign [@text int] constant [@text GLU_CW].
VAL INT GLU.CW IS 100120:
--* Foreign [@text int] constant [@text GLU_CCW].
VAL INT GLU.CCW IS 100121:
--* Foreign [@text int] constant [@text GLU_INTERIOR].
VAL INT GLU.INTERIOR IS 100122:
--* Foreign [@text int] constant [@text GLU_EXTERIOR].
VAL INT GLU.EXTERIOR IS 100123:
--* Foreign [@text int] constant [@text GLU_UNKNOWN].
VAL INT GLU.UNKNOWN IS 100124:
--* Foreign [@text int] constant [@text GLU_TESS_WINDING_RULE].
VAL INT GLU.TESS.WINDING.RULE IS 100140:
--* Foreign [@text int] constant [@text GLU_TESS_BOUNDARY_ONLY].
VAL INT GLU.TESS.BOUNDARY.ONLY IS 100141:
--* Foreign [@text int] constant [@text GLU_TESS_TOLERANCE].
VAL INT GLU.TESS.TOLERANCE IS 100142:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR1].
VAL INT GLU.TESS.ERROR1 IS 100151:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR2].
VAL INT GLU.TESS.ERROR2 IS 100152:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR3].
VAL INT GLU.TESS.ERROR3 IS 100153:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR4].
VAL INT GLU.TESS.ERROR4 IS 100154:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR5].
VAL INT GLU.TESS.ERROR5 IS 100155:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR6].
VAL INT GLU.TESS.ERROR6 IS 100156:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR7].
VAL INT GLU.TESS.ERROR7 IS 100157:
--* Foreign [@text int] constant [@text GLU_TESS_ERROR8].
VAL INT GLU.TESS.ERROR8 IS 100158:
--* Foreign [@text int] constant [@text GLU_TESS_MISSING_BEGIN_POLYGON].
VAL INT GLU.TESS.MISSING.BEGIN.POLYGON IS 100151:
--* Foreign [@text int] constant [@text GLU_TESS_MISSING_BEGIN_CONTOUR].
VAL INT GLU.TESS.MISSING.BEGIN.CONTOUR IS 100152:
--* Foreign [@text int] constant [@text GLU_TESS_MISSING_END_POLYGON].
VAL INT GLU.TESS.MISSING.END.POLYGON IS 100153:
--* Foreign [@text int] constant [@text GLU_TESS_MISSING_END_CONTOUR].
VAL INT GLU.TESS.MISSING.END.CONTOUR IS 100154:
--* Foreign [@text int] constant [@text GLU_TESS_COORD_TOO_LARGE].
VAL INT GLU.TESS.COORD.TOO.LARGE IS 100155:
--* Foreign [@text int] constant [@text GLU_TESS_NEED_COMBINE_CALLBACK].
VAL INT GLU.TESS.NEED.COMBINE.CALLBACK IS 100156:
--* Foreign [@text int] constant [@text GLU_TESS_WINDING_ODD].
VAL INT GLU.TESS.WINDING.ODD IS 100130:
--* Foreign [@text int] constant [@text GLU_TESS_WINDING_NONZERO].
VAL INT GLU.TESS.WINDING.NONZERO IS 100131:
--* Foreign [@text int] constant [@text GLU_TESS_WINDING_POSITIVE].
VAL INT GLU.TESS.WINDING.POSITIVE IS 100132:
--* Foreign [@text int] constant [@text GLU_TESS_WINDING_NEGATIVE].
VAL INT GLU.TESS.WINDING.NEGATIVE IS 100133:
--* Foreign [@text int] constant [@text GLU_TESS_WINDING_ABS_GEQ_TWO].
VAL INT GLU.TESS.WINDING.ABS.GEQ.TWO IS 100134:
--* Foreign structure pointer type [@text GLUnurbs].
DATA TYPE GLUnurbs IS INT:

--* Foreign structure pointer type [@text GLUquadric].
DATA TYPE GLUquadric IS INT:

--* Foreign structure pointer type [@text GLUtesselator].
DATA TYPE GLUtesselator IS INT:

--* Foreign structure pointer type [@text GLUnurbsObj].
DATA TYPE GLUnurbsObj IS INT:

--* Foreign structure pointer type [@text GLUquadricObj].
DATA TYPE GLUquadricObj IS INT:

--* Foreign structure pointer type [@text GLUtesselatorObj].
DATA TYPE GLUtesselatorObj IS INT:

--* Foreign structure pointer type [@text GLUtriangulatorObj].
DATA TYPE GLUtriangulatorObj IS INT:

#PRAGMA EXTERNAL "PROC C.gluBeginCurve (GLUnurbs nurb) = 0"

--* Foreign function [@text gluBeginCurve].
-- @param nurb Argument with type [@text GLUnurbs *].
INLINE PROC gluBeginCurve (GLUnurbs nurb)
  C.gluBeginCurve (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluBeginPolygon (GLUtesselator tess) = 0"

--* Foreign function [@text gluBeginPolygon].
-- @param tess Argument with type [@text GLUtesselator *].
INLINE PROC gluBeginPolygon (GLUtesselator tess)
  C.gluBeginPolygon (tess)
:

#PRAGMA EXTERNAL "PROC C.gluBeginSurface (GLUnurbs nurb) = 0"

--* Foreign function [@text gluBeginSurface].
-- @param nurb Argument with type [@text GLUnurbs *].
INLINE PROC gluBeginSurface (GLUnurbs nurb)
  C.gluBeginSurface (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluBeginTrim (GLUnurbs nurb) = 0"

--* Foreign function [@text gluBeginTrim].
-- @param nurb Argument with type [@text GLUnurbs *].
INLINE PROC gluBeginTrim (GLUnurbs nurb)
  C.gluBeginTrim (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluCylinder (GLUquadric quad, VAL REAL64 base, VAL REAL64 top, VAL REAL64 height, VAL INT slices, VAL INT stacks) = 0"

--* Foreign function [@text gluCylinder].
-- @param quad Argument with type [@text GLUquadric *].
-- @param base Argument with type [@text GLdouble].
-- @param top Argument with type [@text GLdouble].
-- @param height Argument with type [@text GLdouble].
-- @param slices Argument with type [@text GLint].
-- @param stacks Argument with type [@text GLint].
INLINE PROC gluCylinder (GLUquadric quad, VAL REAL64 base, VAL REAL64 top, VAL REAL64 height, VAL INT slices, VAL INT stacks)
  C.gluCylinder (quad, base, top, height, slices, stacks)
:

#PRAGMA EXTERNAL "PROC C.gluDeleteNurbsRenderer (GLUnurbs nurb) = 0"

--* Foreign function [@text gluDeleteNurbsRenderer].
-- @param nurb Argument with type [@text GLUnurbs *].
INLINE PROC gluDeleteNurbsRenderer (GLUnurbs nurb)
  C.gluDeleteNurbsRenderer (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluDeleteQuadric (GLUquadric quad) = 0"

--* Foreign function [@text gluDeleteQuadric].
-- @param quad Argument with type [@text GLUquadric *].
INLINE PROC gluDeleteQuadric (GLUquadric quad)
  C.gluDeleteQuadric (quad)
:

#PRAGMA EXTERNAL "PROC C.gluDeleteTess (GLUtesselator tess) = 0"

--* Foreign function [@text gluDeleteTess].
-- @param tess Argument with type [@text GLUtesselator *].
INLINE PROC gluDeleteTess (GLUtesselator tess)
  C.gluDeleteTess (tess)
:

#PRAGMA EXTERNAL "PROC C.gluDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops) = 0"

--* Foreign function [@text gluDisk].
-- @param quad Argument with type [@text GLUquadric *].
-- @param inner Argument with type [@text GLdouble].
-- @param outer Argument with type [@text GLdouble].
-- @param slices Argument with type [@text GLint].
-- @param loops Argument with type [@text GLint].
INLINE PROC gluDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops)
  C.gluDisk (quad, inner, outer, slices, loops)
:

#PRAGMA EXTERNAL "PROC C.gluEndCurve (GLUnurbs nurb) = 0"

--* Foreign function [@text gluEndCurve].
-- @param nurb Argument with type [@text GLUnurbs *].
INLINE PROC gluEndCurve (GLUnurbs nurb)
  C.gluEndCurve (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluEndPolygon (GLUtesselator tess) = 0"

--* Foreign function [@text gluEndPolygon].
-- @param tess Argument with type [@text GLUtesselator *].
INLINE PROC gluEndPolygon (GLUtesselator tess)
  C.gluEndPolygon (tess)
:

#PRAGMA EXTERNAL "PROC C.gluEndSurface (GLUnurbs nurb) = 0"

--* Foreign function [@text gluEndSurface].
-- @param nurb Argument with type [@text GLUnurbs *].
INLINE PROC gluEndSurface (GLUnurbs nurb)
  C.gluEndSurface (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluEndTrim (GLUnurbs nurb) = 0"

--* Foreign function [@text gluEndTrim].
-- @param nurb Argument with type [@text GLUnurbs *].
INLINE PROC gluEndTrim (GLUnurbs nurb)
  C.gluEndTrim (nurb)
:

#PRAGMA EXTERNAL "PROC C.gluErrorString (RESULT BYTE return.value, VAL INT error) = 0"

--* Foreign function [@text gluErrorString].
-- @param return.value Function return value with type [@text GLubyte const *].
-- @param error Argument with type [@text GLenum].
INLINE PROC gluErrorString (RESULT BYTE return.value, VAL INT error)
  C.gluErrorString (return.value, error)
:

#PRAGMA EXTERNAL "PROC C.gluGetNurbsProperty (GLUnurbs nurb, VAL INT property, REAL32 data) = 0"

--* Foreign function [@text gluGetNurbsProperty].
-- @param nurb Argument with type [@text GLUnurbs *].
-- @param property Argument with type [@text GLenum].
-- @param data Argument with type [@text GLfloat *].
INLINE PROC gluGetNurbsProperty (GLUnurbs nurb, VAL INT property, REAL32 data)
  C.gluGetNurbsProperty (nurb, property, data)
:

#PRAGMA EXTERNAL "PROC C.gluGetString (RESULT BYTE return.value, VAL INT name) = 0"

--* Foreign function [@text gluGetString].
-- @param return.value Function return value with type [@text GLubyte const *].
-- @param name Argument with type [@text GLenum].
INLINE PROC gluGetString (RESULT BYTE return.value, VAL INT name)
  C.gluGetString (return.value, name)
:

#PRAGMA EXTERNAL "PROC C.gluGetTessProperty (GLUtesselator tess, VAL INT which, REAL64 data) = 0"

--* Foreign function [@text gluGetTessProperty].
-- @param tess Argument with type [@text GLUtesselator *].
-- @param which Argument with type [@text GLenum].
-- @param data Argument with type [@text GLdouble *].
INLINE PROC gluGetTessProperty (GLUtesselator tess, VAL INT which, REAL64 data)
  C.gluGetTessProperty (tess, which, data)
:

#PRAGMA EXTERNAL "PROC C.gluLoadSamplingMatrices (GLUnurbs nurb, REAL32 model, REAL32 perspective, INT view) = 0"

--* Foreign function [@text gluLoadSamplingMatrices].
-- @param nurb Argument with type [@text GLUnurbs *].
-- @param model Argument with type [@text GLfloat const *].
-- @param perspective Argument with type [@text GLfloat const *].
-- @param view Argument with type [@text GLint const *].
INLINE PROC gluLoadSamplingMatrices (GLUnurbs nurb, REAL32 model, REAL32 perspective, INT view)
  C.gluLoadSamplingMatrices (nurb, model, perspective, view)
:

#PRAGMA EXTERNAL "PROC C.gluLookAt (VAL REAL64 eyeX, VAL REAL64 eyeY, VAL REAL64 eyeZ, VAL REAL64 centerX, VAL REAL64 centerY, VAL REAL64 centerZ, VAL REAL64 upX, VAL REAL64 upY, VAL REAL64 upZ) = 0"

--* Foreign function [@text gluLookAt].
-- @param eyeX Argument with type [@text GLdouble].
-- @param eyeY Argument with type [@text GLdouble].
-- @param eyeZ Argument with type [@text GLdouble].
-- @param centerX Argument with type [@text GLdouble].
-- @param centerY Argument with type [@text GLdouble].
-- @param centerZ Argument with type [@text GLdouble].
-- @param upX Argument with type [@text GLdouble].
-- @param upY Argument with type [@text GLdouble].
-- @param upZ Argument with type [@text GLdouble].
INLINE PROC gluLookAt (VAL REAL64 eyeX, VAL REAL64 eyeY, VAL REAL64 eyeZ, VAL REAL64 centerX, VAL REAL64 centerY, VAL REAL64 centerZ, VAL REAL64 upX, VAL REAL64 upY, VAL REAL64 upZ)
  C.gluLookAt (eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ)
:

#PRAGMA EXTERNAL "PROC C.gluNewNurbsRenderer (GLUnurbs  return.value) = 0"

--* Foreign function [@text gluNewNurbsRenderer].
-- @param return.value Function return value with type [@text GLUnurbs *].
INLINE PROC gluNewNurbsRenderer (GLUnurbs  return.value)
  C.gluNewNurbsRenderer (return.value)
:

#PRAGMA EXTERNAL "PROC C.gluNewQuadric (GLUquadric  return.value) = 0"

--* Foreign function [@text gluNewQuadric].
-- @param return.value Function return value with type [@text GLUquadric *].
INLINE PROC gluNewQuadric (GLUquadric  return.value)
  C.gluNewQuadric (return.value)
:

#PRAGMA EXTERNAL "PROC C.gluNewTess (GLUtesselator  return.value) = 0"

--* Foreign function [@text gluNewTess].
-- @param return.value Function return value with type [@text GLUtesselator *].
INLINE PROC gluNewTess (GLUtesselator  return.value)
  C.gluNewTess (return.value)
:

#PRAGMA EXTERNAL "PROC C.gluNextContour (GLUtesselator tess, VAL INT type) = 0"

--* Foreign function [@text gluNextContour].
-- @param tess Argument with type [@text GLUtesselator *].
-- @param type Argument with type [@text GLenum].
INLINE PROC gluNextContour (GLUtesselator tess, VAL INT type)
  C.gluNextContour (tess, type)
:

#PRAGMA EXTERNAL "PROC C.gluNurbsCurve (GLUnurbs nurb, VAL INT knotCount, REAL32 knots, VAL INT stride, REAL32 control, VAL INT order, VAL INT type) = 0"

--* Foreign function [@text gluNurbsCurve].
-- @param nurb Argument with type [@text GLUnurbs *].
-- @param knotCount Argument with type [@text GLint].
-- @param knots Argument with type [@text GLfloat *].
-- @param stride Argument with type [@text GLint].
-- @param control Argument with type [@text GLfloat *].
-- @param order Argument with type [@text GLint].
-- @param type Argument with type [@text GLenum].
INLINE PROC gluNurbsCurve (GLUnurbs nurb, VAL INT knotCount, REAL32 knots, VAL INT stride, REAL32 control, VAL INT order, VAL INT type)
  C.gluNurbsCurve (nurb, knotCount, knots, stride, control, order, type)
:

#PRAGMA EXTERNAL "PROC C.gluNurbsProperty (GLUnurbs nurb, VAL INT property, VAL REAL32 value) = 0"

--* Foreign function [@text gluNurbsProperty].
-- @param nurb Argument with type [@text GLUnurbs *].
-- @param property Argument with type [@text GLenum].
-- @param value Argument with type [@text GLfloat].
INLINE PROC gluNurbsProperty (GLUnurbs nurb, VAL INT property, VAL REAL32 value)
  C.gluNurbsProperty (nurb, property, value)
:

#PRAGMA EXTERNAL "PROC C.gluNurbsSurface (GLUnurbs nurb, VAL INT sKnotCount, REAL32 sKnots, VAL INT tKnotCount, REAL32 tKnots, VAL INT sStride, VAL INT tStride, REAL32 control, VAL INT sOrder, VAL INT tOrder, VAL INT type) = 0"

--* Foreign function [@text gluNurbsSurface].
-- @param nurb Argument with type [@text GLUnurbs *].
-- @param sKnotCount Argument with type [@text GLint].
-- @param sKnots Argument with type [@text GLfloat *].
-- @param tKnotCount Argument with type [@text GLint].
-- @param tKnots Argument with type [@text GLfloat *].
-- @param sStride Argument with type [@text GLint].
-- @param tStride Argument with type [@text GLint].
-- @param control Argument with type [@text GLfloat *].
-- @param sOrder Argument with type [@text GLint].
-- @param tOrder Argument with type [@text GLint].
-- @param type Argument with type [@text GLenum].
INLINE PROC gluNurbsSurface (GLUnurbs nurb, VAL INT sKnotCount, REAL32 sKnots, VAL INT tKnotCount, REAL32 tKnots, VAL INT sStride, VAL INT tStride, REAL32 control, VAL INT sOrder, VAL INT tOrder, VAL INT type)
  C.gluNurbsSurface (nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type)
:

#PRAGMA EXTERNAL "PROC C.gluOrtho2D (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top) = 0"

--* Foreign function [@text gluOrtho2D].
-- @param left Argument with type [@text GLdouble].
-- @param right Argument with type [@text GLdouble].
-- @param bottom Argument with type [@text GLdouble].
-- @param top Argument with type [@text GLdouble].
INLINE PROC gluOrtho2D (VAL REAL64 left, VAL REAL64 right, VAL REAL64 bottom, VAL REAL64 top)
  C.gluOrtho2D (left, right, bottom, top)
:

#PRAGMA EXTERNAL "PROC C.gluPartialDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops, VAL REAL64 start, VAL REAL64 sweep) = 0"

--* Foreign function [@text gluPartialDisk].
-- @param quad Argument with type [@text GLUquadric *].
-- @param inner Argument with type [@text GLdouble].
-- @param outer Argument with type [@text GLdouble].
-- @param slices Argument with type [@text GLint].
-- @param loops Argument with type [@text GLint].
-- @param start Argument with type [@text GLdouble].
-- @param sweep Argument with type [@text GLdouble].
INLINE PROC gluPartialDisk (GLUquadric quad, VAL REAL64 inner, VAL REAL64 outer, VAL INT slices, VAL INT loops, VAL REAL64 start, VAL REAL64 sweep)
  C.gluPartialDisk (quad, inner, outer, slices, loops, start, sweep)
:

#PRAGMA EXTERNAL "PROC C.gluPerspective (VAL REAL64 fovy, VAL REAL64 aspect, VAL REAL64 zNear, VAL REAL64 zFar) = 0"

--* Foreign function [@text gluPerspective].
-- @param fovy Argument with type [@text GLdouble].
-- @param aspect Argument with type [@text GLdouble].
-- @param zNear Argument with type [@text GLdouble].
-- @param zFar Argument with type [@text GLdouble].
INLINE PROC gluPerspective (VAL REAL64 fovy, VAL REAL64 aspect, VAL REAL64 zNear, VAL REAL64 zFar)
  C.gluPerspective (fovy, aspect, zNear, zFar)
:

#PRAGMA EXTERNAL "PROC C.gluPickMatrix (VAL REAL64 x, VAL REAL64 y, VAL REAL64 delX, VAL REAL64 delY, INT viewport) = 0"

--* Foreign function [@text gluPickMatrix].
-- @param x Argument with type [@text GLdouble].
-- @param y Argument with type [@text GLdouble].
-- @param delX Argument with type [@text GLdouble].
-- @param delY Argument with type [@text GLdouble].
-- @param viewport Argument with type [@text GLint *].
INLINE PROC gluPickMatrix (VAL REAL64 x, VAL REAL64 y, VAL REAL64 delX, VAL REAL64 delY, INT viewport)
  C.gluPickMatrix (x, y, delX, delY, viewport)
:

#PRAGMA EXTERNAL "PROC C.gluProject (RESULT INT return.value, VAL REAL64 objX, VAL REAL64 objY, VAL REAL64 objZ, REAL64 model, REAL64 proj, INT view, REAL64 winX, REAL64 winY, REAL64 winZ) = 0"

--* Foreign function [@text gluProject].
-- @param return.value Function return value with type [@text GLint].
-- @param objX Argument with type [@text GLdouble].
-- @param objY Argument with type [@text GLdouble].
-- @param objZ Argument with type [@text GLdouble].
-- @param model Argument with type [@text GLdouble const *].
-- @param proj Argument with type [@text GLdouble const *].
-- @param view Argument with type [@text GLint const *].
-- @param winX Argument with type [@text GLdouble *].
-- @param winY Argument with type [@text GLdouble *].
-- @param winZ Argument with type [@text GLdouble *].
INLINE PROC gluProject (RESULT INT return.value, VAL REAL64 objX, VAL REAL64 objY, VAL REAL64 objZ, REAL64 model, REAL64 proj, INT view, REAL64 winX, REAL64 winY, REAL64 winZ)
  C.gluProject (return.value, objX, objY, objZ, model, proj, view, winX, winY, winZ)
:

#PRAGMA EXTERNAL "PROC C.gluPwlCurve (GLUnurbs nurb, VAL INT count, REAL32 data, VAL INT stride, VAL INT type) = 0"

--* Foreign function [@text gluPwlCurve].
-- @param nurb Argument with type [@text GLUnurbs *].
-- @param count Argument with type [@text GLint].
-- @param data Argument with type [@text GLfloat *].
-- @param stride Argument with type [@text GLint].
-- @param type Argument with type [@text GLenum].
INLINE PROC gluPwlCurve (GLUnurbs nurb, VAL INT count, REAL32 data, VAL INT stride, VAL INT type)
  C.gluPwlCurve (nurb, count, data, stride, type)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricDrawStyle (GLUquadric quad, VAL INT draw) = 0"

--* Foreign function [@text gluQuadricDrawStyle].
-- @param quad Argument with type [@text GLUquadric *].
-- @param draw Argument with type [@text GLenum].
INLINE PROC gluQuadricDrawStyle (GLUquadric quad, VAL INT draw)
  C.gluQuadricDrawStyle (quad, draw)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricNormals (GLUquadric quad, VAL INT normal) = 0"

--* Foreign function [@text gluQuadricNormals].
-- @param quad Argument with type [@text GLUquadric *].
-- @param normal Argument with type [@text GLenum].
INLINE PROC gluQuadricNormals (GLUquadric quad, VAL INT normal)
  C.gluQuadricNormals (quad, normal)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricOrientation (GLUquadric quad, VAL INT orientation) = 0"

--* Foreign function [@text gluQuadricOrientation].
-- @param quad Argument with type [@text GLUquadric *].
-- @param orientation Argument with type [@text GLenum].
INLINE PROC gluQuadricOrientation (GLUquadric quad, VAL INT orientation)
  C.gluQuadricOrientation (quad, orientation)
:

#PRAGMA EXTERNAL "PROC C.gluQuadricTexture (GLUquadric quad, VAL BYTE texture) = 0"

--* Foreign function [@text gluQuadricTexture].
-- @param quad Argument with type [@text GLUquadric *].
-- @param texture Argument with type [@text GLboolean].
INLINE PROC gluQuadricTexture (GLUquadric quad, VAL BYTE texture)
  C.gluQuadricTexture (quad, texture)
:

#PRAGMA EXTERNAL "PROC C.gluScaleImage (RESULT INT return.value, VAL INT format, VAL INT wIn, VAL INT hIn, VAL INT typeIn, INT dataIn, VAL INT wOut, VAL INT hOut, VAL INT typeOut, INT dataOut) = 0"

--* Foreign function [@text gluScaleImage].
-- @param return.value Function return value with type [@text GLint].
-- @param format Argument with type [@text GLenum].
-- @param wIn Argument with type [@text GLsizei].
-- @param hIn Argument with type [@text GLsizei].
-- @param typeIn Argument with type [@text GLenum].
-- @param dataIn Argument with type [@text void const *].
-- @param wOut Argument with type [@text GLsizei].
-- @param hOut Argument with type [@text GLsizei].
-- @param typeOut Argument with type [@text GLenum].
-- @param dataOut Argument with type [@text GLvoid *].
INLINE PROC gluScaleImage (RESULT INT return.value, VAL INT format, VAL INT wIn, VAL INT hIn, VAL INT typeIn, INT dataIn, VAL INT wOut, VAL INT hOut, VAL INT typeOut, INT dataOut)
  C.gluScaleImage (return.value, format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut)
:

#PRAGMA EXTERNAL "PROC C.gluSphere (GLUquadric quad, VAL REAL64 radius, VAL INT slices, VAL INT stacks) = 0"

--* Foreign function [@text gluSphere].
-- @param quad Argument with type [@text GLUquadric *].
-- @param radius Argument with type [@text GLdouble].
-- @param slices Argument with type [@text GLint].
-- @param stacks Argument with type [@text GLint].
INLINE PROC gluSphere (GLUquadric quad, VAL REAL64 radius, VAL INT slices, VAL INT stacks)
  C.gluSphere (quad, radius, slices, stacks)
:

#PRAGMA EXTERNAL "PROC C.gluTessBeginContour (GLUtesselator tess) = 0"

--* Foreign function [@text gluTessBeginContour].
-- @param tess Argument with type [@text GLUtesselator *].
INLINE PROC gluTessBeginContour (GLUtesselator tess)
  C.gluTessBeginContour (tess)
:

#PRAGMA EXTERNAL "PROC C.gluTessBeginPolygon (GLUtesselator tess, INT data) = 0"

--* Foreign function [@text gluTessBeginPolygon].
-- @param tess Argument with type [@text GLUtesselator *].
-- @param data Argument with type [@text GLvoid *].
INLINE PROC gluTessBeginPolygon (GLUtesselator tess, INT data)
  C.gluTessBeginPolygon (tess, data)
:

#PRAGMA EXTERNAL "PROC C.gluTessEndContour (GLUtesselator tess) = 0"

--* Foreign function [@text gluTessEndContour].
-- @param tess Argument with type [@text GLUtesselator *].
INLINE PROC gluTessEndContour (GLUtesselator tess)
  C.gluTessEndContour (tess)
:

#PRAGMA EXTERNAL "PROC C.gluTessEndPolygon (GLUtesselator tess) = 0"

--* Foreign function [@text gluTessEndPolygon].
-- @param tess Argument with type [@text GLUtesselator *].
INLINE PROC gluTessEndPolygon (GLUtesselator tess)
  C.gluTessEndPolygon (tess)
:

#PRAGMA EXTERNAL "PROC C.gluTessNormal (GLUtesselator tess, VAL REAL64 valueX, VAL REAL64 valueY, VAL REAL64 valueZ) = 0"

--* Foreign function [@text gluTessNormal].
-- @param tess Argument with type [@text GLUtesselator *].
-- @param valueX Argument with type [@text GLdouble].
-- @param valueY Argument with type [@text GLdouble].
-- @param valueZ Argument with type [@text GLdouble].
INLINE PROC gluTessNormal (GLUtesselator tess, VAL REAL64 valueX, VAL REAL64 valueY, VAL REAL64 valueZ)
  C.gluTessNormal (tess, valueX, valueY, valueZ)
:

#PRAGMA EXTERNAL "PROC C.gluTessProperty (GLUtesselator tess, VAL INT which, VAL REAL64 data) = 0"

--* Foreign function [@text gluTessProperty].
-- @param tess Argument with type [@text GLUtesselator *].
-- @param which Argument with type [@text GLenum].
-- @param data Argument with type [@text GLdouble].
INLINE PROC gluTessProperty (GLUtesselator tess, VAL INT which, VAL REAL64 data)
  C.gluTessProperty (tess, which, data)
:

#PRAGMA EXTERNAL "PROC C.gluTessVertex (GLUtesselator tess, REAL64 location, INT data) = 0"

--* Foreign function [@text gluTessVertex].
-- @param tess Argument with type [@text GLUtesselator *].
-- @param location Argument with type [@text GLdouble *].
-- @param data Argument with type [@text GLvoid *].
INLINE PROC gluTessVertex (GLUtesselator tess, REAL64 location, INT data)
  C.gluTessVertex (tess, location, data)
:

#PRAGMA EXTERNAL "PROC C.gluUnProject (RESULT INT return.value, VAL REAL64 winX, VAL REAL64 winY, VAL REAL64 winZ, REAL64 model, REAL64 proj, INT view, REAL64 objX, REAL64 objY, REAL64 objZ) = 0"

--* Foreign function [@text gluUnProject].
-- @param return.value Function return value with type [@text GLint].
-- @param winX Argument with type [@text GLdouble].
-- @param winY Argument with type [@text GLdouble].
-- @param winZ Argument with type [@text GLdouble].
-- @param model Argument with type [@text GLdouble const *].
-- @param proj Argument with type [@text GLdouble const *].
-- @param view Argument with type [@text GLint const *].
-- @param objX Argument with type [@text GLdouble *].
-- @param objY Argument with type [@text GLdouble *].
-- @param objZ Argument with type [@text GLdouble *].
INLINE PROC gluUnProject (RESULT INT return.value, VAL REAL64 winX, VAL REAL64 winY, VAL REAL64 winZ, REAL64 model, REAL64 proj, INT view, REAL64 objX, REAL64 objY, REAL64 objZ)
  C.gluUnProject (return.value, winX, winY, winZ, model, proj, view, objX, objY, objZ)
:

#ENDIF
