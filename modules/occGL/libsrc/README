Occam OpenGL wrapper library.
Update: 7/6/05
All the api now wraps correctly.  There is a good chance that most things will be working.
There is a small issue with some arrays that do no map correctly, you have to remove the VAL 
from infront of the REAL32 for four matrix functions.

14/2/05

What works:

Most opengl calls that do not require the passing of arrays.

What is different to the official opengl API:

Any names that contain _'s in the official api are renamed to contain a . instead of the _
so:

GL_LINES
has to be written as
GL.LINES
in occam.

What we know for sure does not work:

Quite a lot I suspect.  I am working on slowing going through and fixing/testing things.
Anything that needs to have structures passed to it will probably not work.

Nurbs, tesselators and so on probably don't work...

If there is a particular function that you need working please e-mail me at
djd20@kent.ac.uk

In order to generate new occam opengl wrappers make sure you have the latest swig from cvs installed with the 
swig-occampi patch from: http://www.cs.kent.ac.uk/~djd20/projects.html

How to wrap and compile:

Make sure you have a new version of the swig source code, preferably from CVS downloaded.
You can find out how to do that at:
http://www.swig.org/cvs.html

Then you should get the occampi-swig patch from:
http://www.cs.kent.ac.uk/~djd20/projects.html

Apply the patch to the swig project from inside the top level directory of your swig-cvs download:
patch -p0 < `gunzip swig-occam.patch.gz`

Compile swig:
./autogen.sh && ./configure && make

At this point you probably want to do a make install to make swig available system-wide.
You probably need to be root to do that:
make install

Make sure you have the kroc occam compiler installed to compile the wrappers, available from
http://frmb.org/kroc.html

Then go to the directory where you have unpacked your opengl .i interface files and just run:
swig -occampi opengl.i

If everything went well, it will output some warnings or error messages and you should have generated 
wrappers.  To build a shared library just type make in the same directory where you ran the above
command.

Enjoy!

Sample code should can be found at:
http://www.cs.kent.ac.uk/~djd20/project.html
