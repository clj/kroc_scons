#!/usr/bin/env python
# convert-font: convert a BDF font into an occam source fragment
#
# Copyright (C) 2008 Adam Sampson <ats@offog.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

import sys, os

def convert(fn, name):
	width = None
	height = None
	comment_lines = []
	chars = {}

	f = open(fn)

	while 1:
		l = f.readline()
		if l == "":
			break
		l = l[:-1]

		fs = l.split()
		if fs == []:
			continue
		cmd = fs[0]
		if cmd in ("FONT", "COMMENT", "COPYRIGHT"):
			comment_lines.append(l)
		elif cmd == "FONTBOUNDINGBOX":
			width, height = int(fs[1]), int(fs[2])
		elif cmd == "STARTCHAR":
			code = None

			while cmd != "ENDCHAR":
				l = f.readline()
				if l == "":
					print "EOF in character"
					sys.exit(1)
				l = l[:-1]

				fs = l.split()
				cmd = fs[0]
				if cmd == "ENCODING":
					code = int(fs[1])
				elif cmd == "BBX":
					if int(fs[1]) != width or int(fs[2]) != height:
						print "Character %d has mismatched size" % code
						sys.exit(1)
				elif cmd == "BITMAP":
					# Bitmap data is MSB-aligned in a
					# variable number of hex digits; we
					# want it MSB-aligned in 32 bits.
					lines = [f.readline().strip() for i in range(height)]
					shift = 32 - (len(lines[0]) * 4)
					chars[code] = [int(line, 16) << shift for line in lines]
				elif cmd == "ENDCHAR":
					break

	f.close()

	if width > 32:
		print "Font is too wide (max 32 pixels)"
		sys.exit(1)

	def format_num(n):
		if n == 0:
			return "0"
		else:
			return "#%08X" % n
	def convert_char(code):
		char = chars.get(code, [0 for i in range(height)])
		return ", ".join(map(format_num, char))

	f = sys.stdout
	f.write("-- Font converted from %s by convert-font; details:\n" % os.path.basename(fn))
	for l in comment_lines:
		f.write("--   %s\n" % l)

	f.write("VAL []INT %s IS\n" % name)
	f.write("  [%d, %d,\n" % (width, height))
	f.write("   " + ",\n   ".join(map(convert_char, range(256))) + "]:\n")
	f.write("\n")

if __name__ == "__main__":
	args = sys.argv[1:]

	if len(args) != 2:
		print "Usage: convert-font BDF-FILE NAME"
		sys.exit(1)

	convert(args[0], args[1])
